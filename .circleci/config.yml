# CircleCI integration with Drupal 8.

#Jobs

## Job to run the update path and tests.
build_and_deploy: &build_and_deploy
  docker:
    - image: egovpdx/drupal-ci:latest
      auth:
        username: egovpdx
        password: $DOCKERHUB_PASSWORD
  working_directory: /var/www/html
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - source-v1-{{ .Branch }}-{{ .Revision }}
          - source-v1-{{ .Branch }}-
          - source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - restore_cache:
        name: Restore Terminus cache
        keys:
          - terminus_2_with_build_tools_2
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
            cd /tmp && composer require pantheon-systems/terminus:^2.0.0
            mkdir -p ~/.terminus/plugins
            composer create-project --no-dev -d ~/.terminus/plugins pantheon-systems/terminus-build-tools-plugin:^2.0.0
          fi
    - save_cache:
        name: Save Terminus cache
        key: terminus_2_with_build_tools_2
        paths:
          - "/tmp/vendor"
          - "/root/.terminus"
    - restore_cache:
        name: Restore Composer Cache
        keys:
          - v2-dependencies-{{ checksum "composer.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-
    - run:
        name: Composer install
        command: |
          # hotfix - getting error on module but can't update due to lightning dependency, try removing and getting fresh
          rm -rf ./web/modules/contrib/search_api_solr
          # Pantheon don't allow these folders but Composer needs them
          rm -rf ./web/modules/contrib/facets
          # Run composer install
          composer -V
          composer config --global --auth github-oauth.github.com "$COMPOSER_TOKEN"
          composer install --no-interaction --no-dev
    - save_cache:
        name: Save Composer Cache
        key: v2-dependencies-{{ checksum "composer.lock" }}
        paths:
          - ./vendor
          - ./web/core
          - ./web/modules/contrib
          - ./web/profiles/contrib
          - ./web/themes/contrib
          - ./web/libraries
    - run:
        name: Deploy to Pantheon
        when: on_success
        no_output_timeout: 15m # allow 15 minutes instead of 10 minute default for script to complete
        command: |
          # Add terminus into path
          export PATH=/tmp/vendor/bin:/var/www/html/vendor/bin:$PATH && cd /var/www/html

          # Don't check the repo host key
          export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

          # Don't check for host key for Pantheon sites
          echo -e "host *.drush.in\n    StrictHostKeyChecking no" >> ~/.ssh/config

          # Terminus log in with the user email that will be displayed as the commit user in Pantheon Git repo
          terminus auth:login --machine-token="$eGov_Terminus" --email="$eGov_Email"

          # Git operations
          # Set the git commit user name and email address so it's clear in Pantheon log who made the change
          git config --global user.name $CIRCLE_USERNAME
          git config --global user.email $eGov_Email
          git config --global core.safecrlf false
          git remote add pantheon ssh://codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629@codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629.drush.in:2222/~/repository.git
          # Force add all files to include those excluded by .gitignore
          cd /var/www/html && find ./web/modules -name .git -type d -prune -exec rm -rf "{}" \;
          git add -f /var/www/html
          # Pantheon site will use the wrong DB if the local is kept
          git rm --cache  web/sites/default/settings.local.php --ignore-unmatch
          git rm -r --cache web/sites/default/files --ignore-unmatch

          export COMMIT_MSG="$(git log -1 --pretty=%B)"
          git commit -m "CircleCI deployment for: " -m "$COMMIT_MSG" --quiet

          # When commit on master, we deploy to DEV
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo "export PANTHEON_ENV=dev" >> $BASH_ENV && source $BASH_ENV
          else
            echo "export PANTHEON_ENV=$CIRCLE_BRANCH" >> $BASH_ENV && source $BASH_ENV

            # Check if the multidev branch site exists. If not, create it
            terminus multidev:list --format=list --field=Name $CIRCLE_PROJECT_REPONAME > ./env_list.txt
            if grep -Fxq "$PANTHEON_ENV" ./env_list.txt; then
              echo "Found Pantheon site: $PANTHEON_ENV"
            else
              # Determine base branch of PR
              #   - Extract PR number from pull request URL
              #   - Query GitHub API for PR data and extract base branch from JSON base.ref property
              [[ $CIRCLE_PULL_REQUEST =~ \/pull\/([0-9]+)$ ]]
              BASE=$(curl -s https://api.github.com/repos/egovPDX/$CIRCLE_PROJECT_REPONAME/pulls/${BASH_REMATCH[1]} | grep -Pzo '(?s)"base":.*?"ref": "\K[A-Za-z0-9_-]+' | tr -d '\0')
              if [[ $BASE = "master" ]]; then
                BASE=dev
              fi
              # Create a new Multi-Dev with files and database from site corresponding to PR's base branch.
              echo "Creating new multidev site cloned from $BASE. Please wait."
              terminus multidev:create $CIRCLE_PROJECT_REPONAME.$BASE $PANTHEON_ENV >/dev/null
            fi
            rm -rf ./env_list.txt
          fi

          # Set the connection type to GIT and force push
          terminus connection:set $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV git
          git push -f pantheon $CIRCLE_BRANCH
          echo "Waiting for the workflow: Sync code on $PANTHEON_ENV..."
          terminus build:workflow:wait $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV "Sync code on \"$PANTHEON_ENV\""

          echo "Rebuilding cache..."
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr
          echo "Running database updates..."
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- updb -y
          echo "Importing config..."
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cim -y -vvv
          echo "Rebuilding cache..."
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr

          # When commit on a permanent branch or master, delete the multi-dev site with name like "powr-1234a"
          if [[ $PANTHEON_ENV = "release" ]]; then
            # After success deployment to release, remove the multidev site if this is a merge of a PR.
            cd /var/www/html

            # Must read the last commit message from Github. The last one in local repo is "CircleCI Deployment"
            last_log=$(git log origin/$CIRCLE_BRANCH --pretty=format:%s -1)
            lowercase_last_log="${last_log,,}"
            JIRA_STORY_ID=""
            # Simple merge
            # Example: Merge pull request #35 from eGovPDX/powr-152
            if [[ $lowercase_last_log =~ (^merge pull request #[0-9]* from egovpdx\/)([^,]*) ]]; then
              echo "Found story ID from merge commit message: '${BASH_REMATCH[2]}'";
              JIRA_STORY_ID=${BASH_REMATCH[2]}
            # Squash and Merge on other feature branches
            # Example: POWR-3058 Delete all related multi-devs when a branch is merged
            elif [[ $lowercase_last_log =~ ^(powr-[0-9]+)[[:space:]]+.+$ ]]; then
              echo "Found story ID from squash and merge commit message: '${BASH_REMATCH[1]}'";
              JIRA_STORY_ID=${BASH_REMATCH[1]}
            else
              echo "Cannot find JIRA story ID from the last commit message: $lowercase_last_log"
              exit 0
            fi

            # Save all multi-dev names in a file
            terminus multidev:list --format=list --field=Name $CIRCLE_PROJECT_REPONAME > ./env_list.txt
            echo "Multi-dev site list saved into env_list.txt"

            # Pattern to match "powr-1234a" or "powr-1234-1" or "powr-1234-a". Not "powr-12345"
            env_pattern="^${JIRA_STORY_ID}([a-z]*|(-\d+)|(-[a-z]+))$"

            # Find and delete all multidevs starting with the story ID
            if [ -f "./env_list.txt" ]
            then
              echo "Found multi-dev sites:";
              # cat ./env_list.txt
              grep -E "${env_pattern}" ./env_list.txt > ./matching_env_list.txt || true
              # cat ./matching_env_list.txt
              # If the file is NOT empty
              if [ -s "./matching_env_list.txt" ]
              then
                echo "Start to delete multi-dev..."
                while read env_name; do
                  terminus multidev:delete --delete-branch $CIRCLE_PROJECT_REPONAME.$env_name -y
                  echo "Deleted multi-dev: $env_name"
                done <./matching_env_list.txt
                echo "Done deleting multi-dev"
                rm -f ./matching_env_list.txt
              else
                echo "No multi-dev site found matching the story ID: $JIRA_STORY_ID."
              fi
            fi
          fi

visual_regression: &visual_regression
  docker:
    - image: cimg/php:7.4-browsers
      auth:
        username: egovpdx
        password: $DOCKERHUB_PASSWORD
  # environment:
  #   PERCY_PARALLEL_TOTAL: -1
  #   PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
  parallelism: 5
  working_directory: /home/circleci/app
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - jest-source-v1-{{ .Branch }}-{{ .Revision }}
          - jest-source-v1-{{ .Branch }}-
          - jest-source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: jest-source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - restore_cache:
        name: Restore Terminus cache
        keys:
          - terminus_-{{ checksum "composer.lock" }}
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
          cd /tmp && composer require pantheon-systems/terminus:^2.0.0
          fi
    - save_cache:
        name: Save Terminus cache
        key: terminus_-{{ checksum "composer.lock" }}
        paths:
          - "/tmp/vendor"

    - restore_cache:
        name: Restore Jest and Percy dependencies cache
        keys:
          - jest-{{ checksum "tests/percy/yarn.lock" }}-v2
    - run:
        name: Install Jest and Percy dependencies
        command: |
          cd /home/circleci/app/tests/percy
          export PERCY_POSTINSTALL_BROWSER=true
          yarn install --frozen-lockfile
    - save_cache:
        name: Save Jest and Percy dependencies cache
        key: jest-{{ checksum "tests/percy/yarn.lock" }}-v2
        paths:
          - "tests/percy/node_modules"
    - run:
        name: Run Percy tests
        command: |
          export PATH=/var/www/html/tests/vendor/bin:/tmp/vendor/pantheon-systems/terminus/bin:$PATH

          # Log in via terminus first. Required for tests that require user login.
          terminus auth:login --quiet --machine-token="$eGov_Terminus" --email="$eGov_Email" && terminus aliases

          # Prepare environment variables to be used by Percy
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo 'export SITE_NAME="dev"' > $BASH_ENV && source $BASH_ENV
          else
            echo 'export SITE_NAME=${CIRCLE_BRANCH}' > $BASH_ENV && source $BASH_ENV
          fi

          mkdir /home/circleci/artifacts
          cd /home/circleci/app/tests/percy

          # Start Percy tests excluding full regression tests
          TESTFILES=$(circleci tests glob "__tests__/*.js" | circleci tests split)
          for TESTFILE in $TESTFILES
          do
            # Generate one time login link for tests
            if [[ ${TESTFILE} == *"ally"* ]]; then
              echo 'export ALLY_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --mail ally.admin@portlandoregon.gov)' > $BASH_ENV && source $BASH_ENV
              npm run jest-test -- ${TESTFILE}
            elif [[ ${TESTFILE} == *"marty"* ]]; then
              echo 'export MARTY_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --mail marty.member@portlandoregon.gov)' > $BASH_ENV && source $BASH_ENV
              npm run jest-test -- ${TESTFILE}
            elif [[ ${TESTFILE} == *"admin-group"* ]]; then
              echo 'export KEVIN_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --mail xinju.wang@portlandoregon.gov)' > $BASH_ENV && source $BASH_ENV
              npm run jest-test -- ${TESTFILE}
            elif [[ ${TESTFILE} == *"admin"* ]]; then
              echo 'export SUPERADMIN_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --name superAdmin)' > $BASH_ENV && source $BASH_ENV
              npm run jest-test -- ${TESTFILE}
            elif [[ ${TESTFILE} == *"anonymous"* ]]; then
              npm run single-test -- ${TESTFILE}
            fi
          done
    - store_artifacts:
        path: /home/circleci/artifacts
        destination: /

full_regression: &full_regression
  docker:
    - image: cimg/php:7.4-browsers
      auth:
        username: egovpdx
        password: $DOCKERHUB_PASSWORD
  working_directory: /home/circleci/app
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - jest-source-v1-{{ .Branch }}-{{ .Revision }}
          - jest-source-v1-{{ .Branch }}-
          - jest-source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: jest-source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - restore_cache:
        name: Restore Terminus cache
        keys:
          - terminus_-{{ checksum "composer.lock" }}
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
          cd /tmp && composer require pantheon-systems/terminus:^2.0.0
          fi
    - save_cache:
        name: Save Terminus cache
        key: terminus_-{{ checksum "composer.lock" }}
        paths:
          - "/tmp/vendor"

    - restore_cache:
        name: Restore Jest and Percy dependencies cache
        keys:
          - jest-{{ checksum "tests/percy/yarn.lock" }}-v2
    - run:
        name: Install Jest and Percy dependencies
        command: |
          cd /home/circleci/app/tests/percy
          export PERCY_POSTINSTALL_BROWSER=true
          yarn install --frozen-lockfile
    - save_cache:
        name: Save Jest and Percy dependencies cache
        key: jest-{{ checksum "tests/percy/yarn.lock" }}-v2
        paths:
          - "tests/percy/node_modules"

    - restore_cache:
        name: Restore last git commit file
        keys:
          - git-commit-{{ .Revision }}-v1
    - run:
        name: Run full regression tests
        command: |
          export PATH=/var/www/html/tests/vendor/bin:/tmp/vendor/pantheon-systems/terminus/bin:$PATH

          # Skip test if there is no new commit since the last run
          echo "Current commit: $CIRCLE_SHA1"
          if [ -s "./last_commit_hash.txt" ]
          then
            export LAST_COMMIT_HASH=$(<last_commit_hash.txt)
            echo "Last commit: $LAST_COMMIT_HASH"
            if [[ "$CIRCLE_SHA1" == "$LAST_COMMIT_HASH" ]]; then
              echo "No new commit since ${LAST_COMMIT_HASH}. Skip full regression test."
              exit 0
            else
              echo "New commit since ${LAST_COMMIT_HASH}. Start full regression test"
              echo "$CIRCLE_SHA1" > ./last_commit_hash.txt
            fi
          fi
          if [ ! -f ./last_commit_hash.txt ]; then
            echo "$CIRCLE_SHA1" > ./last_commit_hash.txt
            # cat ./last_commit_hash.txt
          fi

          # Log in via terminus first. Required for tests that require user login.
          terminus auth:login --quiet --machine-token="$eGov_Terminus" --email="$eGov_Email" && terminus aliases

          # Prepare environment variables to be used by Percy
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo 'export SITE_NAME="dev"' > $BASH_ENV && source $BASH_ENV
          else
            echo 'export SITE_NAME=${CIRCLE_BRANCH}' > $BASH_ENV && source $BASH_ENV
          fi

          mkdir /home/circleci/artifacts
          cd /home/circleci/app/tests/percy

          # Get login links
          echo 'export ALLY_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --mail ally.admin@portlandoregon.gov)' > $BASH_ENV && source $BASH_ENV
          echo 'export MARTY_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --mail marty.member@portlandoregon.gov)' > $BASH_ENV && source $BASH_ENV
          echo 'export SUPERADMIN_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --name superAdmin)' > $BASH_ENV && source $BASH_ENV

          # Start Percy tests
          npm run jest-full
    - save_cache:
        name: Save git commit file
        key: git-commit-{{ .Revision }}-v1
        paths:
          - "/home/circleci/app/last_commit_hash.txt"
    - store_artifacts:
        path: /home/circleci/artifacts
        destination: /
    - slack/notify:
        branch_pattern: powr-3508
        event: fail
        # mentions: '<@U8XXXXXXX>, @UserName'
        template: basic_fail_1

# Declare all of the jobs we should run.
version: 2.1
jobs:
  deploy:
    <<: *build_and_deploy
  visual_regression:
    <<: *visual_regression
  full_regression:
    <<: *full_regression

orbs:
  percy: percy/agent@0.1.2
  slack: circleci/slack@4.4.2

# Declare a workflow that runs all of our jobs in parallel.
workflows:
  version: 2
  deploy_and_test:
    jobs:
      - deploy
      - visual_regression:
          requires:
            - deploy
  daily:
    jobs:
      - full_regression:
          context: eGovPDX
    triggers:
      - schedule:
          # UTC date/time 8am is Pacific 12am
          cron: "0 8 * * 1,2,3,4,5"
          filters:
            branches:
              only:
                # - master
                - powr-3508
