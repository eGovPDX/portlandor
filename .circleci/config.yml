# CircleCI integration with Drupal 8.

#Jobs

## Job to run the update path and Behat tests.
build_and_deploy: &build_and_deploy
  docker:
    - image: egovpdx/drupal-ci:latest
      auth:
        username: egovpdx
        password: $DOCKERHUB_PASSWORD
  working_directory: /var/www/html
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - source-v1-{{ .Branch }}-{{ .Revision }}
          - source-v1-{{ .Branch }}-
          - source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - restore_cache:
        name: Restore Terminus cache
        keys:
          - terminus_-{{ checksum "composer.lock" }}
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
          cd /tmp && composer require pantheon-systems/terminus:^2.0.0
          fi
    - save_cache:
        name: Save Terminus cache
        key: terminus_-{{ checksum "composer.lock" }}
        paths:
          - "/tmp/vendor"
    - restore_cache:
        name: Restore theme dependencies cache
        keys:
          - cloudy_-{{ checksum "web/themes/custom/cloudy/yarn.lock" }}
    - run:
        name: Install theme dependencies
        command: |
          cd web/themes/custom/cloudy && yarn install --frozen-lockfile
    - save_cache:
        name: Save theme dependencies cache
        key: cloudy_-{{ checksum "web/themes/custom/cloudy/yarn.lock" }}
        paths:
          - "web/themes/custom/cloudy/node_modules"
    - restore_cache:
        name: Restore Composer Cache
        keys:
          - v2-dependencies-{{ checksum "composer.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-
    - run:
        name: Composer install
        command: |
          # hotfix - getting error on module but can't update due to lightning dependency, try removing and getting fresh
          rm -rf ./web/modules/contrib/search_api_solr
          # Pantheon don't allow these folders but Composer needs them
          rm -rf ./web/modules/contrib/facets
          # Run composer install
          composer -V
          composer config --global --auth github-oauth.github.com "$COMPOSER_TOKEN"
          composer install --no-interaction --no-dev
    - save_cache:
        name: Save Composer Cache
        key: v2-dependencies-{{ checksum "composer.lock" }}
        paths:
          - ./vendor
          - ./web/core
          - ./web/modules/contrib
          - ./web/profiles/contrib
          - ./web/themes/contrib
          - ./web/libraries
    - run:
        name: Build Theme and Pattern Lab
        command: cd web/themes/custom/cloudy && yarn run build:ci
    - run:
        name: Remove Node Modules post build to lighten upload to Pantheon
        command: cd /var/www/html && rm -rf web/themes/custom/cloudy/node_modules
    - run:
        # Unlike npm, security audit is not automatically included in install
        name: Security Audit of Node dependencies
        # Once POWR-2023 is resolved and yarn updated, we can bring this back. However this command is not yet available in yarn 1.6
        # command: cd web/themes/custom/cloudy && yarn audit
        command: cd web/themes/custom/cloudy && yarn audit || echo 'it appears that yarn audit found some security issues in your node dependencies, consider running a yarn upgrade'
    - run:
        name: Deploy to Pantheon
        when: on_success
        no_output_timeout: 15m # allow 15 minutes instead of 10 minute default for script to complete
        command: |
          export PATH=/tmp/vendor/bin:/var/www/html/vendor/bin:$PATH && cd /var/www/html
          # Don't check the repo host key
          export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
          # Don't check for host key for Pantheon sites
          echo -e "host *.drush.in\n    StrictHostKeyChecking no" >> ~/.ssh/config
          # Terminus log in with the user email that will be displayed as the commit user in Pantheon Git repo
          terminus auth:login --machine-token="$eGov_Terminus" --email="$eGov_Email"
          # Git operations
          git remote add pantheon ssh://codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629@codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629.drush.in:2222/~/repository.git
          git config --global user.email "$eGov_Email"
          # Force add all files to include those excluded by .gitignore
          cd /var/www/html && find ./web/modules -name .git -type d -prune -exec rm -rf "{}" \;
          git add -f /var/www/html
          # Pantheon site will use the wrong DB if the local is kept
          git rm --cache  web/sites/default/settings.local.php --ignore-unmatch
          git rm -r --cache web/sites/default/files --ignore-unmatch

          # Set the git commit user name and email address so it's clear in Pantheon log who made the change
          if [[ $CIRCLE_USERNAME = "" ]]; then
            git config --global user.name Dependabot
          else
            git config --global user.name $CIRCLE_USERNAME
          fi
          git config --global user.email $eGov_Email

          export COMMIT_MSG="$(git log -1 --pretty=%B)"
          git commit -m "CircleCI deployment for: " -m "$COMMIT_MSG" --quiet

          # When commit on master, we deploy to DEV
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo "Deploy to Pantheon DEV site"
            # Set Pantheon environment name
            echo "export PANTHEON_ENV=dev" >> $BASH_ENV && source $BASH_ENV
            # Set the connection type to GIT
            terminus connection:set $CIRCLE_PROJECT_REPONAME.dev git
            git push -f pantheon master
            # TODO: Sanitize DB here
            # terminus env:clone-content $CIRCLE_PROJECT_REPONAME.test dev
            # After success deployment to DEV, remove the multidev site if this is a merge of a PR.
            # Read the last Git log in the master branch. Get the story ID from the start of the log.
            # Example: POWR-3058 Delete all related multi-devs when a branch is merged
            cd /var/www/html
            # Must read the last commit message from Github. The last one in local repo is "CircleCI Deployment"
            last_log=$(git log origin/master --pretty=format:%s -1)
            lowercase_last_log=`php -r "print strtolower('$last_log');"`
            if [[ $lowercase_last_log =~ ^(powr-[0-9]+)[[:space:]]+.+$ ]]; then
              echo "Found the story ID: '${BASH_REMATCH[1]}'";

              # Save all multi-dev names in a file
              terminus multidev:list --format=list --field=Name $CIRCLE_PROJECT_REPONAME > ./env_list.txt
              echo "Multi-dev site list saved into env_list.txt"

              # Pattern to match "powr-1234a" or "powr-1234-1" or "powr-1234-a". Not "powr-12345"
              env_pattern="^${BASH_REMATCH[1]}([a-z]*|(-\d+)|(-[a-z]+))$"

              # Find and delete all multidevs starting with the story ID
              # TODO: determine if missing env_name is causing build re-run for dev to fail
              # TODO: determine why some patterns for multidevs do not get deleted
              if [ -f "./env_list.txt" ]
              then
                echo "Found multi-dev sites:";
                cat ./env_list.txt
                grep -E "${env_pattern}" ./env_list.txt > ./matching_env_list.txt || true
                # If the file is NOT empty
                if [ -s "./matching_env_list.txt" ]
                then
                  echo "Start to delete multi-dev..."
                  while read env_name; do
                    terminus multidev:delete --delete-branch $CIRCLE_PROJECT_REPONAME.$env_name -y
                    echo "Deleted multi-dev: $env_name"
                  done <./matching_env_list.txt
                  echo "Done deleting multi-dev"
                  rm -f ./matching_env_list.txt
                else
                  echo "No multi-dev site found matching the story ID."
                fi
              fi
            fi
            echo "Waiting for sync code workflow to finish..."
            until [ $(terminus workflow:list --fields status,env --format string -- $CIRCLE_PROJECT_REPONAME | egrep -i $PANTHEON_ENV -m 1 | egrep -i -o "^\w+") == succeeded ]; do
              sleep 30
            done
            echo "Rebuilding cache..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr
            echo "Running database updates..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- updb -y
            echo "Importing config..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cim -y
            echo "Running cron..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- core:cron -y
            echo "Rebuilding cache..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr
          else  # All other commits deploy to a multidev
            # Set Pantheon environment name
            if [[ $CIRCLE_BRANCH =~ ^dependabot\/ ]] && [[ $CIRCLE_PULL_REQUEST =~ \/pull\/([0-9]+)$ ]]; then
              echo "export PANTHEON_ENV=bot-${BASH_REMATCH[1]}" >> $BASH_ENV && source $BASH_ENV
            else
              echo "export PANTHEON_ENV=$CIRCLE_BRANCH" >> $BASH_ENV && source $BASH_ENV
            fi
            echo "Pantheon environment name is $PANTHEON_ENV"

            # Check if the multidev branch site exists. If not, create it
            terminus multidev:list --format=list --field=Name $CIRCLE_PROJECT_REPONAME > ./env_list.txt
            if grep -Fxq "$PANTHEON_ENV" ./env_list.txt; then
              echo "Found multidev site"
            else
              # Determine base branch of PR
              #   - Extract PR number from pull request URL
              #   - Query GitHub API for PR data and extract base branch from JSON base.ref property
              [[ $CIRCLE_PULL_REQUEST =~ \/pull\/([0-9]+)$ ]]
              BASE=$(curl -s https://api.github.com/repos/egovPDX/$CIRCLE_PROJECT_REPONAME/pulls/${BASH_REMATCH[1]} | grep -Pzo '(?s)"base":.*?"ref": "\K[A-Za-z0-9_-]+' | tr -d '\0')
              if [[ $BASE = "master" ]]; then
                BASE=dev
              fi
              # Create a new Multi-Dev with files and database from site corresponding to PR's base branch.
              echo "Creating new multidev site cloned from $BASE. Please wait."
              terminus multidev:create $CIRCLE_PROJECT_REPONAME.$BASE $PANTHEON_ENV
            fi

            rm -rf ./env_list.txt
            # Set the connection type to GIT
            terminus connection:set $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV git
            # Force push $CIRCLE_BRANCH to Pantheon as branch named $PANTHEON_ENV
            git push -f pantheon $CIRCLE_BRANCH:$PANTHEON_ENV

            echo "Waiting for sync code workflow to finish..."
            until [ $(terminus workflow:list --fields status,env --format string -- $CIRCLE_PROJECT_REPONAME | egrep -i $PANTHEON_ENV -m 1 | egrep -i -o "^\w+") == succeeded ]; do
              sleep 30
            done
            echo "Rebuilding cache..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr
            echo "Running database updates..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- updb -y
            echo "Importing config..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cim -y
            echo "Running cron..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- core:cron -y
            echo "Rebuilding cache..."
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr

            if [[ $CIRCLE_BRANCH =~ ^dependabot\/ ]]; then
              echo "Dependabot branch detected..."

              # Set the connection type to SFTP
              terminus connection:set $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV sftp

              # Clone database from DEV
              # This is necessary if the build gets re-run because the drush cim above can
              # interfere with the drush cex below (by importing what was previously exported)
              terminus env:clone-content $CIRCLE_PROJECT_REPONAME.dev $PANTHEON_ENV --db-only --cc -y
              terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cim -y

              # Abort if there's any database updates that cause a configuration change
              echo "Run database update... and abort if there's a configuration change"
              echo "IMPORTANT: If there's a configuation change, download this branch and manually update the dependency"
              terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- updb -y
              terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cex --no   # this will return failure code if there's config to export
            fi
          fi

visual_regression: &visual_regression
  docker:
    - image: egovpdx/visual-regression:latest
      auth:
        username: egovpdx
        password: $DOCKERHUB_PASSWORD
  # environment:
  #   PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
  parallelism: 4
  working_directory: /home/circleci/app
  steps:
    - checkout

    - restore_cache:
        name: Restore Terminus cache
        keys:
          - terminus_-{{ checksum "composer.lock" }}
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
          cd /tmp && composer require pantheon-systems/terminus:^2.0.0
          fi
    - save_cache:
        name: Save Terminus cache
        key: terminus_-{{ checksum "composer.lock" }}
        paths:
          - "/tmp/vendor"

    - run:
        name: Run Percy tests
        command: |
          export PATH=/var/www/html/tests/vendor/bin:/tmp/vendor/pantheon-systems/terminus/bin:$PATH

          # Log in via terminus first. Required for tests that require user login.
          terminus auth:login --quiet --machine-token="$eGov_Terminus" --email="$eGov_Email" && terminus aliases

          # Prepare environment variables to be used by Percy
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo 'export SITE_NAME="dev"' > $BASH_ENV && source $BASH_ENV
          else
            echo 'export SITE_NAME=${CIRCLE_BRANCH}' > $BASH_ENV && source $BASH_ENV
          fi

          cd /home/circleci/app/tests/percy
          npm install --quiet

          # Start Percy tests
          TESTFILES=$(circleci tests glob "test/snapshots-*.js" | circleci tests split)
          for TESTFILE in $TESTFILES
          do
            # Generate one time login link for tests
            if [[ ${TESTFILE} == *"ally"* ]]; then
              echo 'export ALLY_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --mail ally.admin@portlandoregon.gov)' > $BASH_ENV && source $BASH_ENV
            elif [[ ${TESTFILE} == *"marty"* ]]; then
              echo 'export MARTY_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --mail marty.member@portlandoregon.gov)' > $BASH_ENV && source $BASH_ENV
            elif [[ ${TESTFILE} == *"admin"* ]]; then
              echo 'export SUPERADMIN_LOGIN=$(terminus drush portlandor.${SITE_NAME} -- uli --name superAdmin)' > $BASH_ENV && source $BASH_ENV
            fi
            npm run single-test -- ${TESTFILE}
          done


# Declare all of the jobs we should run.
version: 2.1
jobs:
  deploy:
     <<: *build_and_deploy
  visual_regression:
    <<: *visual_regression

orbs:
  percy: percy/agent@0.1.2

# Declare a workflow that runs all of our jobs in parallel.
workflows:
  version: 2
  deploy_and_test:
    jobs:
      - visual_regression
      - percy/finalize_all:
          requires:
            - visual_regression
