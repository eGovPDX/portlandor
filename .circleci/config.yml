# CircleCI integration with Drupal 8.

#Jobs

## Job to run the update path and Behat tests.
build_and_deploy: &build_and_deploy
  docker:
    # - image: juampynr/drupal8ci:latest
    # updated CI image
    - image: kxwang/drupal-ci:ci-php7.2.28-node12.16.1-yarn1.22.0
  working_directory: /var/www/html
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - source-v1-{{ .Branch }}-{{ .Revision }}
          - source-v1-{{ .Branch }}-
          - source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - restore_cache:
        name: Restore Terminus cache
        keys:
          - terminus_-{{ checksum "composer.lock" }}
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
          cd /tmp && composer require pantheon-systems/terminus:^2.0.0
          fi
    - save_cache:
        name: Save Terminus cache
        key: terminus_-{{ checksum "composer.lock" }}
        paths:
          - "/tmp/vendor"
    - restore_cache:
        name: Restore theme dependencies cache
        keys:
          - cloudy_-{{ checksum "web/themes/custom/cloudy/yarn.lock" }}
    - run:
        name: Install theme dependencies
        command: |
          cd web/themes/custom/cloudy && yarn install --frozen-lockfile
    - save_cache:
        name: Save theme dependencies cache
        key: cloudy_-{{ checksum "web/themes/custom/cloudy/yarn.lock" }}
        paths:
          - "web/themes/custom/cloudy/node_modules"
    - restore_cache:
        name: Restore Composer Cache
        keys:
          - v1-dependencies-{{ checksum "composer.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
    - run:
        name: Composer install
        command: |
          # hotfix - getting error on module but can't update due to lightning dependency, try removing and getting fresh
          rm -rf ./web/modules/contrib/search_api_solr
          # Pantheon don't allow these folders but Composer needs them
          rm -rf ./web/modules/contrib/facets
          # Run composer install with hirak/prestissimo for better performance
          composer config --global --auth github-oauth.github.com "$COMPOSER_TOKEN"
          composer install --no-suggest --no-interaction
          # TODO: should only deploy non-dev packages
          # --no-dev
    - save_cache:
        name: Save Composer Cache
        key: v1-dependencies-{{ checksum "composer.lock" }}
        paths:
          - ./vendor
          - ./web/core
          - ./web/modules/contrib
          - ./web/profiles/contrib
          - ./web/themes/contrib
          - ./web/libraries
    - run:
        name: Build Theme and Pattern Lab
        command: cd web/themes/custom/cloudy && yarn run build:ci
    - run:
        name: Remove Node Modules post build to lighten upload to Pantheon
        command: cd /var/www/html && rm -rf web/themes/custom/cloudy/node_modules
    - run:
        # Unlike npm, security audit is not automatically included in install
        name: Security Audit of Node dependencies
        # Once POWR-2023 is resolved and yarn updated, we can bring this back. However this command is not yet available in yarn 1.6
        # command: cd web/themes/custom/cloudy && yarn audit
        command: cd web/themes/custom/cloudy && yarn audit || echo 'it appears that yarn audit found some security issues in your node dependencies, consider running a yarn upgrade'
    - run:
        name: Deploy to Pantheon
        when: on_success
        no_output_timeout: 15m # allow 15 minutes instead of 10 minute default for script to complete
        command: |
          export PATH=/tmp/vendor/bin:/var/www/html/vendor/bin:$PATH && cd /var/www/html
          # Don't check the repo host key
          export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
          # Don't check for host key for Pantheon sites
          echo -e "host *.drush.in\n    StrictHostKeyChecking no" >> ~/.ssh/config
          # Terminus log in with the user email that will be displayed as the commit user in Pantheon Git repo
          terminus auth:login --machine-token="$eGov_Terminus" --email="$eGov_Email"
          # Git operations
          git remote add pantheon ssh://codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629@codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629.drush.in:2222/~/repository.git
          git config --global user.email "$eGov_Email"
          # Force add all files to include those excluded by .gitignore
          cd /var/www/html && find ./web/modules -name .git -type d -prune -exec rm -rf "{}" \;
          git add -f /var/www/html
          # Pantheon site will use the wrong DB if the local is kept
          git rm --cache  web/sites/default/settings.local.php --ignore-unmatch
          git rm -r --cache web/sites/default/files --ignore-unmatch

          # Set the git commit user name and email address so it's clear in Pantheon log who made the change
          if [[ $CIRCLE_USERNAME = "" ]]; then
            git config --global user.name Dependabot
          else
            git config --global user.name $CIRCLE_USERNAME
          fi
          git config --global user.email $eGov_Email

          export COMMIT_MSG="$(git log -1 --pretty=%B)"
          git commit -m "CircleCI deployment for: " -m "$COMMIT_MSG" --quiet

          # When commit on master, we deploy to DEV
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo "Deploy to Pantheon DEV site"
            # Set Pantheon environment name
            echo "export PANTHEON_ENV=dev" >> $BASH_ENV && source $BASH_ENV
            # Set the connection type to GIT
            terminus connection:set portlandor.dev git
            git push -f pantheon master
            # TODO: Sanitize DB here
            # terminus env:clone-content portlandor.test dev
            # After success deployment to DEV, remove the multidev site if this is a merge of a PR.
            # Read the last Git log in the master branch. Get the branch name at the end of the log.
            # Example: Merge pull request #35 from eGovPDX/powr-152
            cd /var/www/html
            # Must read the last commit message from Github. The last one in local repo is "CircleCI Deployment"
            if [[ $(git log origin/master --pretty=format:%s -1) =~ (^Merge pull request #[0-9]* from eGovPDX\/)([^,]*) ]]; then
              echo "Found a Pull Request Merge for branch: '${BASH_REMATCH[2]}'";
              # Check if a multidev environment with the branch name exists or not
              terminus multidev:list --format=list --field=Name portlandor > ./env_list.txt
              if grep -Fxq "${BASH_REMATCH[2]}" ./env_list.txt; then
                # Delete both the multidev site and branch
                terminus multidev:delete --delete-branch portlandor.${BASH_REMATCH[2]} -y
              fi
            fi
            echo "Waiting for sync code workflow to finish..."
            until [ $(terminus workflow:list --fields status,env --format string -- portlandor | egrep -i $PANTHEON_ENV -m 1 | egrep -i -o "^\w+") == succeeded ]; do
              sleep 30
            done
            echo "Rebuilding cache..."
            terminus drush portlandor.$PANTHEON_ENV -- cr
            echo "Running database updates..."
            terminus drush portlandor.$PANTHEON_ENV -- updb -y
            echo "Importing config..."
            terminus drush portlandor.$PANTHEON_ENV -- cim -y
            echo "Running cron..."
            terminus drush portlandor.$PANTHEON_ENV -- core:cron -y
            echo "Rebuilding cache..."
            terminus drush portlandor.$PANTHEON_ENV -- cr
          else  # All other commits deploy to a multidev
            # Set Pantheon environment name
            if [[ $CIRCLE_BRANCH =~ ^dependabot\/ ]] && [[ $CIRCLE_PULL_REQUEST =~ \/pull\/([0-9]+)$ ]]; then
              echo "export PANTHEON_ENV=bot-${BASH_REMATCH[1]}" >> $BASH_ENV && source $BASH_ENV
            else
              echo "export PANTHEON_ENV=$CIRCLE_BRANCH" >> $BASH_ENV && source $BASH_ENV
            fi
            echo "Pantheon environment name is $PANTHEON_ENV"

            # Check if the multidev branch site exists. If not, create it
            terminus multidev:list --format=list --field=Name portlandor > ./env_list.txt
            if grep -Fxq "$PANTHEON_ENV" ./env_list.txt; then
              echo "Found multidev site"
            else
              # Create a new Multi-Dev with files and database from Dev.
              echo "Creating new multidev site. Please wait." && terminus multidev:create portlandor.dev $PANTHEON_ENV
            fi
            rm -rf ./env_list.txt
            # Set the connection type to GIT
            terminus connection:set portlandor.$PANTHEON_ENV git
            # Force push $CIRCLE_BRANCH to Pantheon as branch named $PANTHEON_ENV
            git push -f pantheon $CIRCLE_BRANCH:$PANTHEON_ENV

            echo "Waiting for sync code workflow to finish..."
            until [ $(terminus workflow:list --fields status,env --format string -- portlandor | egrep -i $PANTHEON_ENV -m 1 | egrep -i -o "^\w+") == succeeded ]; do
              sleep 30
            done
            echo "Rebuilding cache..."
            terminus drush portlandor.$PANTHEON_ENV -- cr
            echo "Running database updates..."
            terminus drush portlandor.$PANTHEON_ENV -- updb -y
            echo "Importing config..."
            terminus drush portlandor.$PANTHEON_ENV -- cim -y
            echo "Running cron..."
            terminus drush portlandor.$PANTHEON_ENV -- core:cron -y
            echo "Rebuilding cache..."
            terminus drush portlandor.$PANTHEON_ENV -- cr

            if [[ $CIRCLE_BRANCH =~ ^dependabot\/ ]]; then
              echo "Dependabot branch detected..."

              # Set the connection type to SFTP
              terminus connection:set portlandor.$PANTHEON_ENV sftp

              # Clone database from DEV
              # This is necessary if the build gets re-run because the drush cim above can
              # interfere with the drush cex below (by importing what was previously exported)
              terminus env:clone-content portlandor.dev $PANTHEON_ENV --db-only --cc -y
              terminus drush portlandor.$PANTHEON_ENV -- cim -y

              # Abort if there's any database updates that cause a configuration change
              echo "Run database update... and abort if there's a configuration change"
              echo "IMPORTANT: If there's a configuation change, download this branch and manually update the dependency"
              terminus drush portlandor.$PANTHEON_ENV -- updb -y
              terminus drush portlandor.$PANTHEON_ENV -- cex --no   # this will return failure code if there's config to export
            fi
          fi

run_tests: &run_tests
  docker:
    # - image: juampynr/drupal8ci:latest
    # updated CI image
    - image: kxwang/drupal-ci:ci-php7.2.28-node12.16.1-yarn1.22.0
    - image: selenium/standalone-chrome-debug:3.7.1-beryllium
  parallelism: 5
  working_directory: /var/www/html
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - source-v1-{{ .Branch }}-{{ .Revision }}
          - source-v1-{{ .Branch }}-
          - source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - restore_cache:
        name: Restore Terminus cache
        keys:
          - terminus_-{{ checksum "composer.lock" }}
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
          cd /tmp && composer require pantheon-systems/terminus:^2.0.0
          fi
    - save_cache:
        name: Save Terminus cache
        key: terminus_-{{ checksum "composer.lock" }}
        paths:
          - "/tmp/vendor"
    - restore_cache:
        name: Restore Behat cache
        key: v1-behat-dependencies-{{ checksum "tests/composer.lock" }}
    - run:
        name: Composer install for Behat dependencies
        command: |
          cd tests
          composer config --global --auth github-oauth.github.com "$COMPOSER_TOKEN"
          composer install --no-suggest --no-interaction
    - run:
        name: Run tests against Pantheon
        when: on_success
        command: |
          export PATH=/var/www/html/tests/vendor/bin:/tmp/vendor/pantheon-systems/terminus/bin:$PATH
          # Log in via terminus first. Required for tests that require user login.
          terminus auth:login --machine-token="$eGov_Terminus" --email="$eGov_Email" && terminus aliases
          mkdir -p tests/test-results/behat/features
          cd tests

          # Set Pantheon environment name
          if [[ $CIRCLE_BRANCH =~ ^dependabot\/ ]] && [[ $CIRCLE_PULL_REQUEST =~ \/pull\/([0-9]+)$ ]]; then
            echo "export PANTHEON_ENV=bot-${BASH_REMATCH[1]}" >> $BASH_ENV && source $BASH_ENV
          else
            echo "export PANTHEON_ENV=$CIRCLE_BRANCH" >> $BASH_ENV && source $BASH_ENV
          fi
          echo "Pantheon environment name is $PANTHEON_ENV"

          # Split feature files by timing data so all split test jobs will finish around the same time
          TESTFILES=$(circleci tests glob "features/*.feature"  | circleci tests split --split-by=timings)
          if [[ $PANTHEON_ENV = "master" ]]; then
            echo 'export BEHAT_PARAMS="{\"extensions\" : {\"Behat\\\MinkExtension\" : {\"base_url\" : \"https://dev-portlandor.pantheonsite.io\"}, \"Drupal\\\DrupalExtension\" : {\"drush\" : { \"alias\": \"portlandor.dev\"}}}}"' >> $BASH_ENV && source $BASH_ENV
            for TESTFILE in $TESTFILES
            do
                behat -c behat.yml -f pretty -o std -f junit -o test-results/behat ${TESTFILE}
                mv test-results/behat/default.xml test-results/behat/${TESTFILE}.xml
            done
          else
            echo 'export BEHAT_PARAMS="{\"extensions\" : {\"Behat\\\MinkExtension\" : {\"base_url\" : \"https://${PANTHEON_ENV}-portlandor.pantheonsite.io\"}, \"Drupal\\\DrupalExtension\" : {\"drush\" : { \"alias\": \"portlandor.${PANTHEON_ENV}\"}}}}"' >> $BASH_ENV && source $BASH_ENV
            for TESTFILE in $TESTFILES
            do
                behat -c behat.yml -f pretty -o std -f junit -o test-results/behat ${TESTFILE}
                mv test-results/behat/default.xml test-results/behat/${TESTFILE}.xml
            done
          fi
    - save_cache:
        paths:
          - ./tests/vendor
        key: v1-behat-dependencies-{{ checksum "tests/composer.lock" }}
    - store_test_results:
        path: /var/www/html/tests/test-results
    - store_artifacts:
        path: /var/www/html/artifacts
        destination: /

# Declare all of the jobs we should run.
version: 2.1
jobs:
  deploy:
     <<: *build_and_deploy
  test:
     <<: *run_tests

# Declare a workflow that runs all of our jobs in parallel.
workflows:
  version: 2
  deploy_and_test:
    jobs:
      - deploy
      - test:
          requires:
            - deploy
