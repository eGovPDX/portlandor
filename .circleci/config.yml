# CircleCI integration with Drupal 8.

# Reusable steps.

## Copies .circle/Robofile to the repository root.
copy_robo: &copy_robo
  run:
    name: Copy RoboFile.php
    command: cp .circleci/RoboFile.php .

## Defines images and working directory.
defaults: &defaults
  docker:
    - image: juampynr/drupal8ci:latest

    - image: selenium/standalone-chrome-debug:3.7.1-beryllium

    - image: mariadb:10.3
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: 1
        MYSQL_DATABASE: drupal8
        MYSQL_USER: drupal8
        MYSQL_PASSWORD: drupal8

  working_directory: /var/www/html

## Defines the cache restoring mechanism.
restore_cache: &restore_cache
  # We use the composer.lock as a way to determine if we can cache our build.
  keys:
  - v1-dependencies-{{ checksum "composer.lock" }}
  # fallback to using the latest cache if no exact match is found
  - v1-dependencies-

## Defines the cache saving mechanism.
save_cache: &save_cache
  paths:
    - ./vendor
  key: v1-dependencies-{{ checksum "composer.lock" }}

#Jobs

## Job to run the update path and Behat tests.
behat_tests: &behat_tests
  <<: *defaults
  steps:
    - checkout
    - *copy_robo
    - restore_cache: *restore_cache
    - run:
        name: Composer Install
        command: |
          # Remove any remaining dependencies 
          rm -rf vendor web/core web/vendor web/modules/contrib web/themes/contrib
          # Install all packages form package.json 
          composer install --no-interaction
    - run:
        name: Terminus Login
        command: |
          composer config --global --auth github-oauth.github.com "$COMPOSER_TOKEN"
          # The newer version of these two packages conflict with Terminus. Downgrade here. 
          composer require nikic/php-parser:3.1.5
          composer require psy/psysh:^0.8
          # Install Terminus 
          composer require "pantheon-systems/terminus:^1.7"
          # Add vendor/bin to path 
          export PATH=/var/www/html/vendor/bin:$PATH
          #terminus auth:login --machine-token="$eGov_Terminus"
          # Verify terminus can be invoked
          terminus --version
          # Create the Terminus plugins folder if it's not there 
          mkdir -p ~/.terminus/plugins
          composer create-project -n -d ~/.terminus/plugins pantheon-systems/terminus-build-tools-plugin:^1
          composer create-project -n -d ~/.terminus/plugins pantheon-systems/terminus-secrets-plugin:^1
          rm -rf /var/www/html/vendor/behat/*
          composer require drupal/drupal-extension:^3.4 guzzlehttp/guzzle:^6.0@dev
    - run:
        name: Run Behat tests
        command: |
          composer config --global --auth github-oauth.github.com "$COMPOSER_TOKEN"
          composer require behat/behat:^3.4 behat/mink:^1.7 behat/mink-extension:v2.2 behat/mink-selenium2-driver:^1.3 bex/behat-screenshot:^1.2 jcalderonzumba/mink-phantomjs-driver:~0.3.1
          composer remove behat/mink-browserkit-driver
          pwd
          mkdir -p web/sites/default/files
          chmod 775 web/sites/default/files
          chown -R :www-data web/sites/default/files
          mkdir -p /root/tmp
          chmod 777 /root/tmp
          ls -l /root
          # import DB
          rm -f dump.sql.gz
          export PATH=/var/www/html/vendor/bin:$PATH
          terminus auth:login --machine-token="$eGov_Terminus" --email="$eGov_Email"
          robo job:run-behat-tests
          # terminus backup:create portlandor.dev --element=db
          # terminus backup:get --to dump.sql.gz portlandor.dev --element=db
          # gunzip -f dump.sql.gz
          # cp -rf .circleci/config/settings.local.php web/sites/default/settings.local.php
          # # unalias cp
          # cd web
          # drush sql-cli < ../dump.sql
          # drush cim -y
          # drush cr -y
          # cd ..
          # behat --verbose -c tests/behat.yml
    - run:
        name: Deploy to Pantheon
        when: on_success
        command: |
          export PATH=/var/www/html/vendor/bin:$PATH
          terminus --version
          # Make sure to log in
          terminus auth:login --machine-token="$eGov_Terminus" --email="$eGov_Email"
          # Set the user email that will commit code into Pantheon repo 
          # git config --global user.email "kevin.wang@portlandoregon.gov"
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo "Deploy to Pantheon dev site"
            export PATH=/var/www/html/vendor/bin:$PATH
            # don't check the repo host key
            export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
            # Don't check for host key for Pantheon sites
            echo -e "host *.drush.in\n    StrictHostKeyChecking no" >> ~/.ssh/config
            # Set the connect to GIT
            terminus connection:set portlandor.dev git
            git remote add pantheon ssh://codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629@codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629.drush.in:2222/~/repository.git
            git config --global user.email "$eGov_Email"
            # Without these lines, push will fail with "please remote git submodules" error
            rm -rf ./vendor/drupal/coder/.git
            rm -rf ./web/modules/contrib/facets/.git
            rm -rf ./web/modules/contrib/search_api_solr/.git
            git add -f /var/www/html
            # Pantheon site will use the wrong DB if the local is kept
            git rm --cache  web/sites/default/settings.local.php --ignore-unmatch
            git rm -r --cache web/sites/default/files --ignore-unmatch
            git commit -m "CircleCI deployment" --quiet
            # git filter-branch -f --index-filter 'git rm -rf --cached --ignore-unmatch sites/default/files' --prune-empty -- afc758c6..HEAD
            git push -f pantheon master
            # Deploy code from local env to the new multidev site
            # terminus env:deploy portlandor.$CIRCLE_BRANCH --sync-content --note="Manual deploy to powr-118"
            # Cloning files and DB from dev environment to powr-118 environment
            # terminus env:clone-content portlandor.dev "$CIRCLE_BRANCH" -y
            # Wake up the multidev site
            terminus env:wake portlandor.dev
            # Check site status
            terminus drush portlandor.dev -- status
            sleep 30s
            # TODO: pull DB from Live
            # Sanitize DB
            # terminus drush portlandor.dev -- sql-sanitize -y
            # Clear cache
            terminus drush portlandor.dev -- cr
            # Import config files
            terminus drush portlandor.dev -- cim -y   
            # After success deployment to DEV, remove the multidev site if this is a merge of a PR
            # Read the last Git log in the master branch. Get the branch name at the end of the log.
            # Example: Merge pull request #35 from eGovPDX/powr-152
            cd /var/www/html
            # Must the last commit message from Github. The last one in local repo is "CircleCI Deployment" 
            if [[ $(git log origin/master --pretty=format:%s -1) =~ (^Merge pull request #[0-9]* from eGovPDX\/)([^,]*) ]]; then 
              echo "Found a Pull Request Merge for branch: '${BASH_REMATCH[2]}'";
              # Check if a multidev environment with the branch name exists or not
              terminus multidev:list --format=list --field=Name portlandor > ./env_list.txt
              if grep -Fxq "${BASH_REMATCH[2]}" ./env_list.txt; then
                # Delete both the multidev site and branch
                terminus multidev:delete --delete-branch portlandor.${BASH_REMATCH[2]} -y
              fi
            fi
          else
            # If the multidev branch site exists, delete it and recreate
            terminus multidev:list --format=list --field=Name portlandor > ./env_list.txt
            if grep -Fxq "$CIRCLE_BRANCH" ./env_list.txt; then
              echo "Found multidev site"
              # terminus multidev:delete --delete-branch portlandor.$CIRCLE_BRANCH -y
              # Cloning files and DB from TEST environment to the multidev environment
              terminus env:clone-content portlandor.test "$CIRCLE_BRANCH" -y 
            else
              terminus multidev:create portlandor.test $CIRCLE_BRANCH
            fi
            # don't check the repo host key
            export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
            # Don't check for host key for Pantheon sites
            echo -e "host *.drush.in\n    StrictHostKeyChecking no" >> ~/.ssh/config
            # Set the connect to GIT
            terminus connection:set portlandor.$CIRCLE_BRANCH git
            git remote add pantheon ssh://codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629@codeserver.dev.5c6715db-abac-4633-ada8-1c9efe354629.drush.in:2222/~/repository.git
            git config --global user.email "$eGov_Email"
            # Without these lines, push will fail with "please remote git submodules" error
            rm -rf ./vendor/drupal/coder/.git
            rm -rf ./web/modules/contrib/facets/.git
            rm -rf ./web/modules/contrib/search_api_solr/.git
            git add -f /var/www/html
            # Pantheon site will use the wrong DB if the local is kept
            git rm --cache  web/sites/default/settings.local.php --ignore-unmatch
            git rm -r --cache web/sites/default/files --ignore-unmatch
            git commit -m "CircleCI deployment" --quiet
            # git filter-branch -f --index-filter 'git rm -rf --cached --ignore-unmatch sites/default/files' --prune-empty -- afc758c6..HEAD
            git push -f pantheon $CIRCLE_BRANCH
            # Deploy code from local env to the new multidev site
            # terminus env:deploy portlandor.$CIRCLE_BRANCH --sync-content --note="Manual deploy to powr-118"
            # Wake up the multidev site
            terminus env:wake portlandor.$CIRCLE_BRANCH
            # Check site status
            terminus drush portlandor.$CIRCLE_BRANCH -- status
            # The following two drush commands will fail without wait for a few seconds
            sleep 30s
            # Sanitize DB
            # if [[ $CIRCLE_BRANCH = "master" ]]; then
            #   echo "Deploying Master to DEV. Do not sanitize DB"
            # else
            #   echo "Sanitize DB"
            #   terminus drush portlandor.$CIRCLE_BRANCH -- sql-sanitize -y
            # fi
            # Clear cache
            terminus drush portlandor.$CIRCLE_BRANCH -- cr
            # Import config files
            terminus drush portlandor.$CIRCLE_BRANCH -- cim -y      
          fi
    - save_cache: *save_cache
    - store_test_results:
        path: /var/www/html/artifacts/behat
    - store_artifacts:
        path: /var/www/html/artifacts

# Declare all of the jobs we should run.
version: 2
jobs:
  run-behat-tests:
     <<: *behat_tests

# Declare a workflow that runs all of our jobs in parallel.
workflows:
  version: 2
  test_and_deploy:
    jobs:
      - run-behat-tests