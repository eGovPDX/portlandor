<?php

use Drupal\pathauto\PathautoState;
use Drupal\group\Entity\Group;
use Drupal\search_api\IndexInterface;
use Drupal\search_api\Query\QueryInterface;
use Solarium\QueryType\Select\Query\Query;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Drupal\group\GroupMembershipLoaderInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupTypeInterface;
use Drupal\group\Entity\GroupRelationshipTypeInterface;
use Drupal\pathauto\Form\PathautoBulkUpdateForm;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\group\Entity\GroupRelationship;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Html;
use Drupal\views\Render\ViewsRenderPipelineMarkup;
use Drupal\Core\Language\LanguageInterface;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
use Drupal\Core\Link;

// This file concerns itself with setting up tokens with hooks
include 'portland.tokens.inc';

/**
 * Get the parent group IDs of an entity.
 * See https://drupal.stackexchange.com/questions/238755/how-to-get-group-ids-by-ids-of-elements-of-group-content
 */
function getGroupIdsByEntity($entity)
{
  if ($entity == null) {
    return [];
  }
  $group_ids = [];

  $group_contents = GroupRelationship::loadByEntity($entity);
  foreach ($group_contents as $group_content) {
    $group_ids[] = $group_content->getGroup()->id();
  }

  return $group_ids;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 * POWR-475 Changing short name of a group can cause the group URL to be
 * different from the URLs in the group menu. Root cause is that the group
 * URL is set by PathAuto to be clean and unique. But the URL in sidebar
 * menu is formed by Twig code using the short name as is. The solution is
 * to update short name to ensure it's clean and unique when the group is
 * updated.
 */
function portland_group_presave(GroupInterface $group)
{
  $newgroup_path = $group->get('field_group_path')->value;
  if ($group->original === null) {
    $originalgroup_path = ''; // new group
  } else {
    $originalgroup_path = $group->original->get('field_group_path')->value;
  }
  // Check if this is a new group or an existing group whose group_path has been modified
  if ($originalgroup_path !== $newgroup_path) {
    $cleangroup_path = $newgroup_path;
    if ($cleangroup_path === '') {
      $cleangroup_path = 'invalid-short-name';
    }
    $alias = "/$cleangroup_path";
    $gid = $group->id();
    $lang = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
    // Update the group path when we have alias conflict
    \Drupal::service("pathauto.alias_uniquifier")->uniquify($alias, "/group/$gid", $lang);
    $group->set('field_group_path', substr($alias, 1)); // Remove the first character "/"
  }
}

/**
 * A helper function to clean up group path.
 * Support "/" as part of group_path. Called by group form validation.
 * @param string $group_group_path Will be modified as a clean string by Path
 * @return boolean Flase if the input is invalid.
 */
function _clean_group_group_path(&$group_group_path)
{
  if (empty($group_group_path)) {
    return false;
  }

  // If the group_path contains "/", we have to clean each part and put it back again.
  if (strpos($group_group_path, '/') !== false) {
    // Split the string and clean each part
    $original_parts = explode("/", $group_group_path);
    $parts = [];
    foreach ($original_parts as $original_part) {
      // Skip empty string
      if ($original_part == "") {
        continue;
      }
      $parts[] = \Drupal::service("pathauto.alias_cleaner")->cleanString($original_part);
    }
    // The string only contains "/"
    if (count($parts) == 0) {
      return false;
    }
    // Put everything back again
    $group_group_path = implode("/", $parts);
  } else {
    $group_group_path = \Drupal::service("pathauto.alias_cleaner")->cleanString($group_group_path);
    if (empty($group_group_path)) {
      return false;
    }
  }
  return true;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 * Add and update group aliases like "/powr/news" when a group is added.
 */
function portland_group_insert(GroupInterface $group)
{
  // Workaround for Drupal bug: https://www.drupal.org/project/inline_entity_form/issues/2966933
  $group->path->pathauto = PathautoState::CREATE;

  // <TODO:>LOW PRIORITY: Generate URL aliases for group action links using group path (ie. /bds/content, /bds/members)</TODO:>
}

/**
 * Implements hook_theme().
 */
function portland_theme($existing, $type, $theme, $path)
{
  return [
    'portland_revision_block' => [
      'variables' => [
        'alert_color' => null,
        'alert_icon' => null,
        'current_revision_state' => null,
        'revision_link' => null,
        'revision_link_text' => null,
        'rabbithole_action' => null,
        'rabbithole_redirect' => null,
      ],
      'template' => 'block--portland-revision-block',
    ],

    'portland_legacy_paths_block' => [
      'variables' => [
        'pog_base_url' => null,
        'legacy_paths' => null,
        'help_text' => null,
      ],
      'template' => 'block--portland-legacy-paths-block',
    ],

    'portland_login_block' => [
      'variables' => [
        'markup' => null
      ]
    ]
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function portland_entity_type_alter(array &$entity_types)
{
  $node = $entity_types['node'];
  $node->addConstraint('EventDateTime', []);
  $node->addConstraint('NewsDateTime', []);
  $node->addConstraint('ResourceUrl', []);
}

/**
 * Implements hook_node_presave().
 */
function portland_node_presave($node)
{
  if ($node->bundle() == 'event') {
    // Clear start and end time for all-day events.
    if ($node->field_all_day->value) {
      $node->set('field_start_time', null);
      $node->set('field_end_time', null);
    }
    // Clear the end date if it's the same as the start date.
    if (
      isset($node->field_end_date->value) &&
      $node->field_end_date->value == $node->field_start_date->value
    ) {
      $node->set('field_end_date', null);
    }
  }
  else if ($node->bundle() == 'external_resource') {
    // If it's a PGOV URL, make it to the current host
    $link_uri = $node->field_destination_url[0]->getValue()['uri'];
    $sitenames_to_remove = ['https://www.portland.gov', 'https://portland.gov'];
    foreach($sitenames_to_remove as $sitename_to_remove) {
      if(str_starts_with($link_uri, $sitename_to_remove) ) {
        $new_link_uri = 'https://' . \Drupal::request()->getHost() . substr($link_uri, strlen($sitename_to_remove));
        $node->field_destination_url[0]->setValue(['uri'=>$new_link_uri]);
      }
    }
  }

  // PGOV-651: Prevent duplicate reviewers
  if (isset($node->field_reviewer)) {
    // SORT_REGULAR flag is needed to compare equality of sub-arrays
    $unique_reviewers = array_unique($node->field_reviewer->getValue(), SORT_REGULAR);
    $node->field_reviewer->setValue($unique_reviewers);
  }

  // If the Save is from a cron job, add a revision log
  $current_path = \Drupal::service('path.current')->getPath();
  // Start cron by loading URL or clicking button
  if (strpos($current_path, '/cron') === 0  || $current_path == '/admin/config/system/cron') {
    $node->revision_log->value = 'Scheduled update';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Idea borrowed from https://julian.pustkuchen.com/node/659
 */
function portland_form_views_exposed_form_alter(&$form, &$form_state)
{
  // Add an own reset button to all views exposed forms. The reason behind is that the default Drupal reset button doesn't play nice with AJAX
  $submit_btn_id = $form['actions']['submit']['#id'];
  if (!empty($submit_btn_id) && !empty($form['actions']['reset'])) {
    // Add own reset button
    $form['actions']['reset']['#attributes'] = array('onclick' => 'javascript:jQuery(this.form).clearForm();jQuery(this.form).find(\'#' . $submit_btn_id . '\').trigger(\'click\');return false;');
  }
}

/**
 * Implements hook_entity_insert().
 */
function portland_entity_insert($entity)
{
  _notify_reviewer($entity, 'created');
}

/**
 * Background: when an entity is revisionable, the files from any past revisions count
 * towards the usage for that file. In our use-case, this behavior is undesirable. We want
 * to purge the files from any old revisions in order to save storage space.
 * Revisions should only be used to view content changes and see the authoring user/time.
 *
 * By purging the usage from files in past revisions, we ensure they get marked as temporary.
 *
 * @see PGOV-880
 */
function _remove_file_usage_from_previous_revision($entity) {
  // Get the language of the content that the editor is modifying
  $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
  $entity_type_id = $entity->getEntityTypeId();
  // We only want to affect revisionable nodes & media
  if (($entity_type_id !== 'node' && $entity_type_id !== 'media')
    || !$entity->getEntityType()->isRevisionable()) return;

  $entity_id = $entity->id();
  $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
  // Retrieve the revision before this one
  $previous_vid = key($entity_storage->getQuery()
      ->accessCheck(TRUE)
      ->allRevisions()
      ->condition($entity_type_id === 'node' ? 'nid' : 'mid', $entity_id)
      ->sort('vid', 'DESC')
      ->range(1, 1)
      ->execute());
  if (empty($previous_vid)) return;

  $previous_revision = $entity_storage->loadRevision($previous_vid);
  if (!$previous_revision->hasTranslation($langcode)) return;

  $previous_revision_translated = $previous_revision->getTranslation($langcode);

  foreach ($previous_revision_translated->getFields() as $field) {
    if ($field instanceof FileFieldItemList) {
      foreach ($field as $item) {
        // Get all FIDs from the current revision
        $latest_revision_file_ids = array_map(fn($file) => $file['target_id'], $entity->get($field->getName())->getValue());
        $file = $item->entity;
        // If the file from the previous revision was deleted in the current revision,
        // delete all file usages for it.
        if ($file && !in_array($file->id(), $latest_revision_file_ids)) {
          \Drupal::service('file.usage')->delete($file, 'file', $entity_type_id, $entity_id, 0);
          \Drupal::logger('portland')->info('File (ID: %id) "%path" usage cleared. Current user ID: %user_id. Request URI: %request_uri', [
            '%id' => $file->id(),
            '%path' => $file->getFileUri(),
            '%user_id' => \Drupal::currentUser()->id(),
            '%request_uri' => \Drupal::request()->getRequestUri(),
          ]);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function portland_entity_update($entity)
{
  _remove_file_usage_from_previous_revision($entity);
  _notify_reviewer($entity, 'updated');
}

/**
 * A helper function to build the deletion log message of an entity.
 * Called by portland_entity_delete().
 */
function _build_log_message($entity)
{
  if (!$entity) {
    return '';
  }

  $parentGroupTitle = '';
  if ($entity->getEntityTypeId() == 'group_content') {
    $parentGroupTitle = 'Parent Group=' . $entity->getGroup()->label() . ',   ';
    $titleText = 'Title=' . $entity->label->value . ','; // Group content didn't implement "label()"
  } else {
    $titleText = 'Title=' . $entity->label() . ',';
  }

  $idText = 'ID=' . $entity->id() . ',';
  $typeText = 'Type=' . $entity->bundle() . ',';
  $createdText = ($entity->created) ? ('Created=' . date('r', $entity->created->value)) : '';

  return "Deleted: $idText    \n$titleText    \n$typeText   \n$createdText    \n$parentGroupTitle";
}

/**
 * Implements hook_entity_delete().
 */
function portland_entity_delete($entity)
{
  // Log entity deletion event
  switch ($entity->getEntityTypeId()) {
    case 'group_content':
      \Drupal::logger('Group content')->notice(_build_log_message($entity));
      break;
    case 'node':
      \Drupal::logger('Content')->notice(_build_log_message($entity));
      break;
    case 'media':
      \Drupal::logger('Media')->notice(_build_log_message($entity));
      break;
    default:
      // Skip other deletion events: redirect, group, etc.
      break;
  }
}

/**
 * If loaded page is one of the specified group views, get the group name and
 * add it to the html title by setting $vars['head_title']['title']. This
 * prevents duplicate page titles within groups for views such as Services,
 * etc. The title format is "[page title] | [group] | [site name]".
 * Called by cloudy_preprocess_html() in cloudy.theme.
 *
 * @param [type] $vars
 * @return void
 */
function portland_set_extended_title_for_group_views(&$vars)
{
  $route_match = \Drupal::routeMatch();
  $new_title = portland_generate_extended_title_for_group_views($vars['page']['#title'], $route_match);
  $vars['head_title']['title'] = $new_title;
}

function portland_generate_extended_title_for_group_views($orig_title, $route_match)
{
  $site_name = \Drupal::config('system.site')->get('name');
  $path = $route_match->getRouteObject()->getPath();
  // If this is a group path, add group name to title
  if ($path != null && (substr_compare($path, "/group", 0, strlen("/group")) === 0)) {
    $group_id = $route_match->getParameter('group') ?? $route_match->getParameter('arg_0'); // sometimes a named group parameter is used in the path, othertimes it's a generic parameter
    // On some group pages (e.g. revisions), the group route param
    // is actually an instance of the group rather than the ID.
    $group_entity = $group_id instanceof Group
                      ? $group_id
                      : Group::load($group_id);
    if (isset($group_entity)) {
      $page_title = $orig_title;
      $group_title = $group_entity->label();
      return "$page_title | $group_title";
    }
  }
  return "$orig_title | $site_name";
}

/**
 * Implements hook_form_alter
 */
function portland_address_field_form_alter(&$form, $form_state, $form_id)
{
  // POWR-699
  // If address field is present, change organization label back to 'Organization'.
  // This field is present in many bundles, so it will be easier to check for its
  // presence than checking the form_id.
  if (isset($form['field_address'])) {
    // when adding a custom #process callback, we need to manually add back the processAddress callback below
    $form['field_address']['widget'][0]['address']['#process'][] = ['Drupal\address\Element\Address', 'processAddress'];
    $form['field_address']['widget'][0]['address']['#process'][] = 'portland_change_address_company_label';
  }
}

function portland_change_address_company_label($element, $form_state, $complete_form)
{
  $element['organization']['#title'] = t('Organization');
  return $element;
}

/**
 * Implements hook_diff_layout_builder_info_alter from Diff module.
 */
function portland_diff_layout_builder_info_alter(array &$diff_layouts)
{
  // Set a new label for the text_field_diff_builder plugin
  // instead of the one provided in the annotation.
  $diff_layouts['visual_inline']['label'] = t('Visual inline (slow)');
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function portland_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context)
{
  // For breadcrumb "policy/category1/category2" or "policy/category1",
  // set the category name to taxonomy term name.
  $links = $breadcrumb->getLinks();
  if (count($links) > 2 && $links[1]->getUrl()->getInternalPath() == 'policies') {
    // Loop must start at index 2. 0 is "home" and 1 is "policies".
    for ($i = 2; $i < count($links); $i++) {
      $params = $links[$i]->getUrl()->getRouteParameters();
      if (!array_key_exists('taxonomy_term', $params)) continue;
      $tid = $links[$i]->getUrl()->getRouteParameters()['taxonomy_term'];
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
      if ($term == null) {
        continue;
      } // skip if we can't load by term ID
      $links[$i]->setText($term->getName());
    }
  }

  $node = $route_match->getParameter('node');
  if(!empty($node) && ($node instanceof Drupal\node\Entity\Node) && $node->bundle() == "park_facility") {
    $breadcrumb->addLink(Link::createFromRoute(t("Find a park"), "view.park_finder.page_1"));
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function portland_inline_entity_form_entity_form_alter(&$entity_form, &$form_state)
{
  if (
    $entity_form['#entity_type'] == 'media' &&
    array_key_exists('field_display_groups', $entity_form) &&
    array_key_exists('widget', $entity_form["field_display_groups"]) &&
    array_key_exists('add_more', $entity_form["field_display_groups"]['widget'])
  ) {
    // Set the Group field to the correct default value. Have to use session because the entity browser is in an iFrame.
    $group_id = \Drupal::request()->getSession()->get('parent_group_id');
    if ($group_id != null) {
      $entity_form["field_display_groups"]['widget'][0]['target_id']['#default_value'] = $group_id;
    }

    if ($entity_form['#bundle'] == 'document') {
      $entity_form['#element_validate'][] = '_validate_document';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function portland_form_alter(&$form, &$form_state, $form_id)
{
  // Only set the default field for new Media items
  $form_array_with_group_field = [
    'node_news_form',
    'node_news_edit_form',
    'node_page_form',
    'node_page_edit_form',
    'node_event_form',
    'node_event_edit_form',
    'node_construction_project_form',
    'node_construction_project_edit_form',
    'node_city_service_form',
    'node_city_service_edit_form',
    'node_service_location_form',
    'node_service_location_edit_form',
    'media_image_add_form',
    'media_video_add_form',
    'media_document_add_form',
    'media_map_add_form'
  ];

  $group_form_prefix = 'group_';

  if (in_array($form_id, $form_array_with_group_field)) {
    // Set the default value as the node's current group
    $node = $form_state->getFormObject()->getEntity();
    $group_id = null;
    // The value is used in portland_inline_entity_form_entity_form_alter()
    // When creating a node, get the group from form state.
    if ($node->isNew()) {
      if (array_key_exists('group', $form_state->getStorage()) && $form_state->getStorage()['group'] != null) {
        $group_id = $form_state->getStorage()['group']->id();
        if (array_key_exists('group_content', $form) && $group_id != null) {
          \Drupal::request()->getSession()->set('parent_group_id', $group_id);
        }
      }
    }
    // POWR-2493 Set the default group in "field_display_groups" in entity browser form
    // When editing a node, get the node's parent group
    else {
      $group_ids = getGroupIdsByEntity($node);
      if (count($group_ids) > 0) {
        // Assume each node only belongs to one group.
        // When there are multiple parent groups, use the first one.
        \Drupal::request()->getSession()->set('parent_group_id', $group_ids[0]);
      }
    }
  } elseif (substr_compare($form_id, $group_form_prefix, 0, strlen($group_form_prefix)) === 0) {
    $form['#validate'][] = '_validate_group_group_path';
  }

  // media_entity_file_replace provides a checkbox that allows document contents to be replaced
  // while retaining the same filename. this is the expected default behavior, and there is no
  // use case for the old versions of files to be retained, especially since there is no way for
  // editors to access them, so the checkbox has been hidden.
  if (isset($form["replace_file"])) {
    $form["replace_file"]['keep_original_filename']["#access"] = false;
  }

  if ($form_id === "media_document_add_form" || $form_id === "media_document_edit_form") {
    $form['#validate'][] = '_validate_document';
  }

  // POWR-3657 - disable HTML 5 validation for all forms
  $form['#attributes']['novalidate'] = '';
  // TOOD: remove this once something similar is included in core, or the Drupal community
  // decides how it wants to handle accessible and usable validation.
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Override the entity browser to show some custom help text when embedding on a translated page.
 */
function portland_form_entity_browser_form_alter(&$form, &$form_state, $form_id) {
  $forms_to_alter = [
    'entity_browser_audio_video_browser_embed_form',
    'entity_browser_document_browser_embed_form',
    'entity_browser_image_browser_embed_form',
    'entity_browser_map_browser_embed_form',
  ];
  if (!in_array($form_id, $forms_to_alter)) return;

  $default_lang = \Drupal::languageManager()->getDefaultLanguage();
  $current_lang = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);
  if ($current_lang !== $default_lang) {
    $form['portland_help_text'] = [
      '#markup' => '<p>'
        . t(
            'Select an item to embed below. If it has been translated into @lang, the translated version will automatically be used after being embedded.',
            [ '@lang' => $current_lang->getName() ],
          )
        . '</p>',
      '#weight' => -99,
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Override the node edit form to show a warning when editing the default translation, if there are translated versions.
 */
function portland_form_node_form_alter(&$form, &$form_state) {
  $node = $form_state->getFormObject()->getEntity();
  // false = exclude default language
  $translation_langs = $node->getTranslationLanguages(false);
  $translation_langs_friendly = join(', ', array_map(fn($lang) => $lang->getName(), $translation_langs));

  $has_other_translations = !empty($translation_langs);
  $t = 't';
  if ($node->isDefaultTranslation() && $has_other_translations) {
    $form['footer']['portland_translation_warning'] = [
      '#markup' => "<div class=\"messages messages--warning\">
        <div class=\"messages__header\">
          <h2 class=\"messages__title\">{$t('Make sure to update translations')}</h2>
        </div>
        <div class=\"messages__content\">
          <p>{$t('This content is translated into the following other languages:')}
          <br>
          <em>{$translation_langs_friendly}</em></p>
          <p>{$t('If you are making substantial edits, you may want to ensure that they are updated as well.')}</p>
        </div>
      ",
      '#weight' => 99,
    ];
  }
}

/**
 * A helper function to validate document.
 */
function _validate_document(&$form, FormStateInterface $form_state)
{
  $is_embedded_document_form_with_efiles = $form_state->hasValue("inline_entity_form") &&
    ($form_state->getValue("inline_entity_form")["field_efiles_link"] != null);
  if ($form_state->hasValue('field_efiles_link') || $is_embedded_document_form_with_efiles) {
    // DO NOT validate when the user clicks on the remove document button.
    // ONLY validate when the entire form is submitted.
    if ($form_state->getTriggeringElement()["#name"] === "field_document_0_remove_button") return;

    // Get values from the inline entity form
    if($is_embedded_document_form_with_efiles) {
      // Can't have both uploaded document and eFiles
      if( $form_state->getValue("inline_entity_form")["field_efiles_link"][0]['uri'] &&
        count($form_state->getValue("inline_entity_form")["field_document"][0]['fids']) !== 0) {
        $form_state->setErrorByName('field_document', t('Cannot have both uploaded document and eFiles link'));
        return;
      }

      $efiles_link = $form_state->getValue("inline_entity_form")["field_efiles_link"];
      $document = $form_state->getValue("inline_entity_form")["field_document"];
    }
    else {
      $efiles_link = $form_state->getValue('field_efiles_link');
      $document = $form_state->getValue('field_document');
    }

    // PGOV-809 Validate document and efiles link fields
    if( empty($efiles_link[0]["uri"]) && empty($document[0]["fids"]) ) {
      $form_state->setErrorByName('field_document', t('Must have either an uploaded document or an eFiles link'));
      return;
    }
    else if ( !empty($efiles_link[0]["uri"]) && !empty($document[0]["fids"]) ) {
      $form_state->setErrorByName('field_document', t('Cannot have both uploaded document and eFiles link'));
      return;
    }

    // If the eFiles link has value
    if (!empty($efiles_link) && !empty($efiles_link[0]['uri'])) {
      $external_file_url = strtolower($efiles_link[0]['uri']);
      $orig_external_file_url = $external_file_url;
      // Validate the file URL is an eFiles link
      $efiles_url_regex = '/^https:\/\/efiles.portlandoregon.gov\/(.*)/i';
      if (!preg_match($efiles_url_regex, $external_file_url)) {
        $form_state->setErrorByName('field_efiles_link', t('The eFiles link must start with https://efiles.portlandoregon.gov/.'));
        return;
      }

      // Append "/file/document" if it's missing on an eFiles link in order to retrieve mime type and file size
      if (
        strpos($external_file_url, 'https://efiles.portlandoregon.gov/') === 0 &&
        !(substr_compare($external_file_url, "/file/document", -strlen("/file/document")) === 0)
      ) {
        $external_file_url .= "/file/document";
      }

      // Get eFiles file size and MIME type
      try {
        $headers = get_headers($external_file_url, 1);
      } catch (Exception $e) {
        $form_state->setErrorByName('field_efiles_link', 'Cannot retrieve file size and mimetype from this link.');
        return;
      }
      if (
        !empty($headers) &&
        (substr_compare($headers[0], "200 OK", -strlen("200 OK")) === 0) &&
        array_key_exists('Content-Type', $headers) &&
        array_key_exists('Content-Length', $headers)
      ) {
        // When the link is invalid, eFiles return a HTML page
        $content_type = isset($headers['Content-Type']) ? $headers['Content-Type'] : 'text/html';
        if ($content_type === 'text/html') {
          $form_state->setErrorByName('field_efiles_link', t('The linked file is not found.'));
          return;
        }
        $file_size = isset($headers['Content-Length']) ? (int)$headers['Content-Length'] : 0;
        if ($file_size === 0) {
          $form_state->setErrorByName('field_efiles_link', t('The linked file is empty.'));
          return;
        }
      } else {
        // Verify it's a valid eFiles folder
        try {
          $headers = get_headers($orig_external_file_url, 1);
        } catch (Exception $e) {
          $form_state->setErrorByName('field_efiles_link', 'Please verify the eFiles link is valid.');
          return;
        }

        // Make sure the response code is 200 and content type is HTML
        if (
          empty($headers) ||
          (substr_compare($headers[0], "200 OK", -strlen("200 OK")) !== 0) ||
          (!array_key_exists('Content-Type', $headers)) ||
          substr($headers['Content-Type'], 0, strlen("text/html")) !== "text/html"
        ) {
          $form_state->setErrorByName('field_efiles_link', t('Please verify the eFiles link is valid.'));
        }
      }
    }
  }
}

/**
 * A helper function to validate group path.
 */
function _validate_group_group_path(&$form, FormStateInterface $form_state)
{
  if ($form_state->hasValue('field_group_path')) {
    $group_group_path = $form_state->getValue('field_group_path')[0]['value'];
    $is_valid_group_path = _clean_group_group_path($group_group_path);
    $form_state->setValue('field_group_path', ['0' => ['value' => $group_group_path,],]);

    if ($is_valid_group_path) {
      $group_id = $form_state->getformObject()->getEntity()->id();
      $pathStorage = \Drupal::entityTypeManager()->getStorage('path_alias');
      $aliases = $pathStorage->loadByProperties(['alias' => '/' . $group_group_path]);
      // If this is a new group, $group_id will be null.
      if ($group_id == null) {
        // Check if the alias already taken by any entity
        if (count($aliases) > 0) {
          $existing_alias = array_values($aliases)[0]->alias->value;
          $form_state->setErrorByName('field_group_path', t('The alias is already taken: <a href="' . $existing_alias . '">' . $existing_alias . '</a>'));
        }
      } else {
        // If this is an existing group, check if the alias is already taken by anything OTHER THAN the current group
        foreach ($aliases as $alias) {
          if ($alias->path->value != "/group/$group_id") {
            $form_state->setErrorByName('field_group_path', t('The alias is already taken: <a href="' . $alias->alias->value . '">' . $alias->alias->value . '</a>'));
            break;
          }
        }
      }
    } else {
      $form_state->setErrorByName('field_group_path', t('Invalid group path'));
    }
  }
}

/**
 * Implement hook_cron()
 * Retrieve a view and send it to powr@portlandoregon.gov
 */
function portland_cron()
{
  // In each cron run after 12pm, check if we've sent the content update summary email today.
  $hour = (int)(date('G')); // 0 to 23
  if ($hour >= 12) {
    // If an email is already sent today, do not send again
    $last_daily_email_sent = \Drupal::state()->get('portland.last_daily_email_sent');
    if (!empty($last_daily_email_sent) && $last_daily_email_sent === date('m/d/Y')) {
      return;
    }

    $results = '';

    // Define a list of views that will be included in the email
    $views[] = ['view_id' => 'locations_updated_recently', 'block_id' => 'block_1'];  // Locations
    $views[] = ['view_id' => 'content_updated_recently', 'block_id' => 'block_2'];  // Tables
    $views[] = ['view_id' => 'media_updated_recently', 'block_id' => 'block_1'];    // Media
    $views[] = ['view_id' => 'groups_updated_recently', 'block_id' => 'block_recently_created_groups'];    // Groups
    $views[] = ['view_id' => 'content_updated_recently', 'block_id' => 'block_3'];    // Body text URLs
    $views[] = ['view_id' => 'user_updated_recently', 'block_id' => 'block_recently_created_users'];
    $views[] = ['view_id' => 'user_updated_recently', 'block_id' => 'block_recently_activated_users'];
    $views[] = ['view_id' => 'user_updated_recently', 'block_id' => 'block_recently_deactivated_users'];

    foreach ($views as $view) {
      // Get the view by machine id
      $theview = Views::getView($view['view_id']);
      // Set the display machine id
      $theview->setDisplay($view['block_id']);
      $theview->preExecute();
      $theview->execute();

      if (count($theview->result)) {
        // Render the view and append to results
        // PGOV-1234 Fix the error in cron "LogicException: Render context is empty"
        $results .= \Drupal::service('renderer')->renderInIsolation($theview->render());
      }
    }

    // If all views are empty, do not send the email
    if (!strlen($results)) {
      \Drupal::state()->set('portland.last_daily_email_sent', date('m/d/Y'));
      \Drupal::logger('mail-log')->notice(t('No content updated in the past day.'));
      return;
    }

    // Send email
    $key = 'portland_daily_mail'; // Replace with Your key
    $to = 'BTS-eGov@portlandoregon.gov';
    $params['message'] = '<p>These Portland.gov items were updated in the last 24 hours and should
            be reviewed according to the specific instructions below.<p/>' . $results;
    // Add environment name to the email subject
    $environment_name = '';
    if (isset($_ENV['PANTHEON_ENVIRONMENT']) && $_ENV['PANTHEON_ENVIRONMENT'] != 'live') {
      $environment_name = ' (' . $_ENV['PANTHEON_ENVIRONMENT'] . ')';
    }
    $params['title'] = 'Portland.gov list of content to review' . $environment_name;
    $langcode = \Drupal::currentUser()->getPreferredLangcode();

    $sent_successfully = _send_email($key, $to, $langcode, $params, 'powr@portlandoregon.gov');
    if ($sent_successfully) {
      \Drupal::logger('mail-log')->notice(t('Daily content update summary email sent successfully.'));
      \Drupal::state()->set('portland.last_daily_email_sent', date('m/d/Y'));
    }
  }
}


/**
 * Helper function to notify reviewers on content updates
 *
 * @param $entity
 *   The entity being created, updated, or deleted
 * @param $entity_event_type
 *   "created", "updated", or "deleted"
 */
function _notify_reviewer($entity, $entity_event_type)
{
  // Only notify on nodes that has Moderation State and has the Reviewer field
  if (
    $entity->getEntityTypeId() != 'node' ||
    !$entity->hasField('moderation_state') ||
    !$entity->hasField('field_reviewer')
  ) {
    return;
  }
  $node = $entity;
  $status_message = $entity_event_type;

  // Group module would save the node twice when creating a new node.
  // We only want to send out email once.
  if ($entity->hasField('field_display_groups') && $node->field_display_groups->count() > 0) {
    $vids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($node);
    if (count($vids) ==  1 && $entity_event_type == 'created') {
      return;
    }
    if (count($vids) ==  2 && $entity_event_type == 'updated') {
      $status_message = 'created';
    }
  }

  $reviewers = null;
  $latest_and_previous_revs = _load_latest_revision($node);
  $latest_rev = $latest_and_previous_revs['latest'];
  $reviewers = $node->field_reviewer;

  $revision_log_output = $node->revision_log->value ?
    "<div><h3>Revision log:</h3>\r\n" . $node->revision_log->value . "</div>\r\n<p/>\r\n<div>" : '';

  /** @var \Drupal\content_moderation\ModerationInformation $moderation_info */
  $moderation_info = \Drupal::service('content_moderation.moderation_information');
  $moderation_state_id = $latest_rev->moderation_state->value;
  $moderation_state_message = $moderation_info->getWorkflowForEntity($latest_rev)->getTypePlugin()->getState($moderation_state_id)->label();

  // send email for any moderation state except draft
  if ($moderation_state_id !== 'draft') {
    $key = 'portland_notify_reviewers';
    $params['title'] = 'Portland.gov reviewer update';
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $params['message'] = "You have been assigned to review <a href=\"/node/" . $node->id() .
      "/revisions/" . $node->vid->value . "/view\"> " . $latest_rev->label() .
      "</a> . You will be notified of all changes to this content.<p/>" .
      "<a href=\"" . $node->revision_uid->entity->toUrl()->toString(). "\">" . $node->revision_uid->entity->label() .
      "</a> " . $status_message . " a new <strong>" . $moderation_state_message .
      "</strong> revision at " .
      \Drupal::service('date.formatter')->format($node->changed->value, 'custom', 'l Y/n/j g:i A') .
      ".<p/>" . $revision_log_output;

    if ($reviewers == null) {
      return;
    }
    $current_user_email = \Drupal::currentUser()->getAccount()->getEmail();
    if (empty($current_user_email)) $current_user_email = \Drupal::config('system.site')->get('mail');

    // Send email to all reviewers EXCEPT the author
    $to_emails = [];
    foreach ($reviewers->referencedEntities() as $reviewer) {
      if ($reviewer->id() != $node->revision_uid->entity->id()) {
        $to_emails[] = $reviewer->mail->value;
      }
    }
    if (!empty($to_emails)) _send_email($key, implode(',', $to_emails), $langcode, $params, $current_user_email);
  }
}

/**
 * Helpder function to send email
 */
function _send_email($key, $to, $langcode, $params, $from)
{
  $result = $mailManager = \Drupal::service('plugin.manager.mail')->mail('portland', $key, $to, $langcode, $params, $from, true);
  if ($result['result'] != true) {
    \Drupal::logger('mail-log')->error(t('Error sending to @email.', array('@email' => $to)));
    return false;
  } else {
    // drupal_set_message($message);
    \Drupal::logger('mail-log')->notice(t('Email sent to @email ', array('@email' => $to)));
    return true;
  }
}
/**
 * Helper function to get the latest revision
 */
function _load_latest_revision($node)
{
  $vids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($node);
  $latest_vid = end($vids);
  $previous_vid = prev($vids);
  return [
    "latest" => \Drupal::entityTypeManager()->getStorage('node')->loadRevision($latest_vid),
    "previous" =>  $previous_vid ? \Drupal::entityTypeManager()->getStorage('node')->loadRevision($previous_vid) : null,
  ];
}

/**
 * Implements hook_mail().
 */
function portland_mail($key, &$message, $params)
{
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'portland_daily_mail':
    case 'portland_notify_reviewers':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['title']), $options);
      $message['body'][] = $params['message'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      break;
    case 'group_admin':
      $user = \Drupal::currentUser()->getAccount();
      $user_name = $user->name;
      $user_email = $user->getEmail();

      if (array_key_exists('group', $params)) {
        $group = $params['group'];
        $group_path = $params['group_path'];

        $body_metadata = "<p><em>Message sent by $user_name via group <a href=\"$group_path\">$group</a></em></p>";
      } else {
        $body_metadata = "<p><em>Message sent by $user_name</em></p>";
      }

      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@subject', array('@subject' => $params['subject']), $options);
      $message['body'][] = $body_metadata . $params['message'];
      $message['headers']['Reply-To'] = "\"$user_name\" <$user_email>";
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    break;
  }
}

/**
 * Implements hook_mail_alter().
 */
function portland_mail_alter(&$message)
{
  // id = module + key
  switch ($message['id']) {
    case "portland_portland_notify_reviewers":
      // Make the email appear to be from the current Editor
      $user = \Drupal::currentUser()->getAccount();
      if ($user->isAuthenticated()) {
        $user_name = $user->name;
        $user_email = $user->getEmail();
      }
      // If the user is Anonymouse when running Cron
      else {
        $config = \Drupal::config('system.site');
        $user_name = $config->get('name');
        $user_email = $config->get('mail');
      }
      $message['headers']['Reply-To'] = "\"$user_name\" <$user_email>";
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Override the user login form to use the SAML login
 */
function portland_form_user_login_form_alter(&$form, &$form_state)
{
  if(
    isset($_ENV['PANTHEON_ENVIRONMENT']) &&
    in_array($_ENV['PANTHEON_ENVIRONMENT'], [
      'cddev', 'pgov-1166', 'sandbox', 'demo', 'dev', 'test', 'live'])
  ) {
    $destination = \Drupal::request()->get('destination');

    // Remove the default Drupal login form elements
    unset($form['name']);
    unset($form['pass']);
    unset($form['actions']);

    $form['saml_login'] = [
      '#type' => 'link',
      '#title' => t('Log in with City of Portland network account'),
      '#url' => Url::fromUri('internal:/saml/login', [
        'query' => ['destination' => $destination ?? '/']
      ]),
      '#attributes' => [
        'class' => ['btn btn-light'],
      ],
    ];

    // Vary cache depending on redirect query param
    $form['#cache']['contexts'][] = 'url.query_args';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function portland_views_pre_render(ViewExecutable $view)
{
  if (
    $view->id() == 'admin_content_with_legacy_path' ||
    ($view->id() == 'manage_group_content_revision' && (strpos($view->current_display, 'redirects') !== false))
  ) {
    // Have to call redirect.repository service to find which row has redirects
    foreach ($view->result as $key => $value) {
      $entity = $value->_entity;
      $nid = $entity->Id();
      $type = $entity->getEntityTypeId();
      if ($nid && $type) {
        $redirects = \Drupal::service('redirect.repository')->findByDestinationUri(["internal:/$type/$nid", "entity:$type/$nid"]);
        if (empty($redirects)) {
          unset($view->result[$key]); // Remove rows without URL redirect
        }
      }
    }
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function portland_toolbar_alter(&$items)
{
  $account = Drupal::currentUser();
  if (!in_array('administrator', $account->getRoles(FALSE))) {
    $items['administration']['tab']['#attributes']['class'][] = 'd-none';
    $items['administration']['tray']['toolbar_administration']['#attributes']['class'][] = 'd-none';
    // Some views like /my-content are displayed in the Claro theme which doesn't have the `d-none` CSS
    // class defined so apply a style directly to the elements instead
    $items['administration']['tab']['#attributes']['style'][] = 'display: none !important;';
    $items['administration']['tray']['toolbar_administration']['#attributes']['style'][] = 'display: none !important;';
  }
}

/**
 * Implements hook_views_query_alter
 */
function portland_views_query_alter($view, $query)
{
  if ($view->id() === 'document_revisions' && $view->current_display === 'page') {
    // The sub-query that will show the unique file count for each Document
    $subquery = \Drupal::database()->select('media_revision__field_document', 'media_revision__field_document');
    $subquery->addField('media_revision__field_document', 'entity_id');
    $subquery->addExpression("COUNT(DISTINCT(media_revision__field_document.field_document_target_id))", 'unique_file_count');
    $subquery->having('unique_file_count > 1');
    $subquery->groupBy("entity_id");

    // Add the INNER JOIN with the view's query
    $definition = [
      'type' => 'INNER',
      'table formula' => $subquery,
      'field' => 'entity_id',
      'left_table' => 'media_field_revision',
      'left_field' => 'mid',
      'adjust' => TRUE,
    ];
    $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
    $query->addRelationship('media_revision_with_file_count', $join, 'media_field_revision');

    // Force sorting on revision ID
    $query->addOrderBy('media_field_revision', 'vid', 'DESC');
  }
}

/**
 * Implements hook_views_post_execute().
 */
function portland_views_post_execute(ViewExecutable $view) {
  // Set custom fill color on council district boundary maps.
  if ($view->id() === 'council_districts' && $view->current_display === 'entity_view_district_map') {
    $fill_color = $view->result[0]?->_entity?->field_color?->getString();
    if ($fill_color && preg_match("/^#[a-f0-9]{6}$/i", $fill_color)) {
      $path_config = json_decode($view->style_plugin->options['path']);
      $path_config->fillColor = $fill_color;
      $view->style_plugin->options['path'] = json_encode($path_config);
    }
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function portland_preprocess_views_view_field(&$variables)
{
  // Only render the Group Memberships fild if we are part of a cron job
  $current_path = \Drupal::service('path.current')->getPath();
  // Start cron by loading URL or clicking button
  if (strpos($current_path, '/cron') === 0  || $current_path == '/admin/config/system/cron') {
    // The Custom Text field has "nothing" as the machine name
    if ($variables['view']->id() == 'user_updated_recently') {
      $field = $variables["field"];
      if ($field->field == 'nothing') {
        // The User EVA to display group memberships is not rendered
        // when sending email notification. Render the view manually here.
        $theview = Views::getView('groups_for_a_user');
        // Set the display machine id
        $theview->setDisplay('entity_view_1');
        $theview->setArguments([$variables["row"]->uid]);
        $theview->preExecute();
        $theview->execute();
        // When group membership is not empty, append the rendered view at the end
        if (count($theview->result)) {
          $variables['output'] = ViewsRenderPipelineMarkup::create(
            (string)$variables["output"] . '<strong>Group membership: </strong>' . \Drupal::service('renderer')
              ->renderPlain($theview->render())
          );
        }
      }
    }
  }
}


/**
 * Implements hook_search_api_solr_config_files_alter().
 *
 * Remember to post schema after any changes to the XML files here.
 */
function portland_search_api_solr_config_files_alter(array &$files, string $lucene_match_version, string $server_id = '') {
  // Append at the end of the file.
  $files['protwords_en.txt'] .= "parking\n";
  $files['protwords_und.txt'] .= "parking\n";

  $files['synonyms_en.txt'] .= "phone,telephone\n";
  $files['synonyms_en.txt'] .= "tv,television\n";
  $files['synonyms_en.txt'] .= "adu,accessory dwelling unit\n";
  $files['synonyms_en.txt'] .= "garbage,rubbish,waste,trash,debris,litter\n";
  $files['synonyms_und.txt'] .= "phone,telephone\n";
  $files['synonyms_und.txt'] .= "tv,television\n";
  $files['synonyms_und.txt'] .= "adu,accessory dwelling unit\n";
  $files['synonyms_und.txt'] .= "garbage,rubbish,waste,trash,debris,litter\n";

  /*
  // Use PHP's DOM API to modify the XML files.
  $schema_xml = &$files['schema.xml'];
  if ($schema_xml_dom = \DomDocument::loadXML($schema_xml)) {
    $fields = $schema_xml_dom->getElementsByTagName('field');
    foreach ($fields as $field) {
      if ($field->hasAttribute('name') && $field->getAttribute('name') === 'hash') {
        $field->setAttribute('stored', 'true');
      }
    }
    $schema_xml = $schema_xml_dom->saveXML();
  }
  */

}

/**
 * Implements hook_webform_third_party_settings_form_alter().
 *
 * Adds our custom third-party settings to webform config form.
 */
function portland_webform_third_party_settings_form_alter(&$form, FormStateInterface $form_state) {
  $webform = $form_state->getFormObject()->getEntity();
  if (!isset($webform)) return;

  $form['third_party_settings']['portland'] = [
    '#type' => 'details',
    '#title' => t('Portland'),
    '#open' => TRUE,
  ];

  $form['third_party_settings']['portland']['disable_demographic_form_prompt'] = [
    '#type' => 'checkbox',
    '#title' => t('Disable demographic form prompt on confirmation page'),
    '#default_value' => $webform->getThirdPartySetting('portland', 'disable_demographic_form_prompt'),
  ];
  $form['third_party_settings']['portland']['exclude_from_json'] = [
    '#type' => 'webform_excluded_elements',
    '#title' => t('Elements included in JSON form data'),
    '#description' => t('Any elements unchecked here will be omitted from the JSON form data field in any Zendesk handlers. All elements are included by default.'),
    '#default_value' => $webform->getThirdPartySetting('portland', 'exclude_from_json'),
    '#webform_id' => $webform->id(),
  ];
}

/**
 * Implement hook_user_format_name_alter
 */
function portland_user_format_name_alter(&$name, $account) {
  $account = User::load($account->id());
  $username = $account->name->value;
  $first_at_pos = strpos($username, '@');
  // Only convert if the user name is an email address
  if($first_at_pos !== false) {
    $first_name = $account->field_first_name->value;
    $last_name =  $account->field_last_name->value;
    // If there is no last name or first name, try to build one out of the email address.
    if( empty($first_name) || empty($last_name)) {
      $name = str_replace('.', ' ', substr($username, 0, $first_at_pos));
    }
    else {
      $name = $account->field_first_name->value . ' ' . $account->field_last_name->value;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function portland_user_presave($user) {
  // Update the user's full name before saving
  $first_name = $user->field_first_name->value;
  $last_name = $user->field_last_name->value;
  if (!empty($first_name) && !empty($last_name)) {
    $user->field_full_name->value = $first_name . ' ' . $last_name;
  }
  else if (!empty($first_name)) {
    $user->field_full_name->value = $first_name;
  }
  else if (!empty($last_name)) {
    $user->field_full_name->value = $last_name;
  }

  // Ensure their admin language preference defaults to English if not set.
  if (empty($user->preferred_admin_langcode->first())) {
    $user->set('preferred_admin_langcode', \Drupal::languageManager()->getDefaultLanguage()->getId());
  }
}

/**
 * Implements hook_user_presave().
 */
function portland_form_user_form_alter(&$form, FormStateInterface $form_state) {
  // Hide the SAML notice message and SAML link to change password
  if( isset($form['account']['saml_notice']) ) {
    unset($form['account']['saml_notice']);
  }
}

/**
 * Implements hook_media_presave().
 */
function portland_media_presave($media)
{
  // Get file size and mime type from eFiles link
  if($media->hasField('field_efiles_link')) {
    if (!empty($media->field_efiles_link) && !empty($media->field_efiles_link[0]->uri)) {
      $efiles_link = $media->field_efiles_link[0]->uri;
      $external_file_url = strtolower($efiles_link);

      // Append "/file/document" if it's missing on an eFiles link in order to retrieve mime type and file size
      if (
        strpos($external_file_url, 'https://efiles.portlandoregon.gov/') === 0 &&
        !(substr_compare($external_file_url, "/file/document", -strlen("/file/document")) === 0)
      ) {
        $external_file_url .= "/file/document";
      }

      // Get eFiles file size and MIME type
      try {
        $headers = get_headers($external_file_url, 1);
      } catch (Exception $e) {
        \Drupal::logger('media')->notice('Cannot retrieve file size and mimetype from eFiles link ' . $external_file_url );
        return;
      }

      if (
        !empty($headers) &&
        (substr_compare($headers[0], "200 OK", -strlen("200 OK")) === 0) &&
        array_key_exists('Content-Type', $headers) &&
        array_key_exists('Content-Length', $headers)
      ) {
        $file_size = isset($headers['Content-Length']) ? (int)$headers['Content-Length'] : 0;
        if ($file_size === 0) {
          \Drupal::logger('media')->notice('The eFiles link file is empty: ' . $external_file_url );
          return;
        }
        // Content-Type header can be "text/html; charset=utf-8"
        $content_type_array = explode(';', $headers['Content-Type']);
        // If content type is text/HTML, it's not a file. Could be a eFiles folder link.
        if (empty($content_type_array) || $content_type_array[0] === "text/html") {
          return;
        }

        $media->field_file_size = $file_size;
        $media->field_mime_type = $content_type_array[0];
      }
      else {
        $media->field_file_size = 0;
        $media->field_mime_type = '';
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add lightning_media browser CSS to the image browser embed form.
 * See web/modules/contrib/lightning_media/modules/lightning_media_image/lightning_media_image.module
 */
function portland_form_entity_browser_image_browser_embed_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'lightning_media/browser.styling';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add lightning_media browser CSS to the image browser embed form.
 * See web/modules/contrib/lightning_media/modules/lightning_media_image/lightning_media_image.module
 */
function portland_form_entity_browser_featured_image_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'lightning_media/browser.styling';
}

/**
 * Implements hook_local_tasks_alter().
 */
function portland_local_tasks_alter(&$local_tasks): void {
  // Removes 'Revisions' local task added by Group and Media.
  // https://www.drupal.org/project/group/issues/3397063
  unset($local_tasks['entity.version_history:group.version_history']);
  unset($local_tasks['entity.version_history:media.version_history']);
}


/**
 * Implements hook_preprocess_fieldset().
 */
function portland_preprocess_fieldset(&$variables): void {
  // Clear the duplicated error message for Updated date/time in News
  if(isset($variables["attributes"]["id"]) && $variables["attributes"]["id"] === "edit-field-updated-on-0") {
    unset($variables["errors"]);
  }
}
