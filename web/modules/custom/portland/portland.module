<?php

use Drupal\group\GroupMembershipLoaderInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupTypeInterface;
use Drupal\group\Entity\GroupContentTypeInterface;
use Drupal\pathauto\Form\PathautoBulkUpdateForm;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\group\Entity\GroupContent;
use Drupal\media\Entity\Media;
use Drupal\image\Entity\ImageStyle;


// The plural is used in the list page URL. E.g. "/bds/guides"
// The group list view's path must match the plural form shown here.
// If the group list view doesn't exist, visiting the alias will get a 404.
const GROUP_CONTENT_TYPE_PLURAL = [
    "service" => ["services"],
    "guide" => ["guides"],
    "building" => ["buildings"],
    "city_service" => ["services"],
    "service_location" => ["locations"],
    "event" => ["events", "events/archive"],
    "image" => ["images"],
    "document" => ["documents"],
    "video" => ["videos"],
    "media" => ["media"],
    "notification" => ["notifications"],
];

const ALERTS_COUNTER_CACHE_KEY = 'portland.active.alerts';

function createAliasForGroupContent($grp, $contentType, $lang) {
    // When a content type is not installed, $pluginType->getPluginDefinition()['entity_bundle'] returns false. Otherwise it's the string like "news".
    if($contentType === false) return;

    $contentTypePluralArray = (isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : [$contentType]);

    foreach( $contentTypePluralArray as $contentTypePlural ) {
        // Clean up shortname as it's from the editor
        $shortname = \Drupal::service("pathauto.alias_cleaner")
                    ->cleanString($grp->get('field_shortname_or_acronym')->value);
        $alias = "/$shortname/$contentTypePlural";
        $gid = $grp->id();
        $system_path = "/group/$gid/$contentTypePlural";

        // If there is already an alias, skip it.
        $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias($system_path, $lang);
        if ($existing_alias && $existing_alias == $alias) {
            return false;
        }

        $path = \Drupal::service('path.alias_storage')->save($system_path, $alias, $lang);
    }
    return true;
}

/**
 * Implements hook_ENTITY_TYPE_create().
 */
// When a content type is installed to a group type, create the alias for all groups with that group type.
function portland_group_content_type_create(GroupContentTypeInterface $groupContentType) {
    // Get all groups of this type. E.g. bureau_office
    $properties = ['type' => $groupContentType->getGroupTypeId()];
    $grps = \Drupal::entityTypeManager()
        ->getStorage('group')
        ->loadByProperties($properties);

    // Get the content type from content_plugin ID. E.g. "group_node:news"
    $contentTypePlugin = $groupContentType->getContentPluginId();

    if(strpos($contentTypePlugin, 'group_node:') === 0) {
        $contentType = substr($contentTypePlugin, strlen('group_node:'));
    } else if( strpos($contentTypePlugin, 'group_media:') === 0) {
        $contentType = substr($contentTypePlugin, strlen('group_media:'));
    } else {
        return;
    }

    // For each group, generate a new URL alias "group.field_shortname_or_acronym/contents"
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    foreach ($grps as $grp) {
        createAliasForGroupContent($grp, $contentType, $lang);
    }
}
/**
 * Implements hook_ENTITY_TYPE_delete().
 */
// When a content type is uninstaled from a group type, delete the alias added during creation time.
function portland_group_content_type_delete(GroupContentTypeInterface $groupContentType) {
    // Get all groups of this type
    $properties = ['type' => $groupContentType->getGroupTypeId()];
    $grps = \Drupal::entityTypeManager()
        ->getStorage('group')
        ->loadByProperties($properties);
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    // content_plugin:"group_node:news"
    $contentTypePlugin = $groupContentType->getContentPluginId();
    if(strpos($contentTypePlugin, 'group_node:') === 0) {
        $contentType = substr($contentTypePlugin, strlen('group_node:'));
    } else if( strpos($contentTypePlugin, 'group_media:') === 0) {
        $contentType = substr($contentTypePlugin, strlen('group_media:'));
    } else {
        return;
    }

    // For each group, delete the URL alias "/group.field_shortname_or_acronym/contents". E.g. "/bds/news"
    $contentTypePluralArray = isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : [$contentType];

    foreach( $contentTypePluralArray as $contentTypePlural ) {
        foreach ($grps as $grp) {
            $gid = $grp->id();
            $system_path = "/group/$gid/$contentTypePlural";

            // If found an alias, delete it.
            $existing_alias = \Drupal::service('path.alias_storage')
                ->lookupPathAlias($system_path, $lang);
            if($existing_alias) {
                $path = \Drupal::service('path.alias_storage')
                    ->delete(['alias' => $existing_alias, 'langcode' => $lang]);
            }
        }
    }
}


/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function portland_group_insert(GroupInterface $group) {
    // Find all installed content types on this group type and generate alias if it's missing.
    $installedContentTypes = $group->getGroupType()->getInstalledContentPlugins();
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    foreach ($installedContentTypes as $pluginType) {
        $contentType = $pluginType->getPluginDefinition()['entity_bundle'];
        createAliasForGroupContent($group, $contentType, $lang);
    }

    // Workaround for Drupal bug: https://www.drupal.org/project/inline_entity_form/issues/2966933
    $group->path->pathauto = Drupal\pathauto\PathautoState::CREATE;

    // <TODO:>LOW PRIORITY: Generate URL aliases for group action links using group shortname (ie. /bds/content, /bds/members)</TODO:>
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function portland_group_update(GroupInterface $group) {

    // get group shortname
    $shortname = \Drupal::service("pathauto.alias_cleaner")->cleanString($group->get('field_shortname_or_acronym')->value);
    $orig_shortname = \Drupal::service("pathauto.alias_cleaner")->cleanString($group->original->get('field_shortname_or_acronym')->value);

    // only update URL aliases if shortname changes
    if ($shortname != $orig_shortname) {

        // 4.2. Bulk regenerate URL aliases for content by running pathauto batch processing
        $batch = array(
            'title' => t('Bulk updating URL aliases'),
            'operations' => array(
            array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchStart', array()),
            ),
            'finished' => 'Drupal\pathauto\Form\PathautoBulkUpdateForm::batchFinished',
        );
        $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:node", "update"]);
        $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:group", "update"]);
        $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:group_content", "update"]);
        $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:media", "update"]);
        batch_set($batch);

        $gid = $group->id();
        $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();

        // TODO: manually regenerate URL alias for main group page; pathauto bulk update isn't getting it sometimes
        $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias("/group/$gid", $lang);
        $alias = "/$shortname";
        // if it exists and doesn't match current alias, delete and re-save
        if ($existing_alias && $existing_alias != $alias) {
            \Drupal::service('path.alias_storage')->delete(['alias' => $existing_alias, 'langcode' => $lang]);
            $path = \Drupal::service('path.alias_storage')->save("/group/$gid", $alias, $lang);
        }

        // POWR-142: Regenerate URL aliases for content type subpages using group shortname (ie. /bds/services)
        // reference: https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Path%21AliasStorage.php/class/AliasStorage/8.6.x
        // Find all installed content types on this group type and generate alias if it's missing.
        $installedContentTypes = $group->getGroupType()->getInstalledContentPlugins();
        foreach ($installedContentTypes as $pluginType) {
            $contentType = $pluginType->getPluginDefinition()['entity_bundle'];
            // Skip if the content type is not installed with the group type.
            if($contentType === false) return;
            $contentTypePluralArray = isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : [$contentType];

            foreach( $contentTypePluralArray as $contentTypePlural ) {
                $system_path = "/group/$gid/$contentTypePlural";
                $alias = "/$shortname/$contentTypePlural";

                $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias($system_path, $lang);

                // if it already exists and matches, do nothing
                if ($existing_alias && $existing_alias == $alias) continue;

                // if it exists and doesn't match current alias, delete in preparation for re-save
                if ($existing_alias && $existing_alias != $alias) {
                    \Drupal::service('path.alias_storage')->delete(['alias' => $existing_alias, 'langcode' => $lang]);
                }

                // save new or updated alias
                $path = \Drupal::service('path.alias_storage')->save($system_path, $alias, $lang);
            }
        }
    }

    // <TODO:>LOW PRIORITY: rEGenerate URL aliases for group action links using group shortname (ie. /bds/content, /bds/members)</TODO:>
}

function portland_theme($existing, $type, $theme, $path) {
  return [
    'portland_alert' => [
      'variables' => [
        'dismissible' => FALSE,
        'type' => NULL,
        'title' => NULL,
        'text' => NULL,
        'link_url' => NULL,
        'link_text' => NULL,
        'changed' => NULL,
        'nid' => NULL,
        'changed_timestamp' => NULL,
      ],
    ],
  ];
}

/*
 * Implements hook_entity_type_alter().
 */
function portland_entity_type_alter(array &$entity_types) {
    $node = $entity_types['node'];
    $node->addConstraint('EventDateTime', []);
}

/*
 * Implements hook_node_presave().
 */
function portland_node_presave($node) {
    if($node->bundle() == 'event') {
        // Clear start and end time for all-day events.
        if($node->field_all_day->value) {
            $node->set('field_start_time', NULL);
            $node->set('field_end_time', NULL);
        }
        // Clear the end date if it's the same as the start date.
        if(isset($node->field_end_date->value) &&
            $node->field_end_date->value == $node->field_start_date->value) {
            $node->set('field_end_date', NULL);
        }
    }
}

/**
 * Implements hook_token_info().
 */
function portland_token_info() {
    $tokens = [];

    $tokens['group'] = [
      'name' => t('Group'),
      'description' => t('The parent group.'),
      'type' => 'group',
    ];

    if (\Drupal::moduleHandler()->moduleExists('token')) {
      $tokens['groups'] = [
        'name' => t('Groups'),
        'description' => t("An array of all the node parent groups."),
        'type' => 'array',
      ];
    }

    return array(
      'tokens' => array('media' => $tokens),
    );
}

/**
 * Implements hook_tokens().
 */
function portland_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
    if ($type != 'media' || empty($data['media'])) {
      return [];
    }

    $token_service = \Drupal::token();
    $replacements = [];

    $group_content_array = GroupContent::loadByEntity($data['media']);
    if (empty($group_content_array)) {
      return [];
    }

    $groups = [];
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    foreach ($group_content_array as $group_content) {
      $group = $group_content->getGroup();
      $groups[$group->id()] = $group->label();
      $bubbleable_metadata->addCacheableDependency($group);
    };

    if (isset($tokens['groups'])) {
      $replacements[$tokens['groups']] = token_render_array($groups, $options);
    }

    // [media:groups:*] chained tokens.
    if ($parents_tokens = \Drupal::token()->findWithPrefix($tokens, 'groups')) {
      $replacements += \Drupal::token()->generate('array', $parents_tokens, array('array' => $groups), $options, $bubbleable_metadata);
    }

    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group_content = array_pop($group_content_array);
    $group = $group_content->getGroup();
    if (isset($tokens['group'])) {
      $replacements[$tokens['group']] = $group->label();
    }

    if ($group_tokens = $token_service->findWithPrefix($tokens, 'group')) {
      $replacements += $token_service->generate('group', $group_tokens, array('group' => $group), $options, $bubbleable_metadata);
    }

    return $replacements;
}

/**
 * Implements hook_form_alter().
 */
//Idea borrowed from https://julian.pustkuchen.com/node/659
function portland_form_views_exposed_form_alter(&$form, &$form_state) {
    // ------------------------------------------------------------
    // Add an own reset button to all views exposed forms. The reason behind is,
    // that the default Drupal reset button doesn't play nice with AJAX
    $submit_btn_id = $form['actions']['submit']['#id'];
    if (!empty($submit_btn_id) && !empty($form['actions']['reset'])) {
      // Add own reset button
      $form['actions']['reset']['#attributes'] = array('onclick' => 'javascript:jQuery(this.form).clearForm();jQuery(this.form).find(\'#' . $submit_btn_id . '\').trigger(\'click\');return false;');
    }
  }

/*
 * Implements hook_preprocess_HOOK().
 */
function portland_preprocess_menu(&$vars)
{
    // find main menu and modify the Alerts link text to display number of alerts,
    // or remove the Alerts item if count is zero.
    if (array_key_exists('menu_name', $vars) && $vars['menu_name'] == 'main') {
        foreach ($vars['items'] as $key => &$item) {
            if ($item['title'] == 'Alerts') {
                $alertCount = _portland_get_active_alerts_count();
                if ($alertCount < 1) {
                    unset($vars['items'][$key]);
                    return;
                }
                $item['title'] = Drupal\Core\Render\Markup::create('Alerts <span class="badge badge-light">' . $alertCount . '<span>');
                break;
            }
        }
    }
}

/**
 * Implements hook_entity_insert().
 */
function portland_entity_insert($entity)
{
    if ($entity->bundle() == 'alert') {
        // alert has been inserted, update alerts count in cache
        _portland_get_active_alerts_count(true);
    }
}

/**
 * Implements hook_entity_update().
 */
function portland_entity_update($entity)
{
    if ($entity->bundle() == 'alert') {
        // if moderation state has changed, update alerts count in cache
        $origstate = $entity->original->get('moderation_state')->getString();
        $newstate = $entity->get('moderation_state')->getString();
        if ($origstate != $newstate) {
            _portland_get_active_alerts_count(true);
        }
    }
}

/**
 * Implements hook_entity_delete().
 */
function portland_entity_delete($entity)
{
    if ($entity->bundle() == 'alert') {
        // alert has been deleted, update alerts count in cache
        _portland_get_active_alerts_count(true);
    }
}

/*
 * Retrieves the number of active alerts. Uses caching.
 */
function _portland_get_active_alerts_count($reset = false)
{
    $alertCount = 0;
    if (!$reset && $cache = \Drupal::cache()->get(ALERTS_COUNTER_CACHE_KEY)) {
        $alertCount = $cache->data;
    } else {
        // invalidate main menu block in cache to show current alerts
        \Drupal\Core\Cache\Cache::invalidateTags(['config:block.block.cloudy_main_menu']);
        $query = \Drupal::entityQuery('node')
            ->condition('type', 'alert')
            ->condition('status', 1);
        $nids = $query->execute();
        $alertCount = count($nids);
        \Drupal::cache()->set(ALERTS_COUNTER_CACHE_KEY, $alertCount);
    }
    return $alertCount;
}

/**
 * Implements template_preprocess_paragraph
 */
function portland_preprocess_paragraph(&$vars) {
    switch( $vars['paragraph']->bundle()) {
        case 'image':
            $image = $vars['paragraph'];
            if( $image->hasField("field_image_alignment") && 
                $image->field_image_alignment->value !== NULL) {
                    // If there is not an existing class array, create an empty array.
                    if (!isset($vars['attributes']['class'])) {
                        $vars['attributes']['class'] = [];
                    }
                    $vars['attributes']['class'] = array_merge(
                        $vars['attributes']['class'], 
                        ['float-'.$image->field_image_alignment->value, 'image-align']
                    );
            }
            break;
        case 'document':
            // If there is not an existing class array, create an empty array.
            if (!isset($vars['attributes']['class'])) {
                $vars['attributes']['class'] = [];
            };

            // Map mimetype to font awesome icon names. Sources:
            // https://api.drupal.org/api/drupal/includes%21file.mimetypes.inc/function/file_default_mimetype_mapping/7.x
            // https://fontawesome.com/icons?d=gallery
            $mimetypeToFontawesomeIcon = [
                'text/plain' => 'file',
                'application/pdf' => 'file-pdf',
                'application/msword' => 'file-word', // *.doc
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => 'file-word', // *.docx
                'application/vnd.ms-excel' => 'file-excel', // *.xls
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => 'file-excel', // *.xlsx
                'application/vnd.ms-powerpoint' => 'file-powerpoint', // *.ppt
                'application/vnd.openxmlformats-officedocument.presentationml.presentation' => 'file-powerpoint',
            ];
            $document = $vars['paragraph'];
            // Paragraph -> Media -> File
            $vars['fileSize'] = format_size(
                $document->field_document->entity->field_document->entity->getSize());
            $vars['fileUrl'] = $document->field_document->entity->field_document->entity->url();
            $mimeType = $document->field_document->entity->field_document->entity->getMimeType();
            // Set fontawesome icon based on mime type. Use "file" as the default in case no matching mime type is found.
            $vars['fontawesomeIcon'] = array_key_exists( $mimeType, $mimetypeToFontawesomeIcon ) ? 
                $mimetypeToFontawesomeIcon[$mimeType] : 'file';
            break;
        case 'video':
        case 'audio':
            // NOTE: audio files also use a YouTube video player and re-uses field_video_alignment
            $video = $vars['paragraph'];
            if( $video->hasField("field_video_alignment") && 
                $video->field_video_alignment->value !== NULL) {
                    // If there is not an existing class array, create an empty array.
                    if (!isset($vars['attributes']['class'])) {
                        $vars['attributes']['class'] = [];
                    }
                    $vars['attributes']['class'] = array_merge(
                        $vars['attributes']['class'], 
                        ['float-'.$video->field_video_alignment->value, 'video-align']
                    );
            }
            break;
        case 'quote':
            $quote = $vars['paragraph'];
            if( $quote->hasField("field_alignment") && 
                $quote->field_alignment->value !== NULL) {
                    // If there is not an existing class array, create an empty array.
                    if (!isset($vars['attributes']['class'])) {
                        $vars['attributes']['class'] = [];
                    }
                    $vars['attributes']['class'] = array_merge(
                        $vars['attributes']['class'], 
                        ['float-'.$quote->field_alignment->value, 'quote-align']
                    );
            }
            break;

        case 'media_gallery':
            $gallery = $vars['paragraph'];
            //$media_entity = $gallery->get('field_gallery_media')->referencedEntities()[0];

            // $id = $vars['content']['field_gallery_media'][0]['#item']->getValue()['target_id'];
            // $entity = Media::load($id);
            $media_entitites = $gallery->get('field_gallery_media')->referencedEntities();

            foreach ($media_entitites as $entity) {
                $mid = $entity->get('mid')[0]->value;
                $media = Media::load($mid);

                $alt = $media->image[0]->get('alt')->getValue();
                $target_id = $media->image[0]->get('target_id')->getValue();
                $thumbnail_uri = ImageStyle::load('medium')->buildUrl($media->image->entity->getFileUri());
                $fullsize_uri = ImageStyle::load('responsive_extra')->buildUrl($media->image->entity->getFileUri());

                $vars['gallery_data'][] = array(
                    "thumbnail_uri" => $thumbnail_uri,
                    "fullsize_uri" => $fullsize_uri,
                    "alt" => $alt,
                    "target_id" => $target_id
                );
            }
            break;
    }
}