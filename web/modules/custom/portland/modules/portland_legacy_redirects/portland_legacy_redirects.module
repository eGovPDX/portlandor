<?php

use Drupal\redirect\Entity\Redirect;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function portland_legacy_redirects_entity_base_field_info($entity_type) {
  $entity_id = $entity_type->id();
  if ($entity_id === 'node' || $entity_id === 'group' || $entity_id === 'media') {
    $fields = [];

    // add a field that allows the page's redirects (labeled as Legacy Paths) to be modified
    // outside the redirects UI.
    // TODO: this adds the field to EVERY node, even ones we don't want the Legacy Path for.
    //       it's not harmful except that it adds extra processing. it basically runs through
    //       the validation routines but does nothing if not valid on a form where the field
    //       is disabled/hidden. the only way I can think of to prevent this is to create and 
    //       maintain a list of content types that it applies to; or maybe there's a way to 
    //       determine whether the field is enabled in form view?
    $fields['field_redirects'] = BaseFieldDefinition::create('string')
      ->setName('field_redirects')
      ->setLabel(t('Legacy path'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\portland_legacy_redirects\Field\RedirectList')
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textfield',
        'weight' => 50,
      ])
      ->setDescription(t('This field is used to create redirects to this page from legacy pages in the old site. Multiple paths may be entered in case several pages have been combined during migration. Once these paths are created, they may only be modified or removed by an administrator. Paths must be relative and start with a slash. For example, the page "https://www.portlandoregon.gov/bts/39479" should be entered as "/bts/39479."'))
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->addConstraint('relative_path', []);;

    return $fields;
  }
}
