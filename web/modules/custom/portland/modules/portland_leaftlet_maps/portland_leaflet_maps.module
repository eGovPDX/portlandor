<?php
/*
 * @file
 * "Portland Leaflet Maps" adds PortlandMaps layers to the Leaflet module.
 *
 * All maps support zoom levels 0..18, except where stated otherwise.
 */

use Drupal\Component\Utility\Unicode;

const LEAFLET_MORE_MAPS_NO_CUSTOM_MAPS = 3;

/**
 * Implements hook_leaflet_map_info().
 *
 * @return array of map info (includes provider URL, attribution, map features)
 */
function portland_leaflet_maps_leaflet_map_info() {

  $default_settings = array(
    'attributionControl' => TRUE,
    'closePopupOnClick'  => TRUE,
    'doubleClickZoom'    => TRUE,
    'dragging'           => TRUE,
    'fadeAnimation'      => TRUE,
    'layerControl'       => FALSE,
    'maxZoom'            => 18,
    'minZoom'            => 0,
    'scrollWheelZoom'    => TRUE,
    'touchZoom'          => TRUE,
    'trackResize'        => TRUE,
    // Don't specify zoom, if you want to use Auto-box.
    // 'zoom'               =>  2,
    'zoomAnimation'      => TRUE,
    'zoomControl'        => TRUE,
  );
  $map_info = array();
  _portland_leaflet_maps_assemble_default_map_info($map_info, $default_settings);

  return $map_info;
}

/**
 * Preprocess function for leaflet_more_maps.
 */
function portland_leaflet_maps_preprocess_leaflet_map(&$variables) {
  $variables['#attached']['library'][] = 'portland_leaflet_maps/portland_leaflet_maps';
}

/**
 * Preprocess function for leaflet_more_maps.
 */
function portland_leaflet_maps_preprocess_media__map(&$variables) {
  if( strpos($_SERVER['HTTP_USER_AGENT'], 'Trident') || strpos($_SERVER['HTTP_USER_AGENT'], 'Edge') )
    $variables['isEdgeOrIE'] = 'true';
  else
    $variables['isEdgeOrIE'] = 'false';

  if($variables['media']->field_map_type->value == 'geo') {
    unset($variables["content"]["field_map_embed"]);
  }
  else {
    unset($variables["content"]["field_geo_file"]);
  }
}

/**
 * Implements hook_leaflet_map_info_alter().
 */
function portland_leaflet_maps_leaflet_map_info_alter(&$map_info) {
  @ksort($map_info, SORT_NATURAL | SORT_FLAG_CASE);
}

/**
 * Assemble default map info.
 */
function _portland_leaflet_maps_assemble_default_map_info(&$map_info, $default_settings = array()) {
  // Use headless protocol rather than logic based on global $is_https;
  $prot = '//';

  // As used by most.
  $zxy = '{z}/{x}/{y}.png';
  // As used by Esri.
  $zyx = '{z}/{y}/{x}.png';
  // Used by PortlandMaps
  $zyx_only = '{z}/{y}/{x}';

  // portlandmaps https://portlandmaps.com
  $attr_portlandmaps = 'Tiles by <a href="http://portlandmaps.com">portlandmaps.com</a>. ';

  $map_info['portlandmaps_color'] = array(
    'label' => 'PortlandMaps.com Basemap_Color_Complete (zoom 0..22)',
    'description' => t('portlandmaps.com Basemap_Color_Complete Maps'),
    'settings' =>  $default_settings + array('maxZoom' => 22),
    'layers' => array(
      'layer' => array(
        'urlTemplate' => $prot . "www.portlandmaps.com/arcgis/rest/services/Public/Basemap_Color_Complete/MapServer/tile/$zyx_only",
      ),
    ),
  );

  $map_info['portlandmaps_park'] = array(
    'label' => 'PortlandMaps.com Park_Amenities (zoom 0..22)',
    'description' => t('portlandmaps.com Park_Amenities Maps'),
    'settings' =>  $default_settings + array('maxZoom' => 22),
    // The order is important. From bottom to top: color basemap, building outlines, park amenities (only available at a few zoom levels)
    'layers' => array(
      'layer #1' => array(
        'urlTemplate' => $prot . "www.portlandmaps.com/arcgis/rest/services/Public/Basemap_Color_Complete/MapServer/tile/$zyx_only",
      ),
      'layer #2' => array(
        'urlTemplate' => $prot . "www.portlandmaps.com/arcgis/rest/services/Public/Basemap_Color_Buildings/MapServer/tile/$zyx_only",
      ),
      'layer #3' => array(
        'urlTemplate' => $prot . "www.portlandmaps.com/arcgis/rest/services/Public/Park_Amenities/MapServer/tile/$zyx_only",
      ),
    ),
  );

}

function portland_leaflet_maps_entity_view_alter(array &$build,
                            \Drupal\Core\Entity\EntityInterface $entity,
                            \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  // Do not use portlandmaps_id when viewing Park Finder
$current_path = \Drupal::service('path.current')->getPath();
if( strpos($current_path, '/parks/search') === 0) return;

  if( $entity->hasField('field_portlandmaps_layer') && $entity->hasField('field_portlandmaps_id')) {
    $build['#attached']['drupalSettings']['portlandmaps_layer'] = $entity->field_portlandmaps_layer->value;
    $build['#attached']['drupalSettings']['portlandmaps_id'] = $entity->field_portlandmaps_id->value;
  }
}

// Alter the Solr query to add filter query for bounding box if it's in the query string
function portland_leaflet_maps_search_api_solr_query_alter(\Solarium\Core\Query\QueryInterface $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
  // If the bounding box (bbox) is in the query string
  if (isset($_GET['bbox'])) {
    // Get the left, top, right and bottom from the url.
    list($bottom, $left, $top, $right) = explode(',', $_GET['bbox']);
    // Add it to the query.
    $solarium_query->addParam('fq', "locs_field_geolocation:[$bottom,$left TO $top,$right]");
  }
}

// https://www.drupal.org/project/facets/issues/2826650#comment-11985765
/**
 * Implements hook_search_api_query_alter.
 *
 * @param \Drupal\search_api\Query\QueryInterface $query
 */
function portland_leaflet_maps_search_api_query_alter(\Drupal\search_api\Query\QueryInterface &$query) {
  if ($query->getIndex()->getServerInstance()->supportsFeature('search_api_facets')) {
    /** @var \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager */
    $facet_manager = \Drupal::service('facets.manager');

    $search_id = $query->getSearchId();

    // If we find an attachment view query, we use the same query alter as the page because they belong together
    if(strpos($search_id, 'views_attachment:park_finder__attachment_1') === 0) {
      $search_id = 'search_api:views_page__park_finder__page_1';

      // Add the active filters.
      $facet_manager->alterQuery($query, $search_id);
    }
  }
}