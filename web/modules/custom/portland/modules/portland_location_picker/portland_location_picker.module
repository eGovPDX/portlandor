<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter 
 */
function portland_location_picker_form_alter(&$form, &$form_state, $form_id) {
  // if elements array exists, this may be a webform. flatten the elements array and look for
  // the location picker field. if it exists, attach the library.
  $library_attached = false;
  if (!$library_attached && array_key_exists("elements", $form)) {
    $flattened = Drupal\webform\Utility\WebformElementHelper::getFlattened($form['elements']);
    foreach ($flattened as $key => $value) {
      if ($flattened[$key]['#type'] == "portland_location_picker") {
        $form['#attached']['library'][] = 'portland_location_picker/portland_location_picker';
        $form['#attached']['drupalSettings']['portlandmaps_api_key'] = \Drupal::service('key.repository')->getKey('portlandmaps_api')->getKeyValue();
        $library_attached = true;
        break;
      }
    }
  }
}

/**
 * Implements hook_webform_element_alter().
 *
 * @param array              $element
 * @param FormStateInterface $form_state
 * @param array              $context
 */
function portland_location_picker_webform_element_alter(array &$element, FormStateInterface $form_state, array $context) {
  if (array_key_exists('#id', $element) && $element['#id'] == "location_map") {
    $element['#element_validate'][] = [
        'Drupal\portland_location_picker\Validate\GeolocationValidationConstraint',
        'validate'
    ];
  }  
  
  // // check for the location picker element; if present, apply our custom validation that checks for map coordinates
  // if (isset($element['#webform_id']) && $element['#webform_id'] === $element['#webform'] . '--' . 'report_location') {
  //     $element['#element_validate'][] = [
  //         'Drupal\portland_location_picker\Validate\GeolocationValidationConstraint',
  //         'validate'
  //     ];
  // }
}

