<?php

use \Drupal\group\Entity\GroupRelationship;
use \Drupal\group\Entity\Group;
use \Drupal\group\Entity\GroupInterface;

/**
 * Implements hook_form_alter().
 */
function portland_groups_form_alter(&$form, &$form_state, $form_id)
{
  if (array_key_exists('field_display_groups', $form) === TRUE && !is_null($form['field_display_groups'])) {
    _portland_groups_populate_field_display_groups($form, $form_state);
  }
  // Select the group add/edit form.
  if ($form['#theme'] !== 'confirm_form' && isset($form_id) && isset($form) && preg_match('/^group/', $form_id)) {
    // Use the node edit form template.
    $form['#theme'][0] = 'node_edit_form';

    // Use the node form layout library.
    $form['#attached']['library'] = ['node/drupal.node'];

    // Create the advanced element if it doesn't exist.
    if (!isset($form['advanced'])) {
      $form['advanced'] = [
        '#type' => 'container',
        '#accordion' => TRUE,
        '#weight' => 99,
      ];
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function portland_groups_form_media_form_alter(&$form, $form_state, $form_id)
{
  // Remove redundant "The list of groups media item belongs to" from groupmedia module
  // that shows right below Displayed in field on media
  unset($form['group_information']);
}

/**
 * The TID of the "Generic" group subtype taxonomy term.
 */
const GROUP_SUBTYPE_GENERIC_TID = 979;
/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Restrict the Generic group subtype to those with permissions to use it.
 */
function portland_groups_form_group_form_alter(&$form, $form_state, $form_id)
{
  $group = $form_state->getFormObject()->getEntity();
  $user = \Drupal::currentUser();
  if (array_key_exists('field_group_subtype', $form) && !$user->hasPermission('use generic group subtype')) {
    if ($group->get('field_group_subtype')->target_id === (string) GROUP_SUBTYPE_GENERIC_TID) {
      // if group is already Generic, disable the field completely so they can't switch it back
      $form['field_group_subtype']['#disabled'] = true;
    } else {
      // else just hide the option
      unset($form['field_group_subtype']['widget']['#options'][GROUP_SUBTYPE_GENERIC_TID]);
    }
  }
}

/**
 * Implements hook_preprocess_group().
 *
 * Hide the group subtype field from display if it's Generic.
 */
function portland_groups_preprocess_group(&$variables) {
  $content = &$variables['content'];
  if (!array_key_exists('field_group_subtype', $content)) return;

  $group = $variables['group'];
  if ($group->get('field_group_subtype')->target_id === (string) GROUP_SUBTYPE_GENERIC_TID) {
    $content['field_group_subtype']['#access'] = FALSE;
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function portland_groups_inline_entity_form_entity_form_alter(&$entity_form, &$form_state)
{
  if ($entity_form['#entity_type'] == 'media' && array_key_exists('field_display_groups', $entity_form)) {
    _portland_groups_inline_entity_populate_field_display_groups($entity_form, $form_state);
  }
}

/**
 * Populates the field_display_groups autocomplete widget in a node form.
 */
function _portland_groups_populate_field_display_groups(&$form, &$form_state)
{
  // get the group id and store it in session in case it's needed in an inline entity
  // form in a CKEditor iframe. if new page, prepopulate field_display_groups with parent group.
  if (array_key_exists('group', $form_state->getStorage()) && $form_state->getStorage()['group'] != NULL) {
    $group = $form_state->getStorage()['group'];
    $group_id = $group->id();
    \Drupal::request()->getSession()->set('parent_group_id', $group_id);

    $node = $form_state->getFormObject()->getEntity();
    if ($node->isNew()) {
      $form['field_display_groups']['widget'][0]['target_id']['#default_value'] = $group;
    }
  }
}

/**
 * Populates the field_display_groups select/chosen widget in a media form.
 */
function _portland_groups_inline_entity_populate_field_display_groups(&$form, &$form_state)
{
  // if new entity, prepopulate with parent group, which is stored in a session var.
  if ($form['#entity']->isNew()) {
    $session = \Drupal::request()->getSession();
    $group_id = $session->get('parent_group_id');
    if (!is_null($group_id)) {
      $form['field_display_groups']['widget'][0]['target_id']['#default_value'] = Group::load($group_id);
    }
  }
}


/**
 * Implements hook_entity_update
 *
 * Runs whenever an entity is updated.
 * If the entity has field_display_groups, call a function to synchronize group ownership based on the
 * first group in the field.
 */
function portland_groups_entity_update($entity)
{
  if ($entity && method_exists($entity, 'hasField') && $entity->hasField('field_display_groups')) {
    _portland_groups_synchronize_entity_group_ownership($entity);
  }
}


/**
 * Implements hook_ENTITY_TYPE_update().
 * Add and update content and media aliases when a group is updated.
 */
function portland_groups_group_update(GroupInterface $group)
{
  // get group path
  $group_path = $group->get('field_group_path')->value;
  $orig_group_path = $group->original->get('field_group_path')->value;

  // only update URL aliases if group_path changes
  if ($group_path != $orig_group_path) {
    $group_entities = $group->getRelatedEntities();
    $non_user_entities = [];
    foreach ($group_entities as $group_entity) {
      if ($group_entity->bundle() === "user") continue; // Skip users
      $non_user_entities[] = $group_entity;
    }

    // Batch process 50 items for each iteration
    $limit = 50;
    $batch_job = array(
      'title' => t("Bulk updating URL aliases for content and media in {$group->label->value}"),
      'init_message' => t('Starting the URL alias updating process'),
      'operations' => [
        ['Drupal\portland_groups\UpdateAliasInBatch::updateGroupContentAlias', [
          $non_user_entities,
          $limit,
        ]],
      ],
      'finished' => 'Drupal\portland_groups\UpdateAliasInBatch::updateAliasFinishedCallback',
    );
    batch_set($batch_job);
  }
}

/**
 * Implements hook_entity_insert
 *
 * We only want this to run on insert when we're not in a group context.
 * When we are in group context, the group module will take care of creating
 * the group content entity.
 */
function portland_groups_entity_insert($entity)
{
  if ($entity && method_exists($entity, 'hasField') && $entity->hasField('field_display_groups') && \Drupal::routeMatch()->getParameter('group') == null) {
    _portland_groups_synchronize_entity_group_ownership($entity);
  }
}

function _portland_groups_synchronize_entity_group_ownership($entity) {
  // skip duing group migration
  if( \Drupal::state()->get('portland.skip_group_sync') == 1) return;

  // start building entity type id; we only support node and media entity types
  // if other, return immediately and avoid unnecessary processing.
  $entity_type = $entity->getEntityTypeId();
  if ($entity_type == "node") {
    $plugin_id = "group_node:" . $entity->bundle();
  } else if ($entity_type == "media") {
    $plugin_id = "group_media:" . $entity->bundle();
  } else {
    return;
  }

  $orig_entity = $entity->original;
  $eid = $entity->id();

  if (!$orig_entity) {
    // this is a newly created entity; assign it to a group
    $field_value = $entity->get('field_display_groups')->getValue();
    if (count($field_value) > 0) {
      $group_id = $field_value[0]['target_id'];
      _portland_groups_add_entity_to_group($entity, $group_id, $plugin_id);
    }
    return;
  } else {
    // this is an existing entity; if the group has changed, remove it from the old group
    // and assign to the new group.
    $field_value = $entity->get('field_display_groups')->getValue();
    if (count($field_value) > 0) {
      $new_owner_group = $field_value[0]['target_id'];
    } else {
      // all groups have been removed from field_display_groups.
      // don't do anything; this is most likely a mistake. if not, administrators
      // can fix it.
      return;
    }

    // there may not be an original owner group to remove, if the entity was originally created outside of group context.
    $field_value = $orig_entity->get('field_display_groups')->getValue();
    $orig_owner_group = null;
    if (count($field_value) > 0) {
      $orig_owner_group = $field_value[0]['target_id'];
    }

    if ($orig_owner_group != $new_owner_group) {
      if ($orig_owner_group) {
        // remove from old group
        $old_group = Group::load($orig_owner_group);
        if ($old_group) {
          $current_node = $old_group->getRelationshipsByEntity($entity, $plugin_id);
          if (count($current_node) > 0) {
            $content = array_values($current_node)[0];
            $content->delete();
          }
        }
      }
      // assign to new group
      _portland_groups_add_entity_to_group($entity, $new_owner_group, $plugin_id);
    } else {
      $new_group = Group::load($new_owner_group);
      if ($new_group) {
        // When the Display In field has a group but there is no group content node,
        // add a group content node
        $current_node = $new_group->getRelationshipsByEntity($entity, $plugin_id);
        if (count($current_node) == 0) {
          _portland_groups_add_entity_to_group($entity, $new_owner_group, $plugin_id);
        } else if (count($current_node) > 1) {
          // POWR-2800 One entity added to the same group many times, delete all group content but the first one
          for ($i = 1; $i < count($current_node); $i++) {
            array_values($current_node)[$i]->delete();
          }
        }

        // POWR-2800 One entity added to many different groups, delete all but the first Displayed In group
        $group_content_nodes = GroupRelationship::loadByEntity($entity);
        if (count($group_content_nodes) > 1) {
          foreach ($group_content_nodes as $group_content_node) {
            if ($group_content_node->getGroup()->id() != $new_owner_group) {
              $group_content_node->delete();
            }
          }
        }
      }
    }
  }
}

function _portland_groups_add_entity_to_group($entity, $group_id, $plugin_id)
{
  // make sure entity isn't already in group; the entity may already be assigned to
  // the group by virtue of having been created in that context.
  $group = Group::load($group_id);

  // use this code if we ever need to check if a node is in a group before adding it.
  $current_node = $group->getRelationshipsByEntity($entity, $plugin_id);
  if (!$current_node || count($current_node) < 1) {
    $group->addRelationship($entity, $plugin_id);
  }
}
