<?php

use Drupal\group\Entity\GroupContent;
use \Drupal\group\Entity\Group;

/**
 * Implements hook_form_alter().
 */
function portland_groups_form_alter(&$form, &$form_state, $form_id) {
  if (array_key_exists('field_display_groups', $form) === TRUE && !is_null($form['field_display_groups'])) {
    _portland_groups_populate_field_display_groups($form, $form_state);
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function portland_groups_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'media' && array_key_exists('field_display_groups', $entity_form)) {
    _portland_groups_inline_entity_populate_field_display_groups($entity_form, $form_state);
  }
}

/**
 * Populates the field_display_groups autocomplete widget in a node form.
 */
function _portland_groups_populate_field_display_groups(&$form, &$form_state) {
  // get the group id and store it in session in case it's needed in an inline entity
  // form in a CKEditor iframe. if new page, prepopulate field_display_groups with parent group.
  if(array_key_exists('group', $form_state->getStorage()) && $form_state->getStorage()['group'] != NULL) {
    $group = $form_state->getStorage()['group'];
    $group_id = $group->id();
    \Drupal::request()->getSession()->set('parent_group_id', $group_id);

    $node = $form_state->getFormObject()->getEntity();
    if($node->isNew()) {
      $form['field_display_groups']['widget'][0]['target_id']['#default_value'] = $group;
    }
  }
}

/**
 * Populates the field_display_groups select/chosen widget in a media form.
 */
function _portland_groups_inline_entity_populate_field_display_groups(&$form, &$form_state) {
  // if new erntity, prepopulate with parent group, which is stored in a session var.
  if($form['#entity']->isNew()) {
    $session = \Drupal::request()->getSession();
    $group_id = $session->get('parent_group_id');
    if (!is_null($group_id)) {
      $form['field_display_groups']['widget'][0]['target_id']['#default_value'] = \Drupal\group\Entity\Group::load($group_id);
    }
  }
}

/**
 * Implements hook_media_insert
 */
function portland_groups_media_insert($entity) {
  _portland_groups_assign_media_to_group($entity);
}

/**
 * Manually assigns a media entity to a group as group content.
 * The group is identified by the first delta in the media's field_display_groups.
 * This should only happen in the context of an inline entity form.
 */
function _portland_groups_assign_media_to_group($entity) {

  // only do this for inline entity brower
  $current_path = \Drupal::service('path.current')->getPath();
  if (substr($current_path, 0, 23) != "/entity-browser/iframe/") {
    return;
  }

  // get group identified in first delta in field_display_groups
  // and assign entity to group.
  $group_id = $entity->get('field_display_groups')->getValue()[0]['target_id'];
  if (!is_null($group_id)) {
    $group = \Drupal\group\Entity\Group::load($group_id);
    $plugin_id = "group_media:" . $entity->bundle();
    $group->addContent($entity, $plugin_id);
  }
}

// NOTE: at this time we're not filtering Display in Groups autocomplete optiopns
// based on group membership, but we might want to in the near future. This function
// creates an array of options that's suitable for passing to a select list.
// /**
//  * Generates an array of groups to which the user has rights to edit content.
//  * This array is suitable for passing to a select list. If administrator,
//  * return TRUE, which indicates that all groups are allowed.
//  */
// function _portland_groups_load_user_groups() {
//   $user_roles = \Drupal::currentUser()->getRoles();
//   if( !in_array("administrator", $user_roles) ) {
//     $group_memberships = \Drupal::service('group.membership_loader')->loadByUser();
//     $options = [];
//     foreach( $group_memberships as $group_membership ) {
//       $group = $group_membership->getGroup();
//       $options[$group->id->value] = $group->label->value;
//     }
//     return $options;
//   } else {
//     return TRUE;
//   }
// }
