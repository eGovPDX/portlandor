<?php

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implement hook_ENTITY_TYPE_presave()
 */
function portland_openid_connect_user_presave($user) {
  // If this is an existing user and the status is updated
  if( $user->original !== null && $user->status->value !== $user->original->status->value) {
    $now = new DrupalDateTime('now', 'UTC');
    $user->set('field_status_updated_on', $now->format('Y-m-d\TH:i:s'));
  }
}

/**
 * Implement hook_ENTITY_TYPE_insert()
 */
function portland_openid_connect_user_insert($user) {
  // Set default admin language for new users to English
  $user = $user->set('preferred_admin_langcode', 'en');
}

/**
 * Implement hook_cron()
 *
 * When Cron got into a locked state, you will see the log "Attempting to re-run cron while it is already running.".
 * Run this command:
 *    drush sqlq "DELETE FROM semaphore WHERE name = 'cron';"
 * Get state values: 
 *    drush state:get pgov.user_sync.stop
 *    drush state:get pgov.user_sync.day_of_week
 *    drush state:get pgov.user_sync.sync_now
 *    drush state:get pgov.user_sync.batch_size
 *    drush state:get pgov.user_sync.last_sync_date.portlandoregon.gov
 *    drush state:get pgov.user_sync.resume_url.portlandoregon.gov
 * To start sync from a fresh state:
 *    drush portland:get_group_content
 */
function portland_openid_connect_cron()
{
  $domain = "portlandoregon.gov";

  // To stop user sync: drush state:set pgov.user_sync.stop true
  // To restart user sync: drush state:delete pgov.user_sync.stop
  $stop_user_sync = \Drupal::state()->get('pgov.user_sync.stop');
  if (!empty($stop_user_sync) && strtolower($stop_user_sync) === "true") {
    \Drupal::logger('portland OpenID')->notice("pgov.user_sync.stop set to TRUE. Skip user sync.");
    return;
  }

  // Check if we need to sync now
  $sync_now = (strtolower(\Drupal::state()->get('pgov.user_sync.sync_now')) === "true");

  // Get the day of the week to sync. Default is Saturday.
  if( !$sync_now ) {
    $sync_day = \Drupal::state()->get('pgov.user_sync.day_of_week') ?? "Saturday";
    if(date("l") != $sync_day) return;
  }

  // Get the last sync date. Default to 10/01/2024.
  $last_user_sync_date = \Drupal::state()->get("pgov.user_sync.last_sync_date.$domain");
  $last_user_sync_date = empty($last_user_sync_date) ? (new DateTime("2024-10-01")) : new DateTime($last_user_sync_date);

  // Do nothing if the last sync was done within the interval
  $now = new DateTime();
  if($now->diff($last_user_sync_date)->days < 7) return;

  // Call Microsoft Graph API to retrieve user info
  $tokens = _get_access_token();
  if (empty($tokens['access_token'])) {
    \Drupal::logger('portland OpenID')->error("Cannot retrieve access token for Microsoft Graph. Make sure the client secret is correct.");
    return;
  }

  _get_all_users($tokens['access_token']);

  if(empty(\Drupal::state()->get("pgov.user_sync.resume_url.$domain"))) {
    \Drupal::state()->delete("pgov.user_sync.sync_now");
  }
}

/**
 * Use the access token to get user info
 */
function _get_all_users($access_token)
{
  $system_state = \Drupal::state();

  /* @var \GuzzleHttp\ClientInterface $client */
  $client = new Client();
  // Perform the request.
  $options = [
    'method' => 'GET',
    'headers' => [
      'Content-Type' => 'application/json',
      'Authorization' => 'Bearer ' . $access_token,
      'ConsistencyLevel' => 'eventual',
    ],
  ];

  try {
    // Run this command to restart the sync process next time
    // lando drush state:del pgov.user_sync.resume_url.portlandoregon.gov
    $domain = "portlandoregon.gov";
    if ($resume_url = $system_state->get("pgov.user_sync.resume_url.$domain")) {
      \Drupal::logger('portland OpenID')->notice("Resuming user sync for $domain");
    } else {
      \Drupal::logger('portland OpenID')->notice("Starting user sync for $domain");
    }

    // Get the user sync batch size. Default is 50 users
    $batch_size = \Drupal::state()->get('pgov.user_sync.batch_size') ?? "100";

    // If there is a resume link, use it. Otherwise start fresh
    // The hardcoded initial URL is intentional. It's only used for the first request.
    $request_url = empty($resume_url) ? "https://graph.microsoft.com/v1.0/users?\$top=$batch_size&\$filter=endswith(mail,'@$domain')&\$orderby=userPrincipalName&\$count=true&\$select=id,accountEnabled,userPrincipalName,displayName,givenName,surname,mail" : $resume_url;
    // Queue up 10 items in each call
    $request_limit = 10;
    $request_count = 0;
    $response_data = null;
    while (strlen($request_url) > 0 && $request_count < $request_limit) {
      $response = $client->get($request_url, $options);
      $response_data = json_decode((string) $response->getBody(), TRUE);
      
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('user_sync');
      $queue->createItem([
        "access_token" => $access_token,
        "domain" => $domain,
        "users" => $response_data['value']
      ]);

      if( isset($response_data['@odata.nextLink']) ) {
        $request_url = $response_data['@odata.nextLink'] ?? '';
        $request_count++;
      }
      else {
        break;
      }
    }

    // When there is @odata.nextLink, prepare for the next run
    if( isset($response_data['@odata.nextLink']) ) {
      $system_state->set("pgov.user_sync.resume_url.$domain", $response_data['@odata.nextLink']);
      \Drupal::logger('portland OpenID')->info("@odata.nextLink updated for domain $domain.");
    }
    // When there is no @odata.nextLink, there is no more user to sync
    else {
      \Drupal::state()->set("pgov.user_sync.last_sync_date.$domain", (new DateTime())->format('Y-m-d'));
      $system_state->set("pgov.user_sync.resume_url.$domain", '');
      \Drupal::logger('portland OpenID')->info("All users have been sychronized in domain $domain.");
    }
  } catch (RequestException $e) {
    $variables = [
      '@message' => 'Could not retrieve user information',
      '@error_message' => $e->getMessage(),
    ];
    \Drupal::logger('portland OpenID')->error('@message. Details: @error_message', $variables);
    return false;
  }
}

/**
 * Call Microsoft Azure AD OAuth API to retrieve the access token.
 * Need a fresh token for each CRON job run.
 */
function _get_access_token()
{
  $windows_aad_config = \Drupal::config('openid_connect.client.windows_aad');
  $client_id = $windows_aad_config->get('settings.client_id');
  $tenant_id = '636d7808-73c9-41a7-97aa-8c4733642141';

  $request_options = [
    'form_params' => [
      // 'code' => $authorization_code,
      'client_id' => $client_id,
      'client_secret' => $windows_aad_config->get('settings.client_secret'),
      'grant_type' => 'client_credentials',
      'scope' => 'https://graph.microsoft.com/.default',
    ],
  ];

  /* @var \GuzzleHttp\ClientInterface $client */
  $client = new Client();

  try {
    $response = $client->post("https://login.microsoftonline.com/$tenant_id/oauth2/v2.0/token", $request_options);
    $response_data = json_decode((string) $response->getBody(), TRUE);

    // Expected result.
    $tokens = [
      // 'id_token' => $response_data['id_token'],
      'access_token' => $response_data['access_token'],
    ];
    if (array_key_exists('expires_in', $response_data)) {
      $tokens['expire'] = \Drupal::time()->getRequestTime() + $response_data['expires_in'];
    }
    return $tokens;
  } catch (RequestException $e) {
    $variables = [
      '@message' => 'Could not retrieve access token',
      '@error_message' => $e->getMessage(),
    ];
    \Drupal::logger('portland OpenID')->error('@message. Details: @error_message', $variables);
    return FALSE;
  }
}
