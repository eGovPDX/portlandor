<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_alter().
 */
function portland_media_embed_helper_form_entity_embed_dialog_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  // for embedded documents, images and videos using the entity_embed align and caption filters,
  // remove the filter fields from the embed form if the media item is a document.
  $hide_fields = false;
  if ( $form_state->getValue("entity_browser") ) {
    $entities = $form_state->getValue("entity_browser")["entities"];
    if (isset($entities)) {
      // there should only be 1 element in the entities array, but just in case there
      // are more, don't hide the fields if one of them isn't a document.
      foreach($form_state->getValue("entity_browser")["entities"] as $entity) {
        if ($entity->bundle() == "document") {
          $hide_fields = true;
          break;
        }
      }
    }
  } else {
    $input = $form_state->getUserInput();
    if (isset($input) && isset($input['editor_object']['data-embed-button'])) {
      $type = $input['editor_object']['data-embed-button'];
      if ($type == "document_browser") {
        $hide_fields = true;
      }
    }
  }

  // When inserting a newly selected item, check if it's iframe and display aspect ratio radio buttons.
  // check $form_state->getUserInput()["entity_browser"]["entity_ids"]. Format is media:ID
  // When editing a previously inserted item, get the saved aspect ratio from $form_state->getUserInput()['editor_object']
  // Hide the Caption and Align fields if it's an iframe
  $user_input = $form_state->getUserInput();
  $is_iframe = false;
  $has_editor_object = isset($user_input['editor_object']);
  if( $has_editor_object && isset($user_input['editor_object']['data-entity-uuid']) ) {
    $is_iframe = $user_input['editor_object']['data-embed-button'] == 'insert_iframe';
    if(!$hide_fields) $hide_fields = $is_iframe;
  }
  else if(isset($user_input["entity_browser"]) && isset($user_input["entity_browser"]["entity_ids"])) {
    $media_id = substr($user_input["entity_browser"]["entity_ids"], 6); // Format is media:ID
    $media = \Drupal::entityTypeManager()->getStorage('media')->load($media_id);
    $is_iframe = (empty($media)) ? false : ($media->bundle() == 'iframe_embed');
    if(!$hide_fields) $hide_fields = $is_iframe;
  }
  else if ( isset($user_input["attributes"]["data-aspect-ratio"]) ) {
    $is_iframe = true;
    if(!$hide_fields) $hide_fields = $is_iframe;
  }

  // Only show the aspect ratio radio buttons for iframe
  if($is_iframe) {
    // Default aspect ratio is 16/9.
    // When editing an item, get value from "data-aspect-ratio" attribute
    $default_aspect_ratio = '16/9';
    if($has_editor_object && isset($user_input['editor_object']['data-aspect-ratio'])) {
      $default_aspect_ratio = $user_input['editor_object']['data-aspect-ratio'];
    }
    $form['attributes']['data-aspect-ratio'] = [
      '#title' => t('Aspect ratio'),
      '#type' => 'radios',
      '#options' => [
        '16/9' => t('16x9'),
        '4/3' => t('4x3'),
        '1/1' => t('1x1'),
        '9/16' => t('9x16'),
      ],
      '#step' => '1',
      '#default_value' => $default_aspect_ratio,
      '#parents' => ['attributes', 'data-aspect-ratio'],
      // Make radio buttons inline
      '#attributes' => ['class' => ['container-inline']],
    ];
  }

  if ($hide_fields) {
    if (isset($form['attributes']['data-caption'])) unset($form['attributes']['data-caption']);
    if (isset($form['attributes']['data-align'])) unset($form['attributes']['data-align']);
  }

  // Hide additional fields (e.g. alt text) from entity_embed module
  $form['attributes']['data-entity-embed-display-settings']['#access'] = FALSE;
  // Move view mode selection to bottom
  $form['attributes']['data-entity-embed-display']['#weight'] = 99;

  // configure align options and add icons
  if (isset($form['attributes']['data-align'])) {
    $img_100 =            "<img src=\"/themes/custom/cloudy/images/icons/img-100.png\" alt=\"100% width\" />";
    $img_narrow =         "<img src=\"/themes/custom/cloudy/images/icons/img-narrow.png\" alt=\"Narrow\" />";
    $img_50_right_fill =  "<img src=\"/themes/custom/cloudy/images/icons/img-50-fill.png\" alt=\"50% fill\" />";
    $img_50_right_fit =   "<img src=\"/themes/custom/cloudy/images/icons/img-50-fit.png\" alt=\"50% fit\" />";
    $embed_type = $form['attributes']['data-embed-button']['#value'];

    // clear default alignment options
    unset($form['attributes']['data-align']['#options']['left']);
    unset($form['attributes']['data-align']['#options']['right']);
    unset($form['attributes']['data-align']['#options']['center']);
    unset($form['attributes']['data-align']['#options']['']);

    $form['attributes']['data-align']['#title'] = "Alignment";
    $form['attributes']['data-align']['#default_value'] = "responsive-full";

    // full width applies to images and videos
    $form['attributes']['data-align']['#options']['responsive-full'] = "Full width<br>$img_100";

    // narrow, right fill and fit don't apply to videos
    if ($embed_type == "audio_video_browser" || $embed_type == "map_browser" || $embed_type == "chart_browser") {
      $form['attributes']['data-align']['#options']['responsive-right'] = "50% right<br>$img_50_right_fill";
    } else {
      $form['attributes']['data-align']['#options']['narrow'] = "Narrow<br>$img_narrow";
      $form['attributes']['data-align']['#options']['responsive-right'] = "50% fill<br>$img_50_right_fill";
      $form['attributes']['data-align']['#options']['right'] = "50% fit<br>$img_50_right_fit";
    }
  }

  // if this is the video browser, and the caption field is set, then insert the start time field
  if (isset($form['attributes']['data-caption']) && isset($embed_type) && $embed_type == "audio_video_browser") {
    $form['attributes']['data-start-cue']['#type'] = "textfield";
    $form['attributes']['data-start-cue']['#title'] = "Video start cue time (optional)";
    $form['attributes']['data-start-cue']['#placeholder'] = "0";
    $form['attributes']['data-start-cue']['#description'] = "Provide the start time in seconds";
  }

  // if this is the embed dialog, add translation link
  if (array_key_exists('data-embed-button', $form['attributes'])) {
    $entity = $form_state->get('entity');
    $entity_translations = $entity->getTranslationLanguages(FALSE);
    $entity_translation_names = array_map(fn($lang) => $lang->getName(), $entity_translations);
    $user_can_translate = \Drupal::currentUser()->hasPermission('translate editable entities');
    $form['attributes']['data-translate-media'] = [
      '#type' => 'item',
      '#title' => t('Translate this media item'),
      '#markup' => $user_can_translate
        ? '<a target="_blank" href="/media/' . $entity->id(). '/translations">Translate</a>'
        : 'You do not have the translator role.',
      '#description' => (count($entity_translations) > 0
        ? 'Already translated in: ' .  join(', ', $entity_translation_names)
        : 'This media currently has no translations.'),
    ];

    // additionally if document, add alt link text
    $embed_type = $form['attributes']['data-embed-button']['#value'];
    if (isset($embed_type) && $embed_type == "document_browser") {
      $entity_element = $form_state->get('entity_element');
      if ($entity_element !== null) {
        $form['attributes']['data-alt-link-text'] = [
          '#type' => 'textfield',
          '#title' => t('Link text'),
          '#description' => t('Provide an alternative link text to the document.  Leave blank to use the document\'s display name.'),
          '#default_value' => $entity_element['data-alt-link-text'] ?? '',
        ];
      }
    }
  }

  // load selected media entity and get Caption value to provide as default value
  if (isset($form['attributes']['data-caption'])) {
    $input = $form_state->getUserInput();
    if (isset($input["entity_browser"]["entity_ids"])) {
      $media_id = $input["entity_browser"]["entity_ids"];
      $id = explode(":", $media_id);
      if (count($id) == 2) {
        $media = Media::load($id[1]);
        if ($media->hasField("field_caption")) {
          $form['attributes']['data-caption']['#maxlength'] = 300;
          $form['attributes']['data-caption']['#default_value'] = $media->get("field_caption")->value;
        }
      }
    }
  }

  $form['#after_build'][] = 'portland_media_embed_helper_after_build';
}

function portland_media_embed_helper_after_build($form, &$form_state) {
  $form['actions']['back']['#value'] = t("Select a different entity");
  return $form;
}

/**
 * Implements hook_form_alter().
 * Causes media form submit to redirect to the group media page, if media is created in the context of a group.
 */
function portland_media_embed_helper_form_media_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $route_match = \Drupal::service('current_route_match');
  $group = $route_match->getParameter('group');
  if (isset($group)) {
    $form['actions']['submit']['#submit'][] = '_portland_media_embed_helper_redirect_to_group_media';
  }
}

function _portland_media_embed_helper_redirect_to_group_media(array $form, FormStateInterface $form_state) {
  $route_match = \Drupal::service('current_route_match');
  $group = $route_match->getParameter('group');
  $url = \Drupal::service('path.validator')->getUrlIfValid('/group/' . $group->id->value . '/media');
  $form_state->setRedirectUrl($url);
}

// Add a variable so Twig template media--map.html.twig can check if it's being used inside CKEditor
function portland_media_embed_helper_preprocess_media__map(&$variables) {
  if(isset($_REQUEST['text']) && strpos($_REQUEST['text'], '<drupal-entity ') === 0) {
    $variables['map_embeded_in_ckeditor'] = true;
  }
}

/**
 * Implements hook_media_presave()
 */
function portland_media_embed_helper_media_presave($media) {
  // Copy Preview Image file into Thumbnail. Do nothing if Preview Image is empty.
  if($media->hasField('field_preview_image') &&
      $media->hasField('thumbnail') &&
      ! empty($media->field_preview_image->target_id)) {
    $media->thumbnail->target_id = $media->field_preview_image->target_id;
  }
}
