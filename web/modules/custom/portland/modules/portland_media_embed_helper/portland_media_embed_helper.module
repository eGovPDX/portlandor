<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function portland_media_embed_helper_form_entity_embed_dialog_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  $entity = $form_state->get('entity');
  $entity_element = $form_state->get('entity_element');
  // if no entity has been selected yet or we're not on the embed dialog, there's nothing for us to do
  if (!$entity || !$entity_element || !array_key_exists('data-embed-button', $form['attributes'])) {
    return;
  }

  // Map of which options we want enabled on each media type
  $attributes_enabled_by_bundle = [
    'document' => ['data-alt-link-text'],
    'iframe_embed' => ['data-align', 'data-aspect-ratio'],
    'image' => ['data-align', 'data-caption'],
    'map' => ['data-align', 'data-caption'],
    'video' => ['data-align', 'data-caption', 'data-start-cue'],
    'content_fragment' => [],
  ];
  $attributes_enabled = $attributes_enabled_by_bundle[$entity->bundle()];

  // Hide additional fields we don't want
  $form['attributes']['data-entity-embed-display-settings']['#access'] = false;
  // Move view mode selection to bottom
  $form['attributes']['data-entity-embed-display']['#weight'] = 99;

  if (in_array('data-caption', $attributes_enabled)) {
    $form['attributes']['data-caption']['#weight'] = 2;
  } else {
    $form['attributes']['data-caption']['#access'] = false;
  }

  if (in_array('data-align', $attributes_enabled)) {
    $alignments = [
      [
        'icon' => 'img-100.png',
        'name' => 'Full width',
        'id' => 'responsive-full',
      ],
      [
        'icon' => 'img-narrow.png',
        'name' => 'Narrow',
        'id' => 'narrow',
      ],
      [
        'icon' => 'img-50-fill.png',
        'name' => '50% fill',
        'id' => 'responsive-right',
      ],
      [
        'icon' => 'img-50-fit.png',
        'name' => '50% fit',
        'id' => 'right',
      ],
    ];
    $alignments_enabled_by_bundle = [
      'iframe_embed' => ['responsive-full', 'responsive-right'],
      'image' => ['responsive-full', 'narrow', 'responsive-right', 'right'],
      'map' => ['responsive-full', 'responsive-right'],
      'video' => ['responsive-full', 'responsive-right'],
    ];
    $alignments_enabled = $alignments_enabled_by_bundle[$entity->bundle()];

    $form['attributes']['data-align'] = [
      '#type' => 'radios',
      '#title' => t('Alignment'),
      '#weight' => 1,
      '#default_value' => $entity_element['data-align'] ?? 'responsive-full',
      '#attributes' => ['class' => ['container-inline']],
    ];

    foreach ($alignments as $alignment) {
      if (!in_array($alignment['id'], $alignments_enabled)) continue;

      $form['attributes']['data-align']['#options'][$alignment['id']]
        = "{$alignment['name']}<br><img src=\"/themes/custom/cloudy/images/icons/embed-alignment/{$alignment['icon']}\" />";
    }
  }

  if (in_array('data-start-cue', $attributes_enabled)) {
    $form['attributes']['data-start-cue'] = [
      '#type' => 'textfield',
      '#title' => t('Video start cue time (optional)'),
      '#weight' => 3,
      '#placeholder' => '0',
      '#description' => t('Provide a start time in seconds'),
      '#default_value' => $entity_element['data-start-cue'] ?? '',
    ];
  }

  if (in_array('data-aspect-ratio', $attributes_enabled)) {
    $form['attributes']['data-aspect-ratio'] = [
      '#type' => 'radios',
      '#title' => t('Aspect ratio'),
      '#weight' => 2,
      '#options' => [
        '16/9' => t('16x9'),
        '4/3' => t('4x3'),
        '1/1' => t('1x1'),
        '9/16' => t('9x16'),
      ],
      '#default_value' => $entity_element['data-aspect-ratio'] ?? '16/9',
      '#attributes' => ['class' => ['container-inline']],
    ];
  }

  if (in_array('data-alt-link-text', $attributes_enabled)) {
    $form['attributes']['data-alt-link-text'] = [
      '#type' => 'textfield',
      '#title' => t('Link text'),
      '#weight' => 1,
      '#description' => t('Provide an alternative link text for the document.  Leave blank to use the document\'s display name.'),
      '#default_value' => $entity_element['data-alt-link-text'] ?? '',
    ];
  }

  // if entity type is translatable, add translation info
  if ($entity->isTranslatable()) {
    $entity_translations = $entity->getTranslationLanguages(FALSE);
    $entity_translation_names = array_map(fn($lang) => $lang->getName(), $entity_translations);
    $user_can_translate = \Drupal::currentUser()->hasPermission('translate editable entities');
    $form['attributes']['data-translate-media'] = [
      '#type' => 'item',
      '#title' => t('Translate this media item'),
      '#weight' => 0,
      '#markup' => $user_can_translate
        ? '<a target="_blank" href="/media/' . $entity->id() . '/translations">Translate</a>'
        : 'You do not have the translator role.',
      '#description' => (count($entity_translations) > 0
        ? 'Already translated in: ' .  join(', ', $entity_translation_names)
        : 'This media currently has no translations.'),
    ];
  }

  $form['#submit'][] = 'portland_media_embed_helper_entity_embed_dialog_submit';
  $form['#after_build'][] = 'portland_media_embed_helper_after_build';
}

/**
 * Adds responsive-right alignment if document "embedded with thumbnail" view mode is selected
 */
function portland_media_embed_helper_entity_embed_dialog_submit(array &$form, FormStateInterface $form_state)
{
  $entity = $form_state->get('entity');
  if ($entity->bundle() === 'document') {
    if ($form_state->getValue(['attributes', 'data-entity-embed-display']) === 'view_mode:media.embedded_with_thumbnail') {
      $form_state->setValue(['attributes', 'data-align'], 'responsive-right');
    } else {
      $form_state->unsetValue(['attributes', 'data-align']);
    }
  }
}

function portland_media_embed_helper_after_build($form, &$form_state)
{
  $form['actions']['back']['#value'] = t("Select a different entity");
  return $form;
}

/**
 * Implements hook_form_alter().
 * Causes media form submit to redirect to the group media page, if media is created in the context of a group.
 */
function portland_media_embed_helper_form_media_form_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  $route_match = \Drupal::service('current_route_match');
  $group = $route_match->getParameter('group');
  if (isset($group)) {
    $form['actions']['submit']['#submit'][] = '_portland_media_embed_helper_redirect_to_group_media';
  }
}

function _portland_media_embed_helper_redirect_to_group_media(array $form, FormStateInterface $form_state)
{
  $route_match = \Drupal::service('current_route_match');
  $group = $route_match->getParameter('group');
  $url = \Drupal::service('path.validator')->getUrlIfValid('/group/' . $group->id->value . '/media');
  $form_state->setRedirectUrl($url);
}

// Add a variable so Twig template media--map.html.twig can check if it's being used inside CKEditor
function portland_media_embed_helper_preprocess_media__map(&$variables)
{
  if (isset($_REQUEST['text']) && strpos($_REQUEST['text'], '<drupal-entity ') === 0) {
    $variables['map_embeded_in_ckeditor'] = true;
  }
}

/**
 * Implements hook_media_presave()
 */
function portland_media_embed_helper_media_presave($media)
{
  // Copy Preview Image file into Thumbnail. Do nothing if Preview Image is empty.
  if (
    $media->hasField('field_preview_image') &&
    $media->hasField('thumbnail') &&
    ! empty($media->field_preview_image->target_id)
  ) {
    $media->thumbnail->target_id = $media->field_preview_image->target_id;
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 * 
 * TEMPORARY: This is a temporary workaround to remove the insert_content_fragment button from the simplified_editor_with_media_embed format's toolbar
 * unless the user is in the glossary_editor or administrator roles. This is necessary because the button is not yet ready for rollout to the
 * rest of the organiation. Once the feature is ready for widespread release, this code should be removed. 
 */
function portland_media_embed_helper_editor_js_settings_alter(array &$settings, \Drupal\editor\Entity\Editor $editor = NULL) {
  $account = \Drupal::currentUser();

  // Only show the button if the user is in glossary_editor or administrator roles.
  $roles = $account->getRoles();
  if (in_array('glossary_editor', $roles, true) || in_array('administrator', $roles, true)) {
    return;
  }

  // Remove the insert_content_fragment button from this format's toolbar.
  if (isset($settings["editor"]["formats"]["simplified_editor_with_media_embed"])) {
    $settings["editor"]["formats"]["simplified_editor_with_media_embed"]["editorSettings"]["toolbar"]["items"] = array_values(
      array_filter(
        $settings["editor"]["formats"]["simplified_editor_with_media_embed"]["editorSettings"]["toolbar"]["items"],
        fn($item) => $item !== 'insert_content_fragment'
      )
    );
  }
}
