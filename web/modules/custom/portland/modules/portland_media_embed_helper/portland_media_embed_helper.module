<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_alter().
 */
function portland_media_embed_helper_form_entity_embed_dialog_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  // for embedded documents, images and videos using the entity_embed align and caption filters,
  // remove the filter fields from the embed form if the media item is a document.
  $hide_fields = false;
  // there should only be 1 element in the entities array, but just in case there
  // are more, don't hide the fields if one of them isn't a document.
  $entities = $form_state->getValue("entity_browser")["entities"] ;
  if (isset($entities)) {
    foreach($form_state->getValue("entity_browser")["entities"] as $entity) {
      if ($entity->bundle() == "document") {
        $hide_fields = true;
        break;
      }
    }
  } else {
    $input = $form_state->getUserInput();
    if (isset($input) && isset($input['editor_object']['data-embed-button'])) {
      $type = $input['editor_object']['data-embed-button'];
      if ($type == "document_browser") {
        $hide_fields = true;
      }
    }
  }
  if ($hide_fields) {
    if (isset($form['attributes']['data-caption'])) unset($form['attributes']['data-caption']);
    if (isset($form['attributes']['data-align'])) unset($form['attributes']['data-align']);
  } 

  // KLUDGE ALERT!!!! /////////////////////////////////
  // Because of a shortcoming/irregularity in how entity_embed handles display modes and image styles,
  // we need to enable all modes and styles, and then hide the inputs so that the user can't change
  // away from the defaults. The image mode/style is set by a custom text format filter later in the
  // processing cycle, so the selected image style is moot here anyway. If the fields aren't present,
  // the data-entity-embed-display-setttings attribute on the entity-embed tag is empty, which causes
  // errors that are filling up the log. After POWR-1268 is completed, this kludge should be removed.
  // See POWR-1252, POWR-1268.
  if (isset($form['attributes']['data-entity-embed-display-settings'])) {
    unset($form['attributes']['data-entity-embed-display-settings']);
  }


  // configure align options and add icons
  if (isset($form['attributes']['data-align'])) {
    $img_100 =            "<img src=\"/themes/custom/cloudy/images/icons/img-100.png\" alt=\"100% width\" />";
    $img_50_right_fill =  "<img src=\"/themes/custom/cloudy/images/icons/img-50-fill.png\" alt=\"50% fill\" />";
    $img_50_right_fit =   "<img src=\"/themes/custom/cloudy/images/icons/img-50-fit.png\" alt=\"50% fit\" />";
    $embed_type = $form['attributes']['data-embed-button']['#value'];

    // clear default alignment options
    unset($form['attributes']['data-align']['#options']['left']);
    unset($form['attributes']['data-align']['#options']['right']);
    unset($form['attributes']['data-align']['#options']['center']);
    unset($form['attributes']['data-align']['#options']['']);

    $form['attributes']['data-align']['#title'] = "Alignment";
    $form['attributes']['data-align']['#default_value'] = "responsive-full";

    // full width applies to images and videos
    $form['attributes']['data-align']['#options']['responsive-full'] = "Full width<br>$img_100";

    // right fill and fit don't apply to videos
    if ($embed_type == "audio_video_browser" || $embed_type == "map_browser" || $embed_type == "chart_browser") {
      $form['attributes']['data-align']['#options']['responsive-right'] = "50% right<br>$img_50_right_fill";
    } else {
      $form['attributes']['data-align']['#options']['responsive-right'] = "50% fill<br>$img_50_right_fill";
      $form['attributes']['data-align']['#options']['right'] = "50% fit<br>$img_50_right_fit";
    }
  }

  // if this is the video browser, and the caption field is set, then insert the start time field
  if (isset($form['attributes']['data-caption']) && isset($embed_type) && $embed_type == "audio_video_browser") {
    $form['attributes']['data-start-cue']['#type'] = "textfield";
    $form['attributes']['data-start-cue']['#title'] = "Video start cue time (optional)";
    $form['attributes']['data-start-cue']['#placeholder'] = "0";
    $form['attributes']['data-start-cue']['#description'] = "Provide the start time in seconds";
  }


  // load selected media entity and get Caption value to provide as default value
  if (isset($form['attributes']['data-caption'])) {
    $input = $form_state->getUserInput();
    if (isset($input["entity_browser"]["entity_ids"])) {
      $media_id = $input["entity_browser"]["entity_ids"];
      $id = explode(":", $media_id);
      if (count($id) == 2) {
        $media = Media::load($id[1]);
        if ($media->hasField("field_caption")) {
          $form['attributes']['data-caption']['#maxlength'] = 300;
          $form['attributes']['data-caption']['#default_value'] = $media->get("field_caption")->value;
        }
      }
    }
  }

  $form['#after_build'][] = 'portland_media_embed_helper_after_build';
}

function portland_media_embed_helper_after_build($form, &$form_state) {
  $form['actions']['back']['#value'] = t("Select a different entity");
  return $form;
}

/**
 * Implements hook_form_alter().
 * Causes media form submit to redirect to the group media page, if media is created in the context of a group.
 */
function portland_media_embed_helper_form_media_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $route_match = \Drupal::service('current_route_match');
  $group = $route_match->getParameter('group');
  if (isset($group)) {
    $form['actions']['submit']['#submit'][] = '_portland_media_embed_helper_redirect_to_group_media';
  }
}

function _portland_media_embed_helper_redirect_to_group_media(array $form, FormStateInterface $form_state) {
  $route_match = \Drupal::service('current_route_match');
  $group = $route_match->getParameter('group');
  $url = \Drupal::service('path.validator')->getUrlIfValid('/group/' . $group->id->value . '/media');
  $form_state->setRedirectUrl($url);
}

// Add a variable so Twig template media--map.html.twig can check if it's being used inside CKEditor
function portland_media_embed_helper_preprocess_media__map(&$variables) {
  if(isset($_REQUEST['text']) && strpos($_REQUEST['text'], '<drupal-entity ') === 0) {
    $variables['map_embeded_in_ckeditor'] = true;
  }
}