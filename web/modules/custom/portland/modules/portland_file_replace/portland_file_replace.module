<?php

use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\media\Plugin\media\Source\File;

/**
 * Implements hook_entity_extra_field_info().
 */
function portland_file_replace_entity_extra_field_info() {
  $extra = [];

  // Add checkbox to form to enable file replacement
  if (\Drupal::service('module_handler')->moduleExists('media')) {
    $mediaTypes = \Drupal::entityTypeManager()
      ->getStorage('media_type')
      ->loadMultiple();

    foreach ($mediaTypes as $mediaType) {
      if ($mediaType->getSource() instanceof File) {
        $extra['media'][$mediaType->id()]['form']['replace_file'] = [
          'label' => t('Replace file'),
          'description' => t('Checkbox to replace the file.'),
          'visible' => FALSE,
        ];
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Add custom file replacement field to media form if a file has already been
 * uploaded and this media type has a file source.
 * 
 * NOTE: It is not enough to rely on the media entity being new (->IsNew())
 * because we also want this to work if the editor forgot to attache a file
 * when the entity was created, or if the document was previously an efile link.
 */
function portland_file_replace_form_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $media = $form_state->getFormObject()->getEntity();
  
  // only modify the form if the file field already has a value, and only for media types with file source
  $default_value = array_key_exists("field_document", $form) ?? $form['field_document']['widget'][0]['#default_value'];
  if ($default_value && array_key_exists("target_id", $default_value)) {
    $mediaType = \Drupal::entityTypeManager()->getStorage('media_type')->load($media->bundle());
    if (!$mediaType->getSource() instanceof File) {
      return;
    }

    $form['replace_file'] = [
      '#type' => 'fieldset',
      '#title' => t('Replace file'),
    ];

    $sourceFieldDefinition = $mediaType->getSource()->getSourceFieldDefinition($mediaType);
    $sourceFieldName = $sourceFieldDefinition->getName();
    $uploadValidators = $media->get($sourceFieldName)->first()->getUploadValidators();

    $form['replace_file']['replacement_file'] = [
      '#title' => t('File'),
      '#type' => 'file',
      // Note that the 'file' element does not support automatic handling of
      // upload_validators like 'file_managed' does, but we pass it here anyway
      // so that we can manually use it in the submit handler.
      '#upload_validators' => $uploadValidators,
      // Pass source field name so we don't need to execute the logic again
      // to figure it out in the submit handler.
      '#source_field_name' => $sourceFieldName,
    ];

    $helpText = [
      '#theme' => 'file_upload_help',
      '#upload_validators' => $uploadValidators,
      '#cardinality' => 1,
    ];
    $form['replace_file']['replacement_file']['#description'] = \Drupal::service('renderer')->renderPlain($helpText);

    $form['replace_file']['keep_original_filename'] = [
      '#title' => t('Keep original filename'),
      '#description' => t('When checked, the file will use the original filename regardless of how the new file is named.'),
      '#type' => 'checkbox',
      '#default_value' => TRUE,
    ];

    $form['#validate'][] = '_portland_file_replace_validate';
    $form['actions']['submit']['#submit'][] = '_portland_file_replace_submit';

    // Disable standard remove/upload buttons. This module breaks their ajax functionality anyway.
    // Must be done in a callback.
    if (isset($form[$sourceFieldName]['widget'][0]) && $form[$sourceFieldName]['widget'][0]['#type'] === 'managed_file') {
      $form[$sourceFieldName]['widget'][0]['#process'][] = '_portland_file_replace_disable_remove_button';
    }
  }
}

function _portland_file_replace_disable_remove_button(&$element, FormStateInterface $form_state, &$complete_form) {
  if (!isset($complete_form['replace_file']['#access']) || $complete_form['replace_file']['#access'] === TRUE) {
    $element['remove_button']['#access'] = FALSE;
    $element['upload_button']['#access'] = FALSE;
  }
  return $element;
}

/**
 * Custom validate handler for media entity edit form submissions.
 */
function _portland_file_replace_validate($form, FormStateInterface $formState) {
  $media = $formState->getFormObject()->getEntity();
  $fileSystem = \Drupal::service('file_system');

  // Determine where to place the replacement file that a user selected.
  if ($formState->getValue('keep_original_filename')) {
    $uploadDestination = FALSE;
  }
  else {
    // look at the field item objecyt to get the upload location
    $sourceFieldName = $form['replace_file']['replacement_file']['#source_field_name'];
    $uploadDestination = $media->get($sourceFieldName)->first()->getUploadLocation();
    $fileSystem->prepareDirectory($uploadDestination, FileSystemInterface::CREATE_DIRECTORY);
  }

  $uploadValidators = $form['replace_file']['replacement_file']['#upload_validators'];
  $replacementFile = file_save_upload('replacement_file', $uploadValidators, $uploadDestination, 0, FileSystemInterface::EXISTS_RENAME);

  if ($replacementFile === NULL) {
    return;
  }

  if ($replacementFile === FALSE) {
    $formState->setErrorByName('replacement_file', t('Unable to upload replacement file.'));
    return;
  }

  // Store the uploaded file reference so submit handler can use it.
  $formState->set('replacement_file', $replacementFile);
}

/**
 * Custom submit handler for media entity edit form submissions.
 */
function _portland_file_replace_submit($form, FormStateInterface $formState) {
  $replacementFile = $formState->get('replacement_file');
  if (!$replacementFile) {
    return;
  }

  $media = $formState->getFormObject()->getEntity();

  if ($formState->getValue('keep_original_filename')) {
    $fid = $media->getSource()->getSourceFieldValue($media);
    $originalFile = \Drupal::entityTypeManager()->getStorage('file')->load($fid);

    // Copy the uploaded file and overwrite existing file
    $fileSystem = \Drupal::service('file_system');
    if (!$fileSystem->copy($replacementFile->getFileUri(), $originalFile->getFileUri(), FileSystemInterface::EXISTS_REPLACE)) {
      \Drupal::messenger()->addError(t('Unable to overwrite original file with the replacement.'));
      return;
    }

    // Save to force metadata recalcuation
    $originalFile->save();

    // Manually delete temporary file instead of relying on cron cleanup
    $replacementFile->delete();
  }
  else {
    // File already uploaded to final destination. Update media entity reference.
    $sourceFieldName = $form['replace_file']['replacement_file']['#source_field_name'];
    $media->set($sourceFieldName, $replacementFile);
    $media->save();
  }
}
