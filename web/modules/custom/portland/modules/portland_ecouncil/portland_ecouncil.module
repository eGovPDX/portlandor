<?php

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;

/**
 * Helper function that checks if the node should have its title overwritten
 */
function _should_overwrite_council_document_title($node) {
  if ($node != null && $node->bundle() == 'council_document') {
    $document_status_entity = $node->field_council_document_status->entity;

    if ($document_status_entity != null) {
      return false;
    } else {
      return true;
    }
  }

  return false;
}

/**
 * Implements hook_entity_prepare_view()
 *
 * Switches council document title field depending on status.
 * If status is null: use "Full Document Title" field as the title
 * If status is filled: use the default title field
 */
function portland_ecouncil_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {
  if ($entities == null) return;
  $node = $entities[0];
  // We only want to rewrite the node title for the full/search_result view modes. Other view modes will call
  // the title or the full_document_title as needed.
  if ($node != null && _should_overwrite_council_document_title($node) && ($view_mode === 'full' || $view_mode === 'search_result')) {
    // Display the Full Document Title as Title
    $node->title->value = $node->field_full_document_title->value;
    $node->field_full_document_title->value = '';
  }
}

/**
 * Validates that the council document associated with an impact statement
 * doesn't already have an existing one of the same type, to prevent duplicates.
 */
function _validate_council_impact_statement_type(array &$form, FormStateInterface $form_state) {
  $current_relation = $form_state->getFormObject()->getEntity();
  $council_document_id = $form_state->getValue('field_council_document')[0]['target_id'] ?? null;
  $impact_statement_type_tid = $form_state->getValue('field_impact_statement_type')[0]['target_id'] ?? null;
  if (is_null($council_document_id) || is_null($impact_statement_type_tid)) {
    return;
  }

  $existing_relations = \Drupal::entityTypeManager()->getStorage('relation')->loadByProperties([
    'field_council_document' => $council_document_id,
    'field_impact_statement_type' => $impact_statement_type_tid,
  ]);
  $existing_relation = reset($existing_relations);
  // if an existing relation of the same type exists, and it's not the one we're currently editing, throw an error
  if ($existing_relation && $existing_relation->id() !== $current_relation->id()) {
    $form_state->setErrorByName(
      'field_impact_statement_type',
      t(
        'An impact statement of this type on this council document already exists. Please <a href="@link">edit it</a> instead.',
        [ '@link' => $existing_relation->toUrl('edit-form')->toString() ],
      ),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function portland_ecouncil_form_relation_form_alter(array &$form, FormStateInterface $form_state) {
  $relation = $form_state->getFormObject()->getEntity();
  if ($relation->bundle() === 'council_impact_statement') {
    // Add validation to ensure only one impact statement of each type is added
    $form['field_impact_statement_type']['#element_validate'] = ['_validate_council_impact_statement_type'];

    if ($relation->isNew()) {
      // Auto-fill the impact statement type if the user has a filter saved in the impact analysis view.
      $req = \Drupal::request();
      if ($req->hasSession()) {
        $user_analysis_filter_value = $req->getSession()->get('views')['manage_council_documents']['page_impact_statements']['needs_analysis'] ?? null;
        $form['field_impact_statement_type']['widget']['#default_value'] = $user_analysis_filter_value;
      }

      // Auto-fill the council document field based on the query param.
      $query_council_document_id = $req->query->get('council_document_id');
      if ($query_council_document_id) {
        $node = \Drupal::entityTypeManager()->getStorage('node')->load($query_council_document_id);
        $form['field_council_document']['widget'][0]['target_id']['#default_value'] = $node ?? null;
      }
    }
  }
}

/**
 * If current user has Council Agenda Scheduler role,
 *  - and editing a council document where the state is Agenda Scheduling or Published:
 *    - set the default revision log
 *    - hide all non-scheduling related fields
 *    - move Meeting Date, Agenda Type, and Time Requested to the top
 *  - and editing a council document in any other state:
 *    - hide the Meeting Date field since this should only be editable by Agenda Scheduler if the item is in one of the two above states.
 */
function _check_council_agenda_scheduling_state(array &$form, Node $node) {
  $user_roles = \Drupal::currentUser()->getRoles();
  if (in_array('council_agenda_scheduler', $user_roles)) {
    if ($node->moderation_state->value === 'agenda_scheduling' || $node->moderation_state->value === 'published') {
      // Hide title field
      $form['title']['#access'] = false;
      // Set the default revision log for the scheduling use case
      $form['revision_log']['widget'][0]['value']['#default_value'] = t('Item scheduled for a future meeting.');

      // Define the properties of all visible fields. All other fields will be hidden
      $visible_fields = [
        'group_scheduling_request' => [],
        'field_requested_council_date' => [],
        'field_agenda_type' => [ '#group' => null ],
        'field_time_requested' => [ '#group' => null ],
        'field_staff_committee_preference' => [ '#disabled' => true ],
        'field_preferred_meeting_date' => [ '#disabled' => true ],
        'field_staff_commitee_pref_info' => [ '#disabled' => true ],
      ];
      foreach ($form as $key => &$element) {
        if ((str_starts_with($key, 'field_') || str_starts_with($key, 'group_'))) {
          if (array_key_exists($key, $visible_fields)) $form[$key] = array_merge($form[$key], $visible_fields[$key]);
          else $element['#access'] = false;
        }
      }
    } else {
      $form['field_requested_council_date']['#access'] = false;
    }
  }
}

/**
 * If current user has Council President role and editing a council document where
 * the state is Council President Review: hide all fields except the President Only Fields.
 * If current user is not Council Clerk/Admin or user is Council President and the state is not Council President Review: hide the President Only Fields.
 */
function _check_council_president_state(array &$form, Node $node) {
  $user_roles = \Drupal::currentUser()->getRoles();
  if (in_array('council_president', $user_roles) && $node->moderation_state->value === 'president_review') {
    // Hide title field
    $form['title']['#access'] = false;
    // Make recommended committee field required and expand field group
    $form['field_president_committee']['widget']['#required'] = true;
    $form['group_council_president']['#open'] = true;
    // Hide all other non-president fields
    foreach ($form as $key => &$element) {
      if ((str_starts_with($key, 'field_') || str_starts_with($key, 'group_'))
        && ($key !== 'field_president_committee' && $key !== 'group_council_president')) {
        $element['#access'] = false;
      }
    }
  } else if (!in_array('administrator', $user_roles) && !in_array('council_clerk', $user_roles)) {
    $form['field_president_committee']['#access'] = false;
    $form['group_council_president']['#access'] = false;
  }
}

const COUNCIL_DOCUMENT_TYPE_PROCLAMATION_TID = 75;
/**
 * "Time Certain" agenda type and "Proclamation" document type should only be accessible to Council Clerk/admin.
 */
function _hide_council_document_types(array &$form) {
  $user_roles = \Drupal::currentUser()->getRoles();
  if (!in_array('administrator', $user_roles) && !in_array('council_clerk', $user_roles)) {
    unset($form['field_council_document_type']['widget']['#options'][COUNCIL_DOCUMENT_TYPE_PROCLAMATION_TID]);
    unset($form['field_agenda_type']['widget']['#options']['time_certain']);
  }
}

/**
 * Council Document has some old list field options that can't be removed since they're used in old documents,
 * so we hide them from the edit form here.
 */
function _hide_deprecated_field_values(array &$form) {
  unset($form['field_agenda_type']['widget']['#options']['four_fifths']);
  unset($form['field_agenda_type']['widget']['#options']['executive']);
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function portland_ecouncil_field_group_form_process_build_alter(array &$element, FormStateInterface $form_state, array &$form) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof EntityFormInterface) return;

  /** @var \Drupal\node\Entity\Node */
  $node = $form_object->getEntity();
  if ($node->bundle() === 'council_document') {
    _check_council_agenda_scheduling_state($form, $node);
    _check_council_president_state($form, $node);
    _hide_council_document_types($form);
    _hide_deprecated_field_values($form);
  }
}

const AGENDA_ITEM_DISPOSITION_ASSIGNED_TO_COMMITTEE_TID = 984;

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * When an agenda item is updated, update the associated council document's Assigned committee to match, if:
 * - item disposition is "Assigned to Committee"; and
 * - council document is not null; and
 * - committee is not null; and
 * - committee and is different from previous value
 */
function portland_ecouncil_relation_update(EntityInterface $relation) {
  if ($relation->bundle() === "council_agenda_item") {
    $council_doc = $relation->field_council_document->entity;
    $original_committee = $relation->original->field_committee->entity;
    $committee = $relation->field_committee->entity;
    if ($relation->field_agenda_item_disposition->target_id === (string) AGENDA_ITEM_DISPOSITION_ASSIGNED_TO_COMMITTEE_TID
        && $council_doc !== null
        && $committee !== null
        && $committee !== $original_committee) {
      $committee_label = $committee->label();
      $sub_item_number = $relation->field_agenda_sub_item_number->value ? '-' . $relation->field_agenda_sub_item_number->value : '';

      $council_doc->field_committee->entity = $committee;
      $council_doc->revision_log = "Assigned to {$committee_label} from Agenda Item {$relation->field_agenda_item_number->value}{$sub_item_number}.";
      $council_doc->setRevisionUserId(\Drupal::currentUser()->id());
      $council_doc->setRevisionCreationTime(\Drupal::time()->getRequestTime());
      $council_doc->setChangedTime(\Drupal::time()->getRequestTime());
      $council_doc->save();
    }
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 *
 * On council document pages, add a breadcrumb link with the committee, if set.
 */
function portland_ecouncil_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context)
{
  $node = $route_match->getParameter('node');
  if (!empty($node) && $node instanceof Node && $node->bundle() === 'council_document') {
    $committee = $node->field_committee->entity;
    if ($committee) {
      $breadcrumb->addLink($committee->toLink());
    }
  }
}
