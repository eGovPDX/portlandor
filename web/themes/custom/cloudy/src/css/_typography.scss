/*
** Cloudy Design System Typography
**
** This file includes various helper functions, mixins, and maps that help to create the unified
** typography approach within the Cloudy design system.
*/

/*
** Helpers functions & mixins
*/

/// Remove the unit of a length
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/*
** Maps
*/

$cloudy-lead-text-style: (
  default: (
    font-weight: 400,
    font-size: calc(#{strip-unit($cloudy-lead-font-size)} / #{strip-unit($cloudy-type-base-font-size)}) + rem,
    line-height: calc(#{strip-unit($cloudy-lead-line-height)} / #{strip-unit($cloudy-lead-font-size)}),
    color: $cloudy-color-neutral-700,
  ),
);

$cloudy-helper-text-style: (
  default: (
    font-weight: 400,
    font-size: calc(#{strip-unit($cloudy-helper-text-font-size)} / #{strip-unit($cloudy-type-base-font-size)}) + rem,
    line-height: calc(#{strip-unit($cloudy-helper-text-line-height)} / #{strip-unit($cloudy-helper-text-font-size)}),
    color: $cloudy-color-neutral-800,
  ),
);

$cloudy-subtitle-text-style: (
  default: (
    font-weight: 400,
    font-size: calc(#{strip-unit($cloudy-subtitle-font-size)} / #{strip-unit($cloudy-type-base-font-size)}) + rem,
    line-height: calc(#{strip-unit($cloudy-subtitle-line-height)} / #{strip-unit($cloudy-subtitle-font-size)}),
  ),
);

$cloudy-ui-text-style: (
  default: (
    font-weight: 400,
    font-size: calc(#{strip-unit($cloudy-ui-text-font-size)} / #{strip-unit($cloudy-type-base-font-size)}) + rem,
    line-height: calc(#{strip-unit($cloudy-ui-text-line-height)} / #{strip-unit($cloudy-ui-text-font-size)}),
    margin: 0,
  ),
);

$cloudy-link-text-style: (
  default: (
    font-weight: inherit,
    color: $cloudy-color-blue-500,
    font-size: inherit,
  ),
);

$cloudy-permalink-text-style: (
  default: (
    font-weight: 300,
    font-size: calc(#{strip-unit($cloudy-permalink-text-font-size)} / #{strip-unit($cloudy-type-base-font-size)}) + rem,
    line-height:
      calc(#{strip-unit($cloudy-permalink-text-line-height)} / #{strip-unit($cloudy-permalink-text-font-size)}),
    color: $cloudy-color-neutral-500,
  ),
);

$cloudy-time-text-style: (
  default: (
    font-weight: 600,
    color: $cloudy-color-orange-500,
    font-size: calc(#{strip-unit($cloudy-time-text-font-size)} / #{strip-unit($cloudy-type-base-font-size)}) + rem,
    line-height: calc(#{strip-unit($cloudy-time-text-line-height)} / #{strip-unit($cloudy-time-text-font-size)}),
  ),
  md: (
    font-size: calc(#{strip-unit($cloudy-time-text-md-font-size)} / #{strip-unit($cloudy-type-base-font-size)}) + rem,
  ),
);

// Convenience methods
$cloudy-lead-text: $cloudy-lead-text-style;
$cloudy-helper-text: $cloudy-helper-text-style;
$cloudy-subtitle-text: $cloudy-subtitle-text-style;
$cloudy-ui-text: $cloudy-ui-text-style;
$cloudy-link: $cloudy-link-text-style;
$cloudy-permalink: $cloudy-permalink-text-style;
$cloudy-time: $cloudy-time-text-style;

// Generate type style from map values
@mixin make-type-style($type-style-values) {
  font-size: map-get($type-style-values, font-size);
  font-weight: map-get($type-style-values, font-weight);
  line-height: map-get($type-style-values, line-height);
  margin: map-get($type-style-values, margin);
  color: map-get($type-style-values, color);
}

// heading-type passes in the heading variation
@mixin type-style($heading-type, $heading-breakpoints: $grid-breakpoints) {
  // Each breakpoint map in the heading variation
  @each $heading-breakpoint, $type-style-values in $heading-type {
    // if the map == default-, print map contents
    @if $heading-breakpoint == default {
      @include make-type-style($type-style-values);
    } @else {
      // if the heading variation has a breakpoint map that matches the breakpoints, get the breakpoint
      @if map-has-key($heading-breakpoints, $heading-breakpoint) {
        $heading-breakpoint: map-get($heading-breakpoints, $heading-breakpoint);
        // Apply breakpoint to media query and print the map's contents
        @media screen and (min-width: $heading-breakpoint) {
          @include make-type-style($type-style-values);
        }
      }
    }
  }
}

/*
** Cloudy Typography Implementation
**
** The below declarations apply the appropriate styling across global site elements
*/

html {
  font-size: $cloudy-type-base-font-size;
  @media (min-width: $cloudy-breakpoint-md) {
    font-size: $cloudy-type-base-md-font-size;
  }
}

// Prevent incorrect page hierarchy set by editors by stripping strong tags applied to headings
h1,
h2,
h3,
h4,
h5,
h6 {
  strong {
    font-weight: inherit;
  }
}

/*
** Helper classes
*/
.cloudy-link {
  @include type-style($cloudy-link);
}

.cloudy-lead-text {
  @include type-style($cloudy-lead-text);
}

.cloudy-subtitle-text {
  @include type-style($cloudy-subtitle-text);
}

.cloudy-helper-text {
  @include type-style($cloudy-helper-text);
}

.cloudy-time {
  @include type-style($cloudy-time);
}

.cloudy-ui-text {
  @include type-style($cloudy-ui-text);
}

/* Lists */

// Styles to set indentation level - primarily used to on City Code content
$levels: (
  1: (
    default: $cloudy-space-2,
    md: $cloudy-space-4,
  ),
  2: (
    default: $cloudy-space-4,
    md: $cloudy-space-8,
  ),
  3: (
    default: $cloudy-space-6,
    md: $cloudy-space-12,
  ),
  4: (
    default: $cloudy-space-8,
    md: $cloudy-space-16,
  ),
  5: (
    default: $cloudy-space-10,
    md: $cloudy-space-20,
  ),
);

@function indentLevel($keys...) {
  $value: $levels;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return $value;
}

// Classes to set indentation level
.indent-1 {
  margin-left: indentLevel(1, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(1, md);
  }
}

.indent-2 {
  margin-left: indentLevel(2, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(2, md);
  }
}

.indent-3 {
  margin-left: indentLevel(3, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(3, md);
  }
}

.indent-4 {
  margin-left: indentLevel(4, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(4, md);
  }
}

.indent-5 {
  margin-left: indentLevel(5, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(5, md);
  }
}
