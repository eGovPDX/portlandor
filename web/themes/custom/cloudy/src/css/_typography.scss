/*
** Cloudy Design System Typography
**
** This file includes various helper functions, mixins, and maps that help to create the unified
** typography approach within the Cloudy design system.
*/

// stylelint-disable no-descending-specificity

@use "sass:map";

/*
** Typestyle Maps
**
** Each map controls typography at specific breakpoints
** See @mixin make-type-style below for supported properties
*/

$cloudy-type-base-font-size: 16px;
$cloudy-type-heading-01-font-size: 28px;
$cloudy-type-heading-01-line-height: 36px;
$cloudy-type-heading-01-md-font-size: 36px;
$cloudy-type-heading-01-md-line-height: 44px;
$cloudy-type-heading-02-font-size: 24px;
$cloudy-type-heading-02-line-height: 32px;
$cloudy-type-heading-02-md-font-size: 28px;
$cloudy-type-heading-02-md-line-height: 36px;
$cloudy-type-heading-03-font-size: 20px;
$cloudy-type-heading-03-line-height: 28px;
$cloudy-type-heading-03-md-font-size: 24px;
$cloudy-type-heading-03-md-line-height: 32px;
$cloudy-type-heading-04-font-size: 18px;
$cloudy-type-heading-04-line-height: 26px;
$cloudy-type-heading-04-md-font-size: 20px;
$cloudy-type-heading-04-md-line-height: 28px;
$cloudy-type-heading-05-font-size: 16px;
$cloudy-type-heading-05-line-height: 24px;
$cloudy-type-heading-05-md-font-size: 18px;
$cloudy-type-heading-05-md-line-height: 26px;
$cloudy-type-heading-06-font-size: 16px;
$cloudy-type-heading-06-line-height: 24px;
$cloudy-type-body-font-size: 16px;
$cloudy-type-body-line-height: 24px;
$cloudy-lead-font-size: 18px;
$cloudy-lead-line-height: 26px;
$cloudy-lead-md-font-size: 20px;
$cloudy-lead-md-line-height: 28px;
$cloudy-subtitle-font-size: 16px;
$cloudy-subtitle-line-height: 24px;
$cloudy-helper-text-font-size: 14px;
$cloudy-helper-text-line-height: 24px;
$cloudy-ui-text-font-size: 16px;
$cloudy-ui-text-line-height: 24px;
$cloudy-time-text-font-size: 18px;
$cloudy-time-text-line-height: 24px;
$cloudy-time-text-md-font-size: 20px;

// Default heading styles
$cloudy-heading-style-default: (
  default: (
    font-weight: 600,
    margin: 0 0 spacer(4),
  ),
);

// Headings
$cloudy-heading-style-1: (
  xs: (
    font-size: calc($cloudy-type-heading-01-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-01-line-height / $cloudy-type-heading-01-font-size),
  ),
  md: (
    font-size: calc($cloudy-type-heading-01-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-01-md-line-height / $cloudy-type-heading-01-md-font-size),
  ),
);

$cloudy-heading-style-2: (
  xs: (
    font-size: calc($cloudy-type-heading-02-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-02-line-height / $cloudy-type-heading-02-font-size),
  ),
  md: (
    font-size: calc($cloudy-type-heading-02-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-02-md-line-height / $cloudy-type-heading-02-md-font-size),
  ),
);

$cloudy-heading-style-3: (
  xs: (
    font-size: calc($cloudy-type-heading-03-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-03-line-height / $cloudy-type-heading-03-font-size),
  ),
  md: (
    font-size: calc($cloudy-type-heading-03-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-03-md-line-height / $cloudy-type-heading-03-md-font-size),
  ),
);

$cloudy-heading-style-4: (
  xs: (
    font-size: calc($cloudy-type-heading-04-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-04-line-height / $cloudy-type-heading-04-font-size),
  ),
  md: (
    font-size: calc($cloudy-type-heading-04-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-04-md-line-height / $cloudy-type-heading-04-md-font-size),
  ),
);

$cloudy-heading-style-5: (
  xs: (
    font-size: calc($cloudy-type-heading-05-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-05-md-line-height / $cloudy-type-heading-05-md-font-size),
  ),
);

$cloudy-heading-style-6: (
  xs: (
    font-size: calc($cloudy-type-heading-06-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-06-line-height / $cloudy-type-heading-06-font-size),
  ),
);

// Content
$cloudy-body-text-style: (
  default: (
    font-weight: 400,
    font-size: calc($cloudy-type-body-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-body-line-height / $cloudy-type-body-font-size),
  ),
);

$cloudy-lead-text-style: (
  default: (
    font-size: calc($cloudy-lead-font-size / $cloudy-type-base-font-size) + rem,
    color: $cloudy-color-neutral-800,
  ),
);

$cloudy-helper-text-style: (
  default: (
    font-weight: 400,
    font-size: calc($cloudy-helper-text-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-helper-text-line-height / $cloudy-helper-text-font-size),
    color: $cloudy-color-neutral-800,
  ),
);

$cloudy-subtitle-text-style: (
  default: (
    font-weight: 400,
    font-size: calc($cloudy-subtitle-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-subtitle-line-height / $cloudy-subtitle-font-size),
  ),
);

// UI typestyle
$cloudy-ui-text-style: (
  default: (
    font-weight: 400,
    font-size: calc($cloudy-ui-text-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-ui-text-line-height / $cloudy-ui-text-font-size),
    margin: 0,
  ),
);

// Link typestyle
$cloudy-link-text-style: (
  default: (
    font-weight: inherit,
    color: $cloudy-color-blue-600,
    font-size: inherit,
  ),
);

// Time-related typestyle
$cloudy-time-text-style: (
  default: (
    font-weight: 600,
    color: $cloudy-color-orange-temp,
    font-size: calc($cloudy-time-text-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-time-text-line-height / $cloudy-time-text-font-size),
  ),
  md: (
    font-size: calc($cloudy-time-text-md-font-size / $cloudy-type-base-font-size) + rem,
  ),
);

// Merge default heading styles with heading style maps
$cloudy-heading-1: map.merge($cloudy-heading-style-default, $cloudy-heading-style-1);
$cloudy-heading-2: map.merge($cloudy-heading-style-default, $cloudy-heading-style-2);
$cloudy-heading-3: map.merge($cloudy-heading-style-default, $cloudy-heading-style-3);
$cloudy-heading-4: map.merge($cloudy-heading-style-default, $cloudy-heading-style-4);
$cloudy-heading-5: map.merge($cloudy-heading-style-default, $cloudy-heading-style-5);
$cloudy-heading-6: map.merge($cloudy-heading-style-default, $cloudy-heading-style-6);

// Convenience methods
$cloudy-lead-text: $cloudy-lead-text-style;
$cloudy-body-text: $cloudy-body-text-style;
$cloudy-helper-text: $cloudy-helper-text-style;
$cloudy-subtitle-text: $cloudy-subtitle-text-style;
$cloudy-ui-text: $cloudy-ui-text-style;
$cloudy-link: $cloudy-link-text-style;
$cloudy-time: $cloudy-time-text-style;

// Generate typestyle from map values
@mixin make-type-style($type-style-values) {
  font-size: map.get($type-style-values, font-size);
  font-weight: map.get($type-style-values, font-weight);
  line-height: map.get($type-style-values, line-height);
  margin: map.get($type-style-values, margin);
  color: map.get($type-style-values, color);
}

// heading-type passes in the heading variation
@mixin type-style($heading-type, $heading-breakpoints: $grid-breakpoints) {
  // Each breakpoint map in the heading variation
  @each $heading-breakpoint, $type-style-values in $heading-type {
    // if the map == default-, print map contents
    @if $heading-breakpoint == default {
      @include make-type-style($type-style-values);
    } @else {
      // if the heading variation has a breakpoint map that matches the breakpoints, get the breakpoint
      @if map.has-key($heading-breakpoints, $heading-breakpoint) {
        $heading-breakpoint: map.get($heading-breakpoints, $heading-breakpoint);
        // Apply breakpoint to media query and print the map's contents
        @media screen and (min-width: $heading-breakpoint) {
          @include make-type-style($type-style-values);
        }
      }
    }
  }
}

/*
** Cloudy Typography Implementation
**
** The below declarations apply the appropriate styling across global site elements
*/

html {
  font-size: $cloudy-type-base-font-size;
}

h1,
.h1 {
  @include type-style($cloudy-heading-1);
}

h2,
.h2 {
  @include type-style($cloudy-heading-2);
}

h3,
.h3 {
  @include type-style($cloudy-heading-3);
}

h4,
.h4 {
  @include type-style($cloudy-heading-4);
}

h5,
.h5 {
  @include type-style($cloudy-heading-5);
}

h6,
.h6 {
  @include type-style($cloudy-heading-6);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  strong {
    font-weight: inherit;
  }
}

h2,
h3,
h4,
h5,
h6 {
  clear: both;
}

p {
  @include type-style($cloudy-body-text);
}

a {
  @include type-style($cloudy-link);
  &:hover {
    color: $cloudy-color-blue-700;
  }
}

/* Target typography within content. */

// Applies spacing to headings in content.
.cloudy-content {
  h2,
  h3,
  h4,
  h5 {
    margin: 2rem 0 1rem;
  }

  // Adjusts margin between headings
  h2 + h2,
  h2 + h3,
  h3 + h3,
  h3 + h4,
  h4 + h4,
  h4 + h5,
  h5 + h5 {
    margin: spacer(4) 0;
  }
}

// Applies spacing to headings in sidebar.
.cloudy-side {
  h2,
  h3,
  h4,
  h5 {
    margin: spacer(6) 0 spacer(2);
  }
  h2 + h3,
  h3 + h4,
  h4 + h5 {
    margin: spacer(0) 0;
  }
  // These selectors need extra specificity to still work when
  // the header has style classes (e.g .h5), so we add a extraneous selector, :not(._)
  h2:not(._):first-of-type {
    margin: spacer(0) 0 spacer(2);
  }
  h2:not(._) {
    @include type-style($cloudy-heading-4);
  }
  h3:not(._) {
    // temporary workaround to achieve responsive mobile size until a new typestyle is addded
    @include type-style($cloudy-body-text);

    font-weight: $font-weight-semibold;
    @include media-breakpoint-up(md) {
      @include type-style($cloudy-heading-5);
    }
  }
}

/*
** Helper classes
*/
.cloudy-link {
  @include type-style($cloudy-link);

  &:hover {
    color: $cloudy-color-blue-700;
  }
}

.cloudy-lead-text {
  @include type-style($cloudy-lead-text);

  margin-bottom: spacer(8); // 32px
}

.cloudy-lead-text p {
  @include type-style($cloudy-lead-text);
}

.cloudy-lead-text p:last-child {
  margin-bottom: spacer(8); // 32px
}

.cloudy-subtitle-text {
  @include type-style($cloudy-subtitle-text);
}

.cloudy-helper-text {
  @include type-style($cloudy-helper-text);
}

.cloudy-time {
  @include type-style($cloudy-time);
}

.cloudy-ui-text {
  @include type-style($cloudy-ui-text);
}

/* Lists */

// Styles to set indentation level - primarily used to on City Code content
$levels: (
  1: (
    default: spacer(2),
    md: spacer(4),
  ),
  2: (
    default: spacer(4),
    md: spacer(8),
  ),
  3: (
    default: spacer(6),
    md: spacer(12),
  ),
  4: (
    default: spacer(8),
    md: spacer(16),
  ),
  5: (
    default: spacer(10),
    md: spacer(20),
  ),
);

@function indent-level($keys...) {
  $value: $levels;

  @each $key in $keys {
    $value: map.get($value, $key);
  }

  @return $value;
}

// Classes to set indentation level
.indent-1 {
  margin-left: indent-level(1, default);

  @include media-breakpoint-up(md) {
    margin-left: indent-level(1, md);
  }
}

.indent-2 {
  margin-left: indent-level(2, default);

  @include media-breakpoint-up(md) {
    margin-left: indent-level(2, md);
  }
}

.indent-3 {
  margin-left: indent-level(3, default);

  @include media-breakpoint-up(md) {
    margin-left: indent-level(3, md);
  }
}

.indent-4 {
  margin-left: indent-level(4, default);

  @include media-breakpoint-up(md) {
    margin-left: indent-level(4, md);
  }
}

.indent-5 {
  margin-left: indent-level(5, default);

  @include media-breakpoint-up(md) {
    margin-left: indent-level(5, md);
  }
}
