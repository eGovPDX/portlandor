/*
** Cloudy Design System Typography
**
** This file includes various helper functions, mixins, and maps that help to create the unified
** typography approach within the Cloudy design system.
*/

/*
** Typestyle Maps
**
** Each map controls typography at specific breakpoints
** See @mixin make-type-style below for supported properties
*/

// Default heading styles
$cloudy-heading-style-default: (
  default: (
    font-weight: 600,
    margin: 0 0 $cloudy-space-4,
  )
);

// Headings
$cloudy-heading-style-1: (
  xs: (
    font-size: calc($cloudy-type-heading-01-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-01-line-height / $cloudy-type-heading-01-font-size),
  ),
  md: (
    font-size: calc($cloudy-type-heading-01-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-01-md-line-height / $cloudy-type-heading-01-md-font-size),
  )
);

$cloudy-heading-style-2: (
  xs: (
    font-size: calc($cloudy-type-heading-02-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-02-line-height / $cloudy-type-heading-02-font-size),
  ),
  md: (
    font-size: calc($cloudy-type-heading-02-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-02-md-line-height / $cloudy-type-heading-02-md-font-size),
  )
);

$cloudy-heading-style-3: (
  xs: (
    font-size: calc($cloudy-type-heading-03-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-03-line-height / $cloudy-type-heading-03-font-size),
  ),
  md: (
    font-size: calc($cloudy-type-heading-03-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-03-md-line-height / $cloudy-type-heading-03-md-font-size),
  )
);

$cloudy-heading-style-4: (
  xs: (
    font-size: calc($cloudy-type-heading-04-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-04-line-height / $cloudy-type-heading-04-font-size),
  ),
  md: (
    font-size: calc($cloudy-type-heading-04-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-04-md-line-height / $cloudy-type-heading-04-md-font-size),
  )
);

$cloudy-heading-style-5: (
  xs: (
    font-size: calc($cloudy-type-heading-05-md-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-05-md-line-height / $cloudy-type-heading-05-md-font-size),
  )
);

$cloudy-heading-style-6: (
  xs: (
    font-size: calc($cloudy-type-heading-06-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-heading-06-line-height / $cloudy-type-heading-06-font-size),
  )
);

// Content
$cloudy-body-text-style: (
  default: (
    font-weight: 400,
    font-family: $cloudy-font-family-display,
    font-size: calc($cloudy-type-body-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-type-body-line-height / $cloudy-type-body-font-size),
  )
);

$cloudy-lead-text-style: (
  default: (
    font-size: calc($cloudy-lead-font-size / $cloudy-type-base-font-size) + rem,
    color: $cloudy-color-neutral-800,
  )
);

$cloudy-helper-text-style: (
  default: (
    font-weight: 400,
    font-size: calc($cloudy-helper-text-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-helper-text-line-height / $cloudy-helper-text-font-size),
    color: $cloudy-color-neutral-800,
  ),
);

$cloudy-subtitle-text-style: (
  default: (
    font-weight: 400,
    font-size: calc($cloudy-subtitle-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-subtitle-line-height / $cloudy-subtitle-font-size),
  ),
);

// UI typestyle
$cloudy-ui-text-style: (
  default: (
    font-weight: 400,
    font-size: calc($cloudy-ui-text-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-ui-text-line-height / $cloudy-ui-text-font-size),
    margin: 0,
  ),
);

// Link typestyle
$cloudy-link-text-style: (
  default: (
    font-weight: inherit,
    color: $cloudy-color-blue-600,
    font-size: inherit,
  ),
);

// Time-related typestyle
$cloudy-time-text-style: (
  default: (
    font-weight: 600,
    color: $cloudy-color-orange-temp,
    font-size: calc($cloudy-time-text-font-size / $cloudy-type-base-font-size) + rem,
    line-height: calc($cloudy-time-text-line-height / $cloudy-time-text-font-size),
  ),
  md: (
    font-size: calc($cloudy-time-text-md-font-size / $cloudy-type-base-font-size) + rem,
  ),
);

// Merge default heading styles with heading style maps
$cloudy-heading-1: map-merge($cloudy-heading-style-default, $cloudy-heading-style-1);
$cloudy-heading-2: map-merge($cloudy-heading-style-default, $cloudy-heading-style-2);
$cloudy-heading-3: map-merge($cloudy-heading-style-default, $cloudy-heading-style-3);
$cloudy-heading-4: map-merge($cloudy-heading-style-default, $cloudy-heading-style-4);
$cloudy-heading-5: map-merge($cloudy-heading-style-default, $cloudy-heading-style-5);
$cloudy-heading-6: map-merge($cloudy-heading-style-default, $cloudy-heading-style-6);

// Convenience methods
$cloudy-lead-text: $cloudy-lead-text-style;
$cloudy-body-text: $cloudy-body-text-style;
$cloudy-helper-text: $cloudy-helper-text-style;
$cloudy-subtitle-text: $cloudy-subtitle-text-style;
$cloudy-ui-text: $cloudy-ui-text-style;
$cloudy-link: $cloudy-link-text-style;
$cloudy-time: $cloudy-time-text-style;

// Generate typestyle from map values
@mixin make-type-style($type-style-values) {
  font-size: map-get($type-style-values, font-size);
  font-weight: map-get($type-style-values, font-weight);
  line-height: map-get($type-style-values, line-height);
  margin: map-get($type-style-values, margin);
  color: map-get($type-style-values, color);
}

// heading-type passes in the heading variation
@mixin type-style($heading-type, $heading-breakpoints: $grid-breakpoints) {
  // Each breakpoint map in the heading variation
  @each $heading-breakpoint, $type-style-values in $heading-type {
    // if the map == default-, print map contents
    @if $heading-breakpoint == default {
      @include make-type-style($type-style-values);
    } @else {
      // if the heading variation has a breakpoint map that matches the breakpoints, get the breakpoint
      @if map-has-key($heading-breakpoints, $heading-breakpoint) {
        $heading-breakpoint: map-get($heading-breakpoints, $heading-breakpoint);
        // Apply breakpoint to media query and print the map's contents
        @media screen and (min-width: $heading-breakpoint) {
          @include make-type-style($type-style-values);
        }
      }
    }
  }
}

/*
** Cloudy Typography Implementation
**
** The below declarations apply the appropriate styling across global site elements
*/

html {
  font-size: $cloudy-type-base-font-size;
}

h1,
.h1 {
  @include type-style($cloudy-heading-1);
}

h2,
.h2 {
  @include type-style($cloudy-heading-2);
}

h3,
.h3 {
  @include type-style($cloudy-heading-3);
}

h4,
.h4 {
  @include type-style($cloudy-heading-4);
}

h5,
.h5 {
  @include type-style($cloudy-heading-5);
}

h6,
.h6 {
  @include type-style($cloudy-heading-6);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  strong {
    font-weight: inherit;
  }
}

p {
  @include type-style($cloudy-body-text);
}

a {
  @include type-style($cloudy-link);
  &:hover {
    color: $cloudy-color-blue-700;
  }
}

/*
** Helper classes
*/
.cloudy-link {
  @include type-style($cloudy-link);
  &:hover {
    color: $cloudy-color-blue-700;
  }
}

.cloudy-lead-text {
  @include type-style($cloudy-lead-text);
  margin-bottom: $cloudy-space-8; // 32px
}

.cloudy-subtitle-text {
  @include type-style($cloudy-subtitle-text);
}

.cloudy-helper-text {
  @include type-style($cloudy-helper-text);
}

.cloudy-time {
  @include type-style($cloudy-time);
}

.cloudy-ui-text {
  @include type-style($cloudy-ui-text);
}

/* Lists */

// Styles to set indentation level - primarily used to on City Code content
$levels: (
  1: (
    default: $cloudy-space-2,
    md: $cloudy-space-4,
  ),
  2: (
    default: $cloudy-space-4,
    md: $cloudy-space-8,
  ),
  3: (
    default: $cloudy-space-6,
    md: $cloudy-space-12,
  ),
  4: (
    default: $cloudy-space-8,
    md: $cloudy-space-16,
  ),
  5: (
    default: $cloudy-space-10,
    md: $cloudy-space-20,
  ),
);

@function indentLevel($keys...) {
  $value: $levels;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return $value;
}

// Classes to set indentation level
.indent-1 {
  margin-left: indentLevel(1, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(1, md);
  }
}

.indent-2 {
  margin-left: indentLevel(2, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(2, md);
  }
}

.indent-3 {
  margin-left: indentLevel(3, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(3, md);
  }
}

.indent-4 {
  margin-left: indentLevel(4, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(4, md);
  }
}

.indent-5 {
  margin-left: indentLevel(5, default);

  @media (min-width: $cloudy-breakpoint-md) {
    margin-left: indentLevel(5, md);
  }
}
