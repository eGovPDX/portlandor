/**
 * @file
 * Make Bootstrap forms more compatible with Drupal out of the box
 */

// stylelint-disable selector-no-qualifying-type

// Textual form controls

.form-control {
  @include font-size($input-font-size);

  height: $input-height;
  padding: spacer(1) spacer(3);
  font-family: $input-font-family;
  font-weight: $input-font-weight;
  line-height: $input-line-height;
  background-clip: padding-box;
  border: $input-border-width solid $input-border-color;

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @include border-radius($input-border-radius, 0);
  @include box-shadow($input-box-shadow);
  @include transition($input-transition);

  // Placeholder
  &::placeholder {
    color: $cloudy-color-neutral-500;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs

  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $light;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }
}

select.form-control {
  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $cloudy-color-neutral-500;
    background-color: $cloudy-color-neutral-0;
  }
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
  display: block;
}

// Labels

// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.
.col-form-label {
  padding-top: calc(#{spacer(1)} + #{$input-border-width});
  padding-bottom: calc(#{spacer(1)} + #{$input-border-width});
  margin-bottom: 0; // Override the `<label>/<legend>` default
  @include font-size(inherit); // Override the `<legend>` default
}

.col-form-label-lg {
  padding-top: calc(#{spacer(2)} + #{$input-border-width});
  padding-bottom: calc(#{spacer(2)} + #{$input-border-width});
  @include font-size($input-font-size-lg);
}

.col-form-label-sm {
  padding-top: calc(#{spacer(1)} + #{$input-border-width});
  padding-bottom: calc(#{spacer(1)} + #{$input-border-width});
  @include font-size($input-font-size-sm);
}

// Readonly controls as plain text

// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.form-control-plaintext {
  display: block;
  padding-top: spacer(1);
  padding-bottom: spacer(1);
  margin-bottom: 0; // match inputs if this class comes on inputs with default margins
  line-height: $input-line-height;
  color: $cloudy-color-neutral-900;
  background-color: transparent;
  border: solid transparent;
  border-width: $input-border-width 0;

  &.form-control-sm,
  &.form-control-lg {
    padding-right: 0;
    padding-left: 0;
  }
}

// Form control sizing

// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.

// Repeated in `_input_group.scss` to avoid Sass extend issues.

.form-control-sm {
  height: $input-height-sm;
  padding: spacer(1) spacer(2);
  @include font-size($input-font-size-sm);
  @include border-radius($input-border-radius-sm);
}

.form-control-lg {
  height: $input-height-lg;
  padding: spacer(2) spacer(3);
  @include font-size($input-font-size-lg);
  @include border-radius($input-border-radius-lg);
}

// stylelint-disable-next-line no-duplicate-selectors
select.form-control {
  &[size],
  &[multiple] {
    height: auto;
  }
}

textarea.form-control {
  height: auto;
}

// Form groups

// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: spacer(4);
}

.form-text {
  display: block;
  margin-top: spacer(1);
  max-width: 100%;
}

// Form grid

// Special replacement for our grid system's `.row` for tighter form layouts.

.form-row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$grid-gutter-width * 0.5;
  margin-left: -$grid-gutter-width * 0.5;

  > .col,
  > [class*="col-"] {
    padding-right: calc($grid-gutter-width / 2);
    padding-left: calc($grid-gutter-width / 2);
  }
}

// Checkboxes and radios

// Indent the labels to position radios/checkboxes as hanging controls.

.form-check-label {
  margin-bottom: 0; // Override default `<label>` bottom margin
}

.form-check-input {
  margin-right: spacer(1);

  &:disabled ~ .form-check-label {
    color: $cloudy-color-neutral-500;
  }
}

.form-check-inline {
  display: inline-flex;
  align-items: center;
  padding-left: 0; // Override base .form-check
  margin-right: spacer(3);

  // Undo .form-check-input defaults and add some `margin-right`.
  .form-check-input {
    position: static;
    margin-top: 0;
    margin-right: 0.3125rem;
    margin-left: 0;
  }
}

// Override core drupal class
.form--inline {
  display: flex;
}

.form--inline .form-item {
  margin-right: spacer(4);
  display: inline;
  max-width: 100%; // We are adding a harmless max-width here to protect against floating items breaking outside their parent
  // We target inputs with the `size` attribute here so that they respect our layout's margins and not overflow the layout
  input[size] {
    width: 100%;
  }
}

// Fix spacing between radio items
.form-checkboxes,
.form-radios {
  .form-item,
  .webform-options-display-buttons-wrapper {
    margin-top: spacer(2);
    margin-bottom: 0;

    &:first-of-type {
      margin-top: 0;
    }
  }

  &.webform-options-display-side-by-side .form-item,
  &.webform-options-display-buttons-horizontal .webform-options-display-buttons-wrapper {
    margin-top: 0;
  }
}

.form-item--error-message,
.required-indicator {
  color: $cloudy-color-red-500;
  font-weight: 400;
}

.webform-required {
  margin-bottom: spacer(4);
}

// Inline forms

// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.

// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

.form-inline {
  display: flex;
  flex-flow: row wrap;
  align-items: bottom; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)

  // Because we use flex, the initial sizing of checkboxes is collapsed and
  // doesn't occupy the full-width (which is what we want for xs grid tier),
  // so we force that here.
  .form-check {
    width: 100%;
  }

  // Kick in the inline
  @include media-breakpoint-up(sm) {
    label {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 0;
    }

    // Inline-block all the things for "inline"
    .form-group {
      display: flex;
      flex: 0 0 auto;
      flex-flow: row wrap;
      align-items: center;
      margin-bottom: 0;
    }

    // Allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      // width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-plaintext {
      display: inline-block;
    }

    .input-group,
    .form-select {
      width: auto;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .form-check {
      display: flex;
      align-items: center;
      justify-content: center;
      width: auto;
      padding-left: 0;
    }
    .form-check-input {
      position: relative;
      flex-shrink: 0;
      margin-top: 0;
      margin-right: spacer(1);
      margin-left: 0;
    }

    .custom-control {
      align-items: center;
      justify-content: center;
    }
    .custom-control-label {
      margin-bottom: 0;
    }
  }
}

// START Cloudy-specific components

label {
  display: table;
  font-weight: $font-weight-semibold;
  margin-bottom: 0;
}

.form-inline label {
  justify-content: left;
}

.form-inline .form-group {
  margin-right: spacer(4);
}

.form-inline .form-actions,
.container-inline .form-actions {
  align-items: bottom !important;
}

select.form-select {
  @extend .form-control;

  border-radius: 0.125rem;
  // We are adding max-width here to protect against situations where long select options would otherwise break out
  // of their parent container due to natural layout flow. Adding max-width here ensures our select will not disturb
  // the layout in floated situations. (e.g. select filter in a right-hand sidebar layout)
  max-width: 100%;
  margin-top: spacer(1);
}

.views-exposed-form form {
  margin-bottom: spacer(8);
}

.views-exposed-form .form-actions {
  @extend .align-self-end;
}

.webform-element-description p,
form .description p {
  font-size: $font-size-sm !important;
  margin-bottom: 0;
}

.webform-element-description,
form .description,
form .counter {
  display: block;
  font-size: $font-size-sm !important;
  margin-bottom: spacer(3);
}

fieldset legend {
  float: none;
  font-size: 1rem !important;
  font-weight: $font-weight-semibold !important;
}

.entity-content-form-footer {
  border: $border-width solid $light;
  padding: (spacer(4) * 1.5);
  margin-bottom: (spacer(4) * 2) !important;
  background-color: $light;
}

// Form control
.view-filters {
  margin-bottom: spacer(8);
}

.invalid-feedback {
  display: inherit;
}

// exposed filter forms

div.date-links {
  flex-basis: 100%;
  margin-bottom: 30px;
}
span.prev-link {
  margin-right: 30px;
}
span.next-link .fas {
  margin: 0 0 0 spacer(2);
}

// Chosen form overrides
.chosen-container-single {
  .chosen-single {
    padding-left: spacer(4) * 0.75;
  }
}

.chosen-container-multi {
  .chosen-choices {
    padding: (spacer(4) * 0.375) (spacer(4) * 0.75);
    li.search-choice {
      padding: (spacer(4) * 0.375) (spacer(4) * 1.5) (spacer(4) * 0.375) (spacer(4) * 0.75);
      display: flex;
      align-items: center;
      .search-choice-close {
        top: spacer(4) * 0.5;
        right: spacer(4) * 0.25;
      }
    }
  }
}

// Facets
.facets-widget {
  &-checkbox {
    padding: spacer(4);
    background: $light;

    ul {
      list-style: none;
      margin-bottom: 0;
      padding-left: 0;
    }
  }
}

.facet-item {
  @extend .form-check;

  &:not(:last-of-type) {
    margin-bottom: spacer(2);
  }

  &__count {
    margin-left: spacer(1);
  }

  .facets-checkbox {
    float: left;
    margin-right: spacer(2);
    margin-top: 0.35rem;
  }

  label {
    font-weight: normal;
    margin: 0;
  }

  ul {
    margin-top: spacer(2);
  }
}

.facet-empty {
  display: none;
}

.facets-reset .facet-item__count {
  display: none;
}

.form-wrapper {
  margin: 0 0 spacer(4);
}

.region-tools .form-text,
.region-tools .form-select {
  max-width: 255px;
}

// End Cloudy-specific components

// Webform

.webform-multiple-table th,
.webform-multiple-table td {
  padding: 0;
}

.webform-multiple-add {
  margin-top: spacer(2) !important;
}

.form-number,
.form-textarea-wrapper {
  margin-top: 0.4em;
}

.webform-submission-form {
  // Webforms use cloudy alert style as opposed to bootstrap alert
  .alert {
    @extend .cloudy-alert;
  }

  .alert h2 {
    margin-top: 0 !important;
  }

  .alert p:last-of-type {
    margin-bottom: 0 !important;
  }
}

img.inline-icon {
  height: 20px;
}

fieldset.portland-support-agent-widget--wrapper {
  padding: 15px;
  background-color: #cccccc;

  .details-wrapper {
    padding: 0;
  }
}

// Fix select styling in Mozilla Firefox
@supports (-moz-appearance: none) {
  select {
    background-color: white;
  }
}
