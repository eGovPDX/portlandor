<?php

/**
 * @file
 * Functions to support Portland.gov theming
 */
use Drupal\Core\Config\Config;
use Drupal\Core\Form\FormStateInterface;

use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupInterface;

function setGroupVariables($group, &$variables) {
  $shortname_or_acronym = $group->field_shortname_or_acronym->value;
  $variables['attributes']['class'][] = 'group-page';
  $variables['attributes']['class'][] = strtolower($shortname_or_acronym);
}

// TODO: Do we really need this preprocess anymore?
function cloudy_preprocess_html(&$variables) {
  $route_match = \Drupal::service('current_route_match');
  // if this is a node
  if ($node = $route_match->getParameter('node')) {
    if (!$node instanceof \Drupal\Core\Entity\ContentEntityInterface) {
      $node = \Drupal\node\Entity\Node::load($node);
    }
    // that is group content
    foreach (GroupContent::loadByEntity($node) as $group_content) {
      // give it the shortname as a class
      setGroupVariables($group_content->getGroup(), $variables);
    }
  }
  // otherwise if we are in some sort of group page
  elseif ($group = $route_match->getParameter('group')) {
    // we are on a group homepage
    if($group instanceof GroupInterface) {
      setGroupVariables($group, $variables);
    }
    // we are on something else and probably have the ID
    else {
      $group_entity = \Drupal::entityTypeManager()->getStorage('group')->load($group);

      // NOTE: this may get called in instances where there is no group, or group is "all",
      // in which case the group entity will be null
      if (!is_null($group_entity)) {
        setGroupVariables($group_entity, $variables);
        // some views pages have duplicate html titles, such as group Services, Guides, etc.
        // this function call appends the group name to the title for SEO purposes.
        portland_set_extended_title_for_group_views($variables);
      }
    }
  }

  // Add Swiftype metatags to customize indexing on POG
  $swiftype_domain_identifier = [
    '#tag' => 'meta',
    '#attributes' => [
      'class' => 'swiftype',
      'name' => 'domain-identifier',
      'data-type' => 'string',
      'content' => 'portland.gov'
    ]
  ];
  $variables['page']['#attached']['html_head'][] = [$swiftype_domain_identifier, 'swiftype_domain-identifier'];

  $swiftype_site_priority = [
    '#tag' => 'meta',
    '#attributes' => [
      'class' => 'swiftype',
      'name' => 'site-priority',
      'data-type' => 'integer',
      'content' => '2'
    ]
  ];
  $variables['page']['#attached']['html_head'][] = [$swiftype_site_priority, 'swiftype_site-priority'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Applies path-based classes to search api page block form.
 * Set form attributes
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
/**
 * Implements hook_form_alter
 */
function cloudy_form_search_api_page_block_form_search_portland_gov_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $current_path = \Drupal::routeMatch()->getRouteName();
  $is_front_page = \Drupal::service('path.matcher')->isFrontPage();

  /* paths requiring search form large classes */
  $search_large_paths = "/^(search)/";

  $search_form_large_classes = [
    'cloudy-search-form',
    'cloudy-search-form--large',
  ];

	$search_form_small_classes = [
		'cloudy-search-form',
		'cloudy-search-form--small',
	];

  $is_path_match = function($pattern, $string_to_check) {
    return (preg_match($pattern, $string_to_check) ? true : null);
  };

  /* set search form classes based on path */
  $additional_classes = $is_path_match($search_large_paths, $current_path) || $is_front_page ? $search_form_large_classes : $search_form_small_classes;

  /* merge returned search class */
  $form['#attributes']['class'] = array_merge($form['#attributes']['class'], $additional_classes);
  $text = t("Search Portland.gov");

	$form['keys']['#attributes'] = array(
		'placeholder' => $text,
		'aria-label' => $text,
    'title' => $text,
    'size' => 20,
	);

	$form['actions']['submit'] = array(
		'#type' => 'submit',
	);

	// Theme suggestion for form elements
	$form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form['#id'];

	foreach (\Drupal\Core\Render\Element::children($form) as $key) {
		$form[$key]['#attributes']['data-twig-suggestion'] = $form['#id'];
	}
}

/**
 * Implements template_preprocess_input().
 */
function cloudy_preprocess_input(&$variables) {
  $element = $variables['element'];

	$unset_types = ['edit-keys', 'edit-keys--2'];
  if (isset($element['#id']) && in_array($element['#id'], $unset_types) && !empty($variables['attributes']['class']) && is_array($variables['attributes']['class'])) {
    // Remove 'form-text' class Bootstrap naming collision
    $key = array_search('form-text', $variables['attributes']['class']);
    if ($key !== FALSE) {
			unset($variables['attributes']['class'][$key]);
		}
		$variables['attributes']['type'] = 'search';
  }
}

function cloudy_preprocess_search_api_page(&$vars) {
  // Save URL query parameter as variable for Twig template
  if ( isset($_GET['keys']) ) {
    $vars['get']['keys'] = $_GET['keys'];
  }
}

function cloudy_preprocess_responsive_image(&$variables) {
  // Add attribute to Elected Official thumbnail
  if($variables['responsive_image_style_id'] == "elected_official_thumbnail") {
    $variables['img_element']['#attributes']['is_rounded'] = true;
  }
}

function cloudy_preprocess_image(&$variables) {
  // Apply class to Elected Official thumbnail if key exists
  if(key_exists('is_rounded', $variables['attributes'])) {
    $variables['attributes']['class'][] = 'rounded-circle';
  }
}

function cloudy_preprocess_field(&$variables) {
  $element = $variables['element'];

  $variables['view_mode'] = $element['#view_mode'];
  $variables['bundle'] = $element['#bundle'];
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function cloudy_theme_suggestions_views_view_alter(array &$suggestions, array $variables)
{
  $suggestions[] = sprintf('views_view__%s', $variables['view']->id());
}

/**
 * Implements hook_theme_suggestions_field_alter().
 *
 * Adds extra detail of view mode to field theme suggestions
 */
function cloudy_theme_suggestions_field_alter(array &$suggestions, array $variables) {

  $entity_type = $variables['element']['#entity_type'];
  $view_mode = $variables['element']['#view_mode'];
  $field_type = $variables['element']['#field_type'];
  $field_name = $variables['element']['#field_name'];

  $suggestions[] = 'field__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type;
  $suggestions[] = 'field__' . $entity_type . '__' . $view_mode;
  $suggestions[] = 'field__' . $field_name;
  $suggestions[] = 'field__' . $field_name  . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $view_mode . '__' . $field_name;
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function cloudy_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestion_suffix = str_replace(['-'], '_', $element['#attributes']['data-twig-suggestion']);
    $suggestions[] = 'input__' . $element['#type'] . '__' . $suggestion_suffix;
  }
}

/**
 * Implements template_preprocess_time()
 *
 * Prepares variables for time templates.
 *
 * Default template: time.html.twig.
 *
 * @param array $variables
 *   An associative array possibly containing:
 *   - attributes['timestamp']:
 *   - timestamp:
 *   - text:
 */
function cloudy_preprocess_time(&$variables) {
  $date_formatter = \Drupal::service('date.formatter');

  // If timestamp is just a date (i.e. no time component), format datetime attribute as a date
  if (preg_match('/\d+, \d{4}$/', $variables['text'])) {
    $variables['attributes']['datetime'] = substr($variables['attributes']['datetime'], 0, 10);
  }
}

/**
 * Implements theme_preprocess_block().
 *
 * Adds the "is_front" variable to the feedback block template
 */
function cloudy_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'block_content:7dc74839-c339-461f-9344-87a6db099602') {
    try {
      $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
    }
    catch (Exception $e) {
      $variables['is_front'] = FALSE;
    }
    // Ensure the cache varies correctly (new in Drupal 8.3).
    $variables['#cache']['contexts'][] = 'url.path.is_front';
  }
}
