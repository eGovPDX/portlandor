<?php

/**
 * @file
 * Functions to support Portland.gov theming
 */

use Drupal\Core\Form\FormStateInterface;

use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupInterface;

function setGroupVariables($group, &$variables) {
  $shortname_or_acronym = $group->field_shortname_or_acronym->value;
  $variables['attributes']['class'][] = 'group-page';
  $variables['attributes']['class'][] = strtolower($shortname_or_acronym);
}

function cloudy_preprocess_html(&$variables) {
  $route_match = \Drupal::service('current_route_match');
  // if this is a node
  if ($node = $route_match->getParameter('node')) {
    if (!$node instanceof \Drupal\Core\Entity\ContentEntityInterface) {
      $node = \Drupal\node\Entity\Node::load($node);
    }
    // that is group content
    foreach (GroupContent::loadByEntity($node) as $group_content) {
      // give it the shortname as a class
      setGroupVariables($group_content->getGroup(), $variables);
    }
  }
  // otherwise if we are in some sort of group page
  elseif ($group = $route_match->getParameter('group')) {
    // we are on a group homepage
    if($group instanceof GroupInterface) {
      setGroupVariables($group, $variables);
    }
    // we are on something else and probably have the ID
    else {
      $group_entity = \Drupal::entityTypeManager()->getStorage('group')->load($group);

      // NOTE: this may get called in instances where there is no group, or group is "all",
      // in which case the group entity will be null
      if (!is_null($group_entity)) {
        setGroupVariables($group_entity, $variables);
        // some views pages have duplicate html titles, such as group Services, Guides, etc.
        // this function call appends the group name to the title for SEO purposes.
        portland_set_extended_title_for_group_views($variables);
      }
    }
  }

  // Add Swiftype metatags to customize indexing on POG
  $swiftype_domain_identifier = [
    '#tag' => 'meta',
    '#attributes' => [
      'class' => 'swiftype',
      'name' => 'domain-identifier',
      'data-type' => 'string',
      'content' => 'portland.gov'
    ]
  ];
  $variables['page']['#attached']['html_head'][] = [$swiftype_domain_identifier, 'swiftype_domain-identifier'];

  $swiftype_site_priority = [
    '#tag' => 'meta',
    '#attributes' => [
      'class' => 'swiftype',
      'name' => 'site-priority',
      'data-type' => 'integer',
      'content' => '2'
    ]
  ];
  $variables['page']['#attached']['html_head'][] = [$swiftype_site_priority, 'swiftype_site-priority'];
}


/**
 * Implements hook_form_alter
 */
function cloudy_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'search_api_page_block_form') {
    $form['keys']['#attributes']['placeholder'] = 'What can we help you find?';
    $form['keys']['#attributes']['title'] = 'Enter keywords and press enter or return';
    $form['actions']['submit']['#value'] = html_entity_decode('&#xf002;');
  }
}

/**
 * Implements theme_preprocess_HOOK
 *
 */
function cloudy_preprocess_form(&$vars) {
  // add role="search" to site search form
  if ($vars['element']['#form_id'] == 'search_api_page_block_form') {
    $vars['attributes']['role'] = 'search';
    $vars['attributes']['class'] = 'input-group form-inline d-flex justify-content-center';
    $vars['attributes']['title'] = 'Search';
  }
}

function cloudy_preprocess_input__textfield(&$vars) {
    // The main search input
    if($vars["attributes"]['id'] === 'edit-keys') {
        $vars["attributes"]['type'] = 'search';
        $vars["attributes"]['class'] = ['form-search', 'form-autocomplete'];
    }
    // The search input at top-right corner
    else if($vars["attributes"]['id'] === 'edit-keys--2') {
        $vars["attributes"]['type'] = 'search';
        $vars["attributes"]['size'] = '21';
    }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 *
 * Adds extra detail of view mode to field theme suggestions
 */

function cloudy_theme_suggestions_field_alter(array &$suggestions, array $variables) {

  $entity_type = $variables['element']['#entity_type'];
  $view_mode = $variables['element']['#view_mode'];
  $field_type = $variables['element']['#field_type'];
  $field_name = $variables['element']['#field_name'];

  $suggestions[] = 'field__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type;
  $suggestions[] = 'field__' . $entity_type . '__' . $view_mode;
  $suggestions[] = 'field__' . $field_name;
  $suggestions[] = 'field__' . $field_name  . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $view_mode . '__' . $field_name;
}

/**
 * Implements template_preprocess_time()
 * 
 * Prepares variables for time templates.
 *
 * Default template: time.html.twig.
 *
 * @param array $variables
 *   An associative array possibly containing:
 *   - attributes['timestamp']:
 *   - timestamp:
 *   - text:
 */
function cloudy_preprocess_time(&$variables) {
  $date_formatter = \Drupal::service('date.formatter');
  
  // If timestamp is just a date (i.e. no time component), format datetime attribute as a date
  if (preg_match('/\d+, \d{4}$/', $variables['text'])) {
    $timestamp = strtotime($variables['text']);
    $variables['attributes']['datetime'] = $date_formatter->format($timestamp, 'html_date', '', 'UTC');
  }
}

