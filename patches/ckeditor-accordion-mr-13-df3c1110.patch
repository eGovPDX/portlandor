From b22cca8851df429cfab6b162b23a5a6274ce55de Mon Sep 17 00:00:00 2001
From: sascha <sascha.meissner@werk21.de>
Date: Thu, 1 Feb 2024 11:28:38 +0100
Subject: [PATCH 01/11] Issue #3124167: Rebased origin/2.x, rerolled and
 applied patch 32

---
 README.md                                     |  12 +-
 ckeditor_accordion.api.php                    |  32 ++++
 ckeditor_accordion.libraries.yml              |  20 +++
 ckeditor_accordion.module                     |  11 +-
 ckeditor_accordion.services.yml               |   4 +
 .../install/ckeditor_accordion.settings.yml   |   3 +
 css/ckeditor-accessible-accordion.css         | 105 +++++++++++++
 src/Annotation/CkeditorAccordionVariant.php   |  43 +++++
 src/Form/CkeditorAccordionSettingsForm.php    |  15 ++
 .../CkeditorAccordionVariantDefault.php       |  41 +++++
 src/Plugin/CkeditorAccordionVariantBase.php   |  79 ++++++++++
 .../CkeditorAccordionVariantInterface.php     |  15 ++
 .../CkeditorAccordionVariantManager.php       |  33 ++++
 src/Plugin/Filter/CKEditorAccordion.php       | 147 ++++++++++++++++++
 14 files changed, 553 insertions(+), 7 deletions(-)
 create mode 100644 ckeditor_accordion.api.php
 create mode 100644 ckeditor_accordion.services.yml
 create mode 100644 config/install/ckeditor_accordion.settings.yml
 create mode 100644 css/ckeditor-accessible-accordion.css
 create mode 100644 src/Annotation/CkeditorAccordionVariant.php
 create mode 100644 src/Plugin/CkeditorAccordionVariant/CkeditorAccordionVariantDefault.php
 create mode 100644 src/Plugin/CkeditorAccordionVariantBase.php
 create mode 100644 src/Plugin/CkeditorAccordionVariantInterface.php
 create mode 100644 src/Plugin/CkeditorAccordionVariantManager.php
 create mode 100644 src/Plugin/Filter/CKEditorAccordion.php

diff --git a/README.md b/README.md
index 8090a00..c3d8e28 100644
--- a/README.md
+++ b/README.md
@@ -21,12 +21,14 @@ gets triggered on the accordion element.

 INSTALLATION:
 --------
-1. Install & Enable the module
-2. Open Administration > Configuration > Content authoring >
+1. Download external library from https://github.com/smillart/WAI-ARIA-Patterns-And-Widgets.
+2. Place the library in the root libraries folder (/libraries).
+3. Install & Enable the module
+4. Open Administration > Configuration > Content authoring >
    Text formats and editors (admin/config/content/formats)
-3. Edit a text format's settings (usually Basic HTML)
-4. Drag n Drop the Accordion -button to the toolbar to show it to the editors
-5. Review available options at /admin/config/content/ckeditor-accordion
+5. Edit a text format's settings (usually Basic HTML)
+6. Drag n Drop the Accordion -button to the toolbar to show it to the editors
+7. Review available options at /admin/config/content/ckeditor-accordion


 TODO:
diff --git a/ckeditor_accordion.api.php b/ckeditor_accordion.api.php
new file mode 100644
index 0000000..1b30644
--- /dev/null
+++ b/ckeditor_accordion.api.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the CKEditor Accordion module.
+ */
+
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Alter the variant defintition.
+ *
+ * @param array &$definition
+ *   An array representing the HTML structure to be used to render accordions.
+ * @param array &$context
+ *   - 'variant_id': the ID of the variant being used
+ *
+ * @see \Drupal\ckeditor_accordion\Plugin\CkeditorAccordionVariantBase::renderLinks()
+ */
+function hook_ckeditor_accordion_variant_alter(array &$definition, array $context) {
+  if ($context['variant_id'] == 'ckeditor_accordion_variant_default') {
+    $definition['list']['attributes']['class'][] = 'my-custom-class';
+  }
+}
+
+/**
+ * @} End of "addtogroup hooks".
+ */
diff --git a/ckeditor_accordion.libraries.yml b/ckeditor_accordion.libraries.yml
index 79775c6..3e81f41 100644
--- a/ckeditor_accordion.libraries.yml
+++ b/ckeditor_accordion.libraries.yml
@@ -25,3 +25,23 @@ accordion.frontend:
     - core/drupal
     - core/drupalSettings
     - core/once
+accordion_accessible_style:
+  version: 1.x
+  css:
+    theme:
+      css/ckeditor-accessible-accordion.css: {}
+  dependencies:
+    - core/drupal
+    - ckeditor_accordion/libraries.smillart.wai-aria-patterns-and-widgets
+libraries.smillart.wai-aria-patterns-and-widgets:
+  remote: https://github.com/smillart/WAI-ARIA-Patterns-And-Widgets
+  version: 1.x
+  license:
+    name: MIT
+    url: https://github.com/smillart/WAI-ARIA-Patterns-And-Widgets/blob/master/LICENSE
+    gpl-compatible: true
+  css:
+    theme:
+      /libraries/wai-aria-patterns-and-widgets/dist/accordion/css/accordion.min.css: {}
+  js:
+    /libraries/wai-aria-patterns-and-widgets/dist/accordion/js/accordion.min.js: {}
diff --git a/ckeditor_accordion.module b/ckeditor_accordion.module
index cda8f86..7d7ba81 100644
--- a/ckeditor_accordion.module
+++ b/ckeditor_accordion.module
@@ -11,8 +11,15 @@
 function ckeditor_accordion_page_attachments_alter(array &$page) {
   $config = \Drupal::config('ckeditor_accordion.settings');

-  // Attaches css assets globally.
-  $page['#attached']['library'][] = 'ckeditor_accordion/accordion.frontend';
+// Attaches accordion accessible style library.
+  if (file_exists(DRUPAL_ROOT . '/libraries/wai-aria-patterns-and-widgets')) {
+    $page['#attached']['library'][] = 'ckeditor_accordion/accordion_accessible_style';
+  }
+  else {
+    // Attaches accordion library if accessible library
+    // does not exist in libraris folder.
+    $page['#attached']['library'][] = 'ckeditor_accordion/accordion.frontend';
+  }

   // Pass settings to JavaScript.
   $page['#attached']['drupalSettings']['ckeditorAccordion']['accordionStyle'] = [
diff --git a/ckeditor_accordion.services.yml b/ckeditor_accordion.services.yml
new file mode 100644
index 0000000..58fd86e
--- /dev/null
+++ b/ckeditor_accordion.services.yml
@@ -0,0 +1,4 @@
+services:
+  plugin.manager.ckeditor_accordion_variant:
+    class: Drupal\ckeditor_accordion\Plugin\CkeditorAccordionVariantManager
+    parent: default_plugin_manager
diff --git a/config/install/ckeditor_accordion.settings.yml b/config/install/ckeditor_accordion.settings.yml
new file mode 100644
index 0000000..6b1304f
--- /dev/null
+++ b/config/install/ckeditor_accordion.settings.yml
@@ -0,0 +1,3 @@
+collapse_all: 0
+variant: 'ckeditor_accordion_variant_default'
+langcode: 'en'
diff --git a/css/ckeditor-accessible-accordion.css b/css/ckeditor-accessible-accordion.css
new file mode 100644
index 0000000..25c28e7
--- /dev/null
+++ b/css/ckeditor-accessible-accordion.css
@@ -0,0 +1,105 @@
+/*
+  Accessible Accordion style definition.
+*/
+
+.aria-accordion {
+  border: 1px solid #0065a3;
+}
+.aria-accordion .aria-accordion__heading {
+  margin: 0;
+  padding: 0;
+}
+.aria-accordion .aria-accordion__heading button {
+  display: block;
+  width: 100%;
+  color: #ffffff;
+  text-align: left;
+  margin: 0;
+  padding: 10px 15px 10px 35px;
+  cursor: pointer;
+  background: #007bb2;
+  border: 0;
+  border-bottom: 1px solid #0072a5;
+  border-radius: 0;
+  appearance: none;
+  box-shadow: 0 0 0 transparent;
+  transition: background-color 0.3s;
+  position: relative;
+  z-index: 1;
+  font-size: 1rem;
+}
+.aria-accordion .aria-accordion__heading:last-of-type button {
+  border-bottom: 0;
+}
+.aria-accordion .aria-accordion__heading button:before,
+.aria-accordion .aria-accordion__heading button:after {
+  content: '';
+  display: block;
+  width: 2px;
+  height: 10px;
+  margin: -5px 0 0 5px;
+  position: absolute;
+  top: 50%;
+  background: #ffffff;
+  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
+}
+.aria-accordion .aria-accordion__heading button:before {
+  left: 7px;
+  transform: rotate(135deg);
+}
+.aria-accordion .aria-accordion__heading button:after {
+  left: 14px;
+  transform: rotate(-135deg);
+}
+.aria-accordion .aria-accordion__heading button:hover,
+.aria-accordion .aria-accordion__heading button:focus {
+  background-color: #0073a7;
+}
+.aria-accordion .aria-accordion__heading button[aria-expanded="true"] {
+  background-color: #004772;
+}
+.aria-accordion .aria-accordion__heading button[aria-expanded="true"]:before {
+  left: 7px;
+  transform: rotate(45deg);
+}
+.aria-accordion .aria-accordion__heading button[aria-expanded="true"]:after {
+  left: 14px;
+  transform: rotate(-45deg);
+}
+.aria-accordion .aria-accordion__panel {
+  margin: 0;
+  padding: 0 15px;
+}
+.aria-accordion .aria-accordion__panel--transition[hidden] {
+  display: block;
+  height: auto;
+  max-height: 0;
+  overflow: hidden;
+  -webkit-transition: max-height 800ms ease-out;
+  -moz-transition: max-height 800ms ease-out;
+  -ms-transition: max-height 800ms ease-out;
+  -o-transition: max-height 800ms ease-out;
+  transition: max-height 800ms ease-out;
+  visibility: visible;
+  /* persist visibility value from animation */
+  animation: 800ms delay-visibility;
+}
+.aria-accordion .aria-accordion__panel--transition {
+  display: block;
+  max-height: 1000px;
+  visibility: visible;
+  -webkit-transition: max-height 800ms ease-in;
+  -moz-transition: max-height 800ms ease-in;
+  -ms-transition: max-height 800ms ease-in;
+  -o-transition: max-height 800ms ease-in;
+  transition: max-height 800ms ease-in;
+  overflow: visible;
+  /* persist overflow value from animation */
+  animation: 800ms delay-overflow;
+}
+@keyframes delay-visibility {
+  from { visibility: visible; }
+}
+@keyframes delay-overflow {
+  from { overflow: hidden; }
+}
diff --git a/src/Annotation/CkeditorAccordionVariant.php b/src/Annotation/CkeditorAccordionVariant.php
new file mode 100644
index 0000000..0f35659
--- /dev/null
+++ b/src/Annotation/CkeditorAccordionVariant.php
@@ -0,0 +1,43 @@
+<?php
+
+namespace Drupal\ckeditor_accordion\Annotation;
+
+use Drupal\Component\Annotation\Plugin;
+
+/**
+ * Defines a CKEditor Accordion Variant item annotation object.
+ *
+ * @see \Drupal\ckeditor_accordion\Plugin\CkeditorAccordionVariantManager
+ * @see plugin_api
+ *
+ * @Annotation
+ */
+class CkeditorAccordionVariant extends Plugin {
+
+
+  /**
+   * The plugin ID.
+   *
+   * @var string
+   */
+  public $id;
+
+  /**
+   * The label of the plugin.
+   *
+   * @var \Drupal\Core\Annotation\Translation
+   *
+   * @ingroup plugin_translatable
+   */
+  public $label;
+
+  /**
+   * The description of the plugin.
+   *
+   * @var \Drupal\Core\Annotation\Translation
+   *
+   * @ingroup plugin_translatable
+   */
+  public $description;
+
+}
diff --git a/src/Form/CkeditorAccordionSettingsForm.php b/src/Form/CkeditorAccordionSettingsForm.php
index ec2e3af..3d3e326 100644
--- a/src/Form/CkeditorAccordionSettingsForm.php
+++ b/src/Form/CkeditorAccordionSettingsForm.php
@@ -2,6 +2,7 @@

 namespace Drupal\ckeditor_accordion\Form;

+use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ -61,6 +62,19 @@ class CkeditorAccordionSettingsForm extends ConfigFormBase {
       '#description' => $this->t('With this, your accordion row titles are hashed and used as links to the row. For example, if your accordion title is "Frequently Asked Questions", you can link to it using href="#FrequentlyAskedQuestions".'),
     ];

+    $variant_options = [];
+    foreach (\Drupal::service('plugin.manager.ckeditor_accordion_variant')->getDefinitions() as $variant_id => $values) {
+      $variant_options[$values['id']] = Html::escape($values['label']->render() . ': ' . $values['description']->render());
+    }
+
+    $form['variant'] = [
+      '#type' => 'radios',
+      '#title' => $this->t('Variant'),
+      '#description' => $this->t('Select the variant to be used.'),
+      '#options' => $variant_options,
+      '#default_value' => $config->get('variant'),
+    ];
+
     return parent::buildForm($form, $form_state);
   }

@@ -75,6 +89,7 @@ class CkeditorAccordionSettingsForm extends ConfigFormBase {
     $config->set('keep_rows_open', $values['keep_rows_open']);
     $config->set('animate_accordion_toggle', $values['animate_accordion_toggle']);
     $config->set('open_tabs_with_hash', $values['open_tabs_with_hash']);
+    $config->set('variant', $values['variant']);
     $config->save();

     parent::submitForm($form, $form_state);
diff --git a/src/Plugin/CkeditorAccordionVariant/CkeditorAccordionVariantDefault.php b/src/Plugin/CkeditorAccordionVariant/CkeditorAccordionVariantDefault.php
new file mode 100644
index 0000000..3c13dce
--- /dev/null
+++ b/src/Plugin/CkeditorAccordionVariant/CkeditorAccordionVariantDefault.php
@@ -0,0 +1,41 @@
+<?php
+
+namespace Drupal\ckeditor_accordion\Plugin\CkeditorAccordionVariant;
+
+use Drupal\ckeditor_accordion\Plugin\CkeditorAccordionVariantBase;
+
+
+/**
+ * @CkeditorAccordionVariant(
+ *  id = "ckeditor_accordion_variant_default",
+ *  label = @Translation("Default"),
+ *  description = @Translation("Default HTML structure which uses <div> <h2> <div> style tags."),
+ * )
+ */
+class CkeditorAccordionVariantDefault extends CkeditorAccordionVariantBase{
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $list_tag = [
+    'tag' => 'div',
+    'attributes' => [],
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $title_tag = [
+    'tag' => 'h2',
+    'attributes' => [],
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $description_tag = [
+    'tag' => 'div',
+    'attributes' => [],
+  ];
+
+}
diff --git a/src/Plugin/CkeditorAccordionVariantBase.php b/src/Plugin/CkeditorAccordionVariantBase.php
new file mode 100644
index 0000000..5442a8c
--- /dev/null
+++ b/src/Plugin/CkeditorAccordionVariantBase.php
@@ -0,0 +1,79 @@
+<?php
+
+namespace Drupal\ckeditor_accordion\Plugin;
+
+use Drupal\Component\Plugin\PluginBase;
+
+/**
+ * Base class for CKEditor Accordion Variant plugins.
+ */
+abstract class CkeditorAccordionVariantBase extends PluginBase implements CkeditorAccordionVariantInterface {
+
+  /**
+   * The list tag to be used.
+   *
+   * @var array
+   */
+  protected $list_tag = [
+    'tag' => '',
+    'attributes' => [],
+  ];
+
+  /**
+   * The title tag to be used.
+   *
+   * @var array
+   */
+  protected $title_tag = [
+    'tag' => '',
+    'attributes' => [],
+  ];
+
+  /**
+   * The description tag to be used.
+   *
+   * @var array
+   */
+  protected $description_tag = [
+    'tag' => '',
+    'attributes' => [],
+  ];
+
+  /**
+   * Retrieves the CKEditor Accordion variant definition.
+   *
+   * @return array
+   *   An associative array containing tag and optional attributes for each type
+   *   of accordion's element (list, title, description):
+   *     - list
+   *       - tag
+   *       - attributes
+   *         - class
+   *           - class_name_1
+   *           - class_name_2
+   *           - ...
+   *         - ...
+   *     - title
+   *       - tag
+   *       - attributes
+   *     - description
+   *       - tag
+   *       - attributes
+   */
+  public function getVariantDefinition() {
+    $definition =  [
+      'list' => $this->list_tag,
+      'title' => $this->title_tag,
+      'description' => $this->description_tag,
+    ];
+
+    // Allow other modules to alter the variant definition.
+    $context = [
+      'variant_id' => $this->getBaseId(),
+    ];
+    \Drupal::moduleHandler()->alter('ckeditor_accordion_variant', $definition, $context);
+
+    return $definition;
+  }
+
+}
diff --git a/src/Plugin/CkeditorAccordionVariantInterface.php b/src/Plugin/CkeditorAccordionVariantInterface.php
new file mode 100644
index 0000000..7d76c89
--- /dev/null
+++ b/src/Plugin/CkeditorAccordionVariantInterface.php
@@ -0,0 +1,15 @@
+<?php
+
+namespace Drupal\ckeditor_accordion\Plugin;
+
+use Drupal\Component\Plugin\PluginInspectionInterface;
+
+/**
+ * Defines an interface for CKEditor Accordion Variant plugins.
+ */
+interface CkeditorAccordionVariantInterface extends PluginInspectionInterface {
+
+
+  // Add get/set methods for your plugin type here.
+
+}
diff --git a/src/Plugin/CkeditorAccordionVariantManager.php b/src/Plugin/CkeditorAccordionVariantManager.php
new file mode 100644
index 0000000..4da23e8
--- /dev/null
+++ b/src/Plugin/CkeditorAccordionVariantManager.php
@@ -0,0 +1,33 @@
+<?php
+
+namespace Drupal\ckeditor_accordion\Plugin;
+
+use Drupal\Core\Plugin\DefaultPluginManager;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+
+/**
+ * Provides the CKEditor Accordion Variant plugin manager.
+ */
+class CkeditorAccordionVariantManager extends DefaultPluginManager {
+
+
+  /**
+   * Constructs a new CkeditorAccordionVariantManager object.
+   *
+   * @param \Traversable $namespaces
+   *   An object that implements \Traversable which contains the root paths
+   *   keyed by the corresponding namespace to look for plugin implementations.
+   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   *   Cache backend instance to use.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler to invoke the alter hook with.
+   */
+  public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
+    parent::__construct('Plugin/CkeditorAccordionVariant', $namespaces, $module_handler, 'Drupal\ckeditor_accordion\Plugin\CkeditorAccordionVariantInterface', 'Drupal\ckeditor_accordion\Annotation\CkeditorAccordionVariant');
+
+    $this->alterInfo('ckeditor_accordion_ckeditor_accordion_variant_info');
+    $this->setCacheBackend($cache_backend, 'ckeditor_accordion_ckeditor_accordion_variant_plugins');
+  }
+
+}
diff --git a/src/Plugin/Filter/CKEditorAccordion.php b/src/Plugin/Filter/CKEditorAccordion.php
new file mode 100644
index 0000000..6445083
--- /dev/null
+++ b/src/Plugin/Filter/CKEditorAccordion.php
@@ -0,0 +1,147 @@
+<?php
+
+namespace Drupal\ckeditor_accordion\Plugin\Filter;
+
+use Drupal\filter\FilterProcessResult;
+use Drupal\filter\Plugin\FilterBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * @Filter(
+ *   id = "filter_ckeditor_accordion",
+ *   title = @Translation("CKEditor Accordion"),
+ *   description = @Translation("Allows to modify the output of the CKEditor accordions."),
+ *   type = Drupal\filter\Plugin\FilterInterface::TYPE_TRANSFORM_IRREVERSIBLE,
+ * )
+ */
+class CKEditorAccordion extends FilterBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function process($text, $langcode) {
+    // Get selected variant.
+    $config = \Drupal::config('ckeditor_accordion.settings');
+    $variant = \Drupal::service('plugin.manager.ckeditor_accordion_variant')->createInstance($config->get('variant'));
+    $defintion = $variant->getVariantDefinition();
+
+    $tags = [
+      'intial' => [
+        'list' => [
+          'tag' => 'dl',
+        ],
+        'title' => [
+          'tag' => 'dt',
+        ],
+        'description' => [
+          'tag' => 'dd',
+        ],
+      ],
+      'target' => $defintion,
+    ];
+
+    // Add the needed attributes for the accessible script.
+    $tags['target']['list']['attributes']['data-aria-accordion'] = 'data-aria-accordion';
+    $tags['target']['list']['attributes']['data-aria-accordion-allow-toggle'] = 'data-aria-accordion-allow-toggle';
+    $tags['target']['list']['attributes']['data-aria-accordion-panel-transition'] = 'data-aria-accordion-panel-transition';
+    $tags['target']['title']['attributes']['data-aria-accordion-heading'] = 'data-aria-accordion-heading';
+    $tags['target']['description']['attributes']['data-aria-accordion-panel'] = 'data-aria-accordion-panel';
+
+    if (!$config->get('collapse_all')) {
+      $tags['target']['list']['attributes']['data-aria-accordion-open-default'] = '';
+    }
+    if ($config->get('keep_rows_open')) {
+      $tags['target']['list']['attributes']['data-aria-accordion-allow-multiple'] = 'data-aria-accordion-allow-multiple';
+    }
+
+    $initial_class_name = 'ckeditor-accordion';
+
+    // Load the text into a dom object.
+    $dom = new \DOMDocument();
+    libxml_use_internal_errors(true);
+    $dom->loadHTML(mb_convert_encoding($text, 'HTML-ENTITIES', 'UTF-8'));
+    libxml_clear_errors();
+    $xpath = new \DOMXPath($dom);
+
+    // Find and replace title tags.
+    foreach ($xpath->query("//" . $tags['intial']['list']['tag'] . "[contains(@class, '$initial_class_name')]/" . $tags['intial']['title']['tag']) as $title) {
+      // Create the new title tag.
+      $this->replaceElementTag($dom, $title, $tags['target']['title']['tag'], $tags['target']['title']['attributes']);
+    }
+
+    // Find and replace description tags.
+    foreach ($xpath->query("//" . $tags['intial']['list']['tag'] . "[contains(@class, '$initial_class_name')]/" . $tags['intial']['description']['tag']) as $description) {
+      // Create the new description tag.
+      $this->replaceElementTag($dom, $description, $tags['target']['description']['tag'], $tags['target']['description']['attributes']);
+    }
+
+    // Find and replace list tags.
+    foreach ($xpath->query("//" . $tags['intial']['list']['tag'] . "[contains(@class, '$initial_class_name')]") as $accordion) {
+      // Remove the legacy class to avoid conflicts.
+      $classes = explode(' ', $accordion->getAttribute('class'));
+      if (($key = array_search($initial_class_name, $classes)) !== FALSE) {
+        unset($classes[$key]);
+      }
+      empty($classes) ? $accordion->removeAttribute('class') : $accordion->setAttribute('class', implode(' ', $classes));
+
+      // Create the new list tag.
+      $this->replaceElementTag($dom, $accordion, $tags['target']['list']['tag'], $tags['target']['list']['attributes']);
+    }
+
+    $new_text = $dom->saveXml($dom->documentElement);
+
+    return new FilterProcessResult($new_text);
+  }
+
+  /**
+   * Replaces an element's tag with a new one.
+   *
+   * @param \DOMDocument $dom
+   *   The DOMDocument the element is attached to.
+   *
+   * @param \DOMElement $element
+   *   The element for which the tag needs to be replaced.
+   *
+   * @param string $new_tag
+   *   The new tag to be used.
+   *
+   * @param array $new_attributes
+   *   The attributes to be added to the new tag as key => value.
+   *
+   * @param bool $preserve_attributes
+   *   Wether to keep attributes from the given element in the new one.
+   */
+  protected function replaceElementTag(\DOMDocument &$dom, \DOMElement $element, string $new_tag, array $new_attributes = [], $preserve_attributes = TRUE) {
+    $new_element = $dom->createElement($new_tag);
+
+    // Add new attributes to the new element.
+    foreach ($new_attributes as $attribute => $value) {
+      if (is_array($value)) {
+        $value = implode(' ', $value);
+      }
+      $new_element->setAttribute($attribute, $value);
+    }
+
+    if ($preserve_attributes) {
+      // Add all attributes from the intial element.
+      foreach ($element->attributes as $attribute) {
+        $value = $attribute->nodeValue;
+
+        // Make sure we keep the intial attribute value if one exists.
+        if (!empty($new_element->getAttribute($attribute->nodeName))) {
+          $value = implode(' ', [$new_element->getAttribute($attribute->nodeName), $attribute->nodeValue]);
+        }
+
+        $new_element->setAttribute($attribute->nodeName, $value);
+      }
+    }
+
+    // Move the children of the current node to the new one
+    while ($element->hasChildNodes()) {
+      $new_element->appendChild($element->firstChild);
+    }
+
+    // Replace the current element with the new one.
+    $element->parentNode->replaceChild($new_element, $element);
+  }
+}
--
GitLab


From ff51cdbae8458e2c7954ef0c960c940f14024dd0 Mon Sep 17 00:00:00 2001
From: sascha <sascha.meissner@werk21.de>
Date: Thu, 1 Feb 2024 14:02:32 +0100
Subject: [PATCH 02/11] Issue #3124167: Updated readme to also enable
 CKEditorAccordion Filter in text-format

---
 README.md | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index c3d8e28..d9a196c 100644
--- a/README.md
+++ b/README.md
@@ -28,7 +28,8 @@ INSTALLATION:
    Text formats and editors (admin/config/content/formats)
 5. Edit a text format's settings (usually Basic HTML)
 6. Drag n Drop the Accordion -button to the toolbar to show it to the editors
-7. Review available options at /admin/config/content/ckeditor-accordion
+7. At "Enabled Filters", enable "CKEditor Accordion"
+8. Review available options at /admin/config/content/ckeditor-accordion


 TODO:
--
GitLab


From e2cb86119373fb652aa299efbbddb57556760c60 Mon Sep 17 00:00:00 2001
From: sascha <sascha.meissner@werk21.de>
Date: Fri, 2 Feb 2024 11:27:27 +0100
Subject: [PATCH 03/11] Issue #3124167: Add case-sensititve correct
 library-name WAI-ARIA-Patterns-And-Widgets

---
 ckeditor_accordion.module | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/ckeditor_accordion.module b/ckeditor_accordion.module
index 7d7ba81..aad2d4e 100644
--- a/ckeditor_accordion.module
+++ b/ckeditor_accordion.module
@@ -12,7 +12,7 @@ function ckeditor_accordion_page_attachments_alter(array &$page) {
   $config = \Drupal::config('ckeditor_accordion.settings');

 // Attaches accordion accessible style library.
-  if (file_exists(DRUPAL_ROOT . '/libraries/wai-aria-patterns-and-widgets')) {
+  if (file_exists(DRUPAL_ROOT . '/libraries/WAI-ARIA-Patterns-And-Widgets')) {
     $page['#attached']['library'][] = 'ckeditor_accordion/accordion_accessible_style';
   }
   else {
--
GitLab


From bad4be78caf884001b6a8adad76425de160324fb Mon Sep 17 00:00:00 2001
From: sascha <sascha.meissner@werk21.de>
Date: Fri, 2 Feb 2024 11:33:35 +0100
Subject: [PATCH 04/11] Issue #3124167: Also use case-sensititve correct
 library-name in libraries.yml ...

---
 ckeditor_accordion.libraries.yml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/ckeditor_accordion.libraries.yml b/ckeditor_accordion.libraries.yml
index 3e81f41..a1f89ba 100644
--- a/ckeditor_accordion.libraries.yml
+++ b/ckeditor_accordion.libraries.yml
@@ -42,6 +42,6 @@ libraries.smillart.wai-aria-patterns-and-widgets:
     gpl-compatible: true
   css:
     theme:
-      /libraries/wai-aria-patterns-and-widgets/dist/accordion/css/accordion.min.css: {}
+      /libraries/WAI-ARIA-Patterns-And-Widgets/dist/accordion/css/accordion.min.css: {}
   js:
-    /libraries/wai-aria-patterns-and-widgets/dist/accordion/js/accordion.min.js: {}
+    /libraries/WAI-ARIA-Patterns-And-Widgets/dist/accordion/js/accordion.min.js: {}
--
GitLab


From 1ecb3af0084768244fb2dab46ad323458558ec9c Mon Sep 17 00:00:00 2001
From: sascha <sascha.meissner@werk21.de>
Date: Fri, 2 Feb 2024 11:40:31 +0100
Subject: [PATCH 05/11] Issue #3124167: Fix DOMDocument::loadHTML(): Argument
 #1 () must not be empty ... when source is empty

---
 src/Plugin/Filter/CKEditorAccordion.php | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/src/Plugin/Filter/CKEditorAccordion.php b/src/Plugin/Filter/CKEditorAccordion.php
index 6445083..ec5a81a 100644
--- a/src/Plugin/Filter/CKEditorAccordion.php
+++ b/src/Plugin/Filter/CKEditorAccordion.php
@@ -20,6 +20,7 @@ class CKEditorAccordion extends FilterBase {
    * {@inheritdoc}
    */
   public function process($text, $langcode) {
+    kint("AHHDSADHJASHJDSA");
     // Get selected variant.
     $config = \Drupal::config('ckeditor_accordion.settings');
     $variant = \Drupal::service('plugin.manager.ckeditor_accordion_variant')->createInstance($config->get('variant'));
@@ -59,7 +60,11 @@ class CKEditorAccordion extends FilterBase {
     // Load the text into a dom object.
     $dom = new \DOMDocument();
     libxml_use_internal_errors(true);
-    $dom->loadHTML(mb_convert_encoding($text, 'HTML-ENTITIES', 'UTF-8'));
+    $text = mb_convert_encoding($text, 'HTML-ENTITIES', 'UTF-8');
+    if (empty($text)) {
+      return new FilterProcessResult($text);
+    }
+    $dom->loadHTML($text);
     libxml_clear_errors();
     $xpath = new \DOMXPath($dom);

--
GitLab


From 5a116d21902d08c5ff624e3904bf78934278f79b Mon Sep 17 00:00:00 2001
From: sascha <sascha.meissner@werk21.de>
Date: Fri, 2 Feb 2024 11:43:06 +0100
Subject: [PATCH 06/11] Issue #3124167: Remove accidentially commited debug
 message ...

---
 src/Plugin/Filter/CKEditorAccordion.php | 1 -
 1 file changed, 1 deletion(-)

diff --git a/src/Plugin/Filter/CKEditorAccordion.php b/src/Plugin/Filter/CKEditorAccordion.php
index ec5a81a..71a3b08 100644
--- a/src/Plugin/Filter/CKEditorAccordion.php
+++ b/src/Plugin/Filter/CKEditorAccordion.php
@@ -20,7 +20,6 @@ class CKEditorAccordion extends FilterBase {
    * {@inheritdoc}
    */
   public function process($text, $langcode) {
-    kint("AHHDSADHJASHJDSA");
     // Get selected variant.
     $config = \Drupal::config('ckeditor_accordion.settings');
     $variant = \Drupal::service('plugin.manager.ckeditor_accordion_variant')->createInstance($config->get('variant'));
--
GitLab


From f3fc51508df61a1d00abe78d91d267842b769198 Mon Sep 17 00:00:00 2001
From: sascha <sascha.meissner@werk21.de>
Date: Mon, 5 Feb 2024 14:02:13 +0100
Subject: [PATCH 07/11] Issue #3124167: added missing fix from patch#30

---
 src/Plugin/Filter/CKEditorAccordion.php | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/Plugin/Filter/CKEditorAccordion.php b/src/Plugin/Filter/CKEditorAccordion.php
index 71a3b08..497eaca 100644
--- a/src/Plugin/Filter/CKEditorAccordion.php
+++ b/src/Plugin/Filter/CKEditorAccordion.php
@@ -93,6 +93,9 @@ class CKEditorAccordion extends FilterBase {
     }

     $new_text = $dom->saveXml($dom->documentElement);
+    // Strip out html and body tags.
+    $new_text = str_replace('<html><body>', '', $new_text);
+    $new_text = str_replace('</body></html>', '', $new_text);

     return new FilterProcessResult($new_text);
   }
--
GitLab


From 855828f62ce8a54dc7cf9c67384bb2592af67457 Mon Sep 17 00:00:00 2001
From: sascha <sascha.meissner@werk21.de>
Date: Fri, 9 Feb 2024 15:27:13 +0100
Subject: [PATCH 08/11] Issue #3124167: Use Drupals HTML utility to fix various
 errors with DomDocument->loadHtml

---
 src/Plugin/Filter/CKEditorAccordion.php | 15 +++++----------
 1 file changed, 5 insertions(+), 10 deletions(-)

diff --git a/src/Plugin/Filter/CKEditorAccordion.php b/src/Plugin/Filter/CKEditorAccordion.php
index 497eaca..e765399 100644
--- a/src/Plugin/Filter/CKEditorAccordion.php
+++ b/src/Plugin/Filter/CKEditorAccordion.php
@@ -5,6 +5,7 @@ namespace Drupal\ckeditor_accordion\Plugin\Filter;
 use Drupal\filter\FilterProcessResult;
 use Drupal\filter\Plugin\FilterBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Component\Utility\Html;

 /**
  * @Filter(
@@ -55,16 +56,13 @@ class CKEditorAccordion extends FilterBase {
     }

     $initial_class_name = 'ckeditor-accordion';
-
-    // Load the text into a dom object.
-    $dom = new \DOMDocument();
-    libxml_use_internal_errors(true);
     $text = mb_convert_encoding($text, 'HTML-ENTITIES', 'UTF-8');
     if (empty($text)) {
       return new FilterProcessResult($text);
     }
-    $dom->loadHTML($text);
-    libxml_clear_errors();
+
+    // Load the text into a dom object.
+    $dom = Html::load($text);
     $xpath = new \DOMXPath($dom);

     // Find and replace title tags.
@@ -92,10 +90,7 @@ class CKEditorAccordion extends FilterBase {
       $this->replaceElementTag($dom, $accordion, $tags['target']['list']['tag'], $tags['target']['list']['attributes']);
     }

-    $new_text = $dom->saveXml($dom->documentElement);
-    // Strip out html and body tags.
-    $new_text = str_replace('<html><body>', '', $new_text);
-    $new_text = str_replace('</body></html>', '', $new_text);
+    $new_text = Html::serialize($dom);

     return new FilterProcessResult($new_text);
   }
--
GitLab


From b9e1931dbae15cf75f4467d78627142f9cd35f0a Mon Sep 17 00:00:00 2001
From: Batuhan Celikbas <batuhan.celikbas@finalist.nl>
Date: Thu, 21 Mar 2024 14:50:51 +0100
Subject: [PATCH 09/11] Issue #3124167: Fixed PHP 8.2 Deprecation error for
 mb_convert_encoding

Deprecated function: mb_convert_encoding(): Handling HTML entities via mbstring is deprecated;
---
 src/Plugin/Filter/CKEditorAccordion.php | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Plugin/Filter/CKEditorAccordion.php b/src/Plugin/Filter/CKEditorAccordion.php
index e765399..b61458e 100644
--- a/src/Plugin/Filter/CKEditorAccordion.php
+++ b/src/Plugin/Filter/CKEditorAccordion.php
@@ -56,7 +56,7 @@ class CKEditorAccordion extends FilterBase {
     }

     $initial_class_name = 'ckeditor-accordion';
-    $text = mb_convert_encoding($text, 'HTML-ENTITIES', 'UTF-8');
+    $text = htmlspecialchars_decode(iconv( 'UTF-8', 'ISO-8859-1', htmlentities($text, ENT_COMPAT, 'UTF-8')), ENT_QUOTES);
     if (empty($text)) {
       return new FilterProcessResult($text);
     }
--
GitLab


From 220e8cc7faca756a4b57fd6f1f952882e0ee2755 Mon Sep 17 00:00:00 2001
From: Arantxio Gottmers <arantxio.gottmers@finalist.nl>
Date: Wed, 22 May 2024 13:26:36 +0200
Subject: [PATCH 10/11] Issue #3124167: Fix Detected an illegal character in
 input string

---
 src/Plugin/Filter/CKEditorAccordion.php | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Plugin/Filter/CKEditorAccordion.php b/src/Plugin/Filter/CKEditorAccordion.php
index b61458e..1609447 100644
--- a/src/Plugin/Filter/CKEditorAccordion.php
+++ b/src/Plugin/Filter/CKEditorAccordion.php
@@ -56,7 +56,7 @@ class CKEditorAccordion extends FilterBase {
     }

     $initial_class_name = 'ckeditor-accordion';
-    $text = htmlspecialchars_decode(iconv( 'UTF-8', 'ISO-8859-1', htmlentities($text, ENT_COMPAT, 'UTF-8')), ENT_QUOTES);
+    $text = mb_encode_numericentity($text, [0x80, 0x10FFFF, 0, ~0], 'UTF-8');
     if (empty($text)) {
       return new FilterProcessResult($text);
     }
--
GitLab


From df3c1110b8a1437bac5c0498304bad8c995dbef7 Mon Sep 17 00:00:00 2001
From: Oden <hello@odensc.com>
Date: Tue, 15 Oct 2024 16:36:00 -0700
Subject: [PATCH 11/11] Issue #3124167: Handle lowercase library names (e.g.
 when WAI ARIA library is installed with Composer)

---
 ckeditor_accordion.module | 19 +++++++++++++++++--
 1 file changed, 17 insertions(+), 2 deletions(-)

diff --git a/ckeditor_accordion.module b/ckeditor_accordion.module
index aad2d4e..e44f950 100644
--- a/ckeditor_accordion.module
+++ b/ckeditor_accordion.module
@@ -5,14 +5,29 @@
  * Functionality for CKEditor Accordion.
  */

+ /**
+ * Implements hook_library_info_alter().
+ */
+function ckeditor_accordion_library_info_alter(&$libraries, $extension) {
+  $library = 'libraries.smillart.wai-aria-patterns-and-widgets';
+  if ($extension === 'ckeditor_accordion' && isset($libraries[$library])) {
+    // If the library is installed in a lowercase directory (e.g. with Composer), override the filenames from capitalized.
+    if (file_exists(DRUPAL_ROOT . '/libraries/wai-aria-patterns-and-widgets')) {
+      $libraries[$library]['css']['theme'] = ['/libraries/wai-aria-patterns-and-widgets/dist/accordion/css/accordion.min.css' => []];
+      $libraries[$library]['js'] = ['/libraries/wai-aria-patterns-and-widgets/dist/accordion/js/accordion.min.js' => []];
+    }
+  }
+}
+
 /**
  * Implements hook_page_attachments_alter().
  */
 function ckeditor_accordion_page_attachments_alter(array &$page) {
   $config = \Drupal::config('ckeditor_accordion.settings');

-// Attaches accordion accessible style library.
-  if (file_exists(DRUPAL_ROOT . '/libraries/WAI-ARIA-Patterns-And-Widgets')) {
+  // Attaches accordion accessible style library.
+  if (file_exists(DRUPAL_ROOT . '/libraries/WAI-ARIA-Patterns-And-Widgets')
+    || file_exists(DRUPAL_ROOT . '/libraries/wai-aria-patterns-and-widgets')) {
     $page['#attached']['library'][] = 'ckeditor_accordion/accordion_accessible_style';
   }
   else {
--
GitLab
