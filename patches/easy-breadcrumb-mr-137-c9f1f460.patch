From c9f1f460afd9d68f6a860d74b70c098554ffaa78 Mon Sep 17 00:00:00 2001
From: Oden <hello@odensc.com>
Date: Tue, 15 Oct 2024 13:47:49 -0700
Subject: [PATCH] Issue #3480899: Fix custom path regression

---
 src/EasyBreadcrumbBuilder.php                 |  11 +-
 .../EasyBreadcrumbGeneralSettingsForm.php     |   2 +-
 src/TitleResolver.php                         |  68 +++---
 .../easy_breadcrumb_test.routing.yml          |   7 +
 .../src/Kernel/EasyBreadcrumbBuilderTest.php  | 197 ++++++++++++++++++
 5 files changed, 250 insertions(+), 35 deletions(-)

diff --git a/src/EasyBreadcrumbBuilder.php b/src/EasyBreadcrumbBuilder.php
index 7790b32..d292fd0 100644
--- a/src/EasyBreadcrumbBuilder.php
+++ b/src/EasyBreadcrumbBuilder.php
@@ -288,7 +288,7 @@ class EasyBreadcrumbBuilder implements BreadcrumbBuilderInterface {
     // General path-based breadcrumbs. Use the actual request path, prior to
     // resolving path aliases so the breadcrumb can be defined by creating a
     // hierarchy of path aliases.
-    $path = rtrim($this->context->getPathInfo(), '/');
+    $path = trim($this->context->getPathInfo(), '/');
 
     // Ensure that Views AJAX requests do not seep into the breadcrumb.  This
     // can be a problem when the breadcrumb exists inside the view header.
@@ -351,7 +351,6 @@ class EasyBreadcrumbBuilder implements BreadcrumbBuilderInterface {
         // Get $title|[$url] pairs from $values.
         foreach ($values as $pair) {
           $settings = explode("|", $pair);
-          $title = Html::decodeEntities(Xss::filter(trim($settings[0])));
           $use_current_page_title = strpos($settings[0], '<title>') !== FALSE;
 
           // If the custom title uses the current page title, fetch it.
@@ -368,7 +367,7 @@ class EasyBreadcrumbBuilder implements BreadcrumbBuilderInterface {
                 if ($this->config->get(EasyBreadcrumbConstants::TITLE_FROM_PAGE_WHEN_AVAILABLE)) {
                   $normalized_title = $this->normalizeText($this->getTitleString($route_request, $route_match, $replacedTitles));
                   // Replace <title> tag in the text provided for the segment.
-                  $title = str_replace('<title>', $normalized_title, $settings[0]);
+                  $settings[0] = str_replace('<title>', $normalized_title, $settings[0]);
                 }
               }
             }
@@ -380,10 +379,12 @@ class EasyBreadcrumbBuilder implements BreadcrumbBuilderInterface {
           // substitute them out for the corresponding matched strings.
           elseif ($is_regex) {
             foreach ($regex_group_matches as $group_num => $captured_str) {
-              $title = str_replace('$' . ($group_num + 1), urlencode($captured_str), $title);
+              $settings[0] = str_replace('$' . ($group_num + 1), urlencode($captured_str), $settings[0]);
             }
           }
 
+          $title = Html::decodeEntities(Xss::filter(trim($settings[0])));
+
           // Get URL if it is provided.
           $url = '';
           if (isset($settings[1])) {
@@ -778,7 +779,7 @@ class EasyBreadcrumbBuilder implements BreadcrumbBuilderInterface {
    */
   public function getTitleString(Request $route_request, RouteMatchInterface $route_match, array $replacedTitles) {
     try {
-      $title = $this->titleResolver->getTitle($route_request, $route_match->getRouteObject());
+      $title = $this->titleResolver->getBestTitle($route_request, $route_match);
     }
     catch (\InvalidArgumentException $exception) {
       $title = NULL;
diff --git a/src/Form/EasyBreadcrumbGeneralSettingsForm.php b/src/Form/EasyBreadcrumbGeneralSettingsForm.php
index 3039db6..c05d706 100644
--- a/src/Form/EasyBreadcrumbGeneralSettingsForm.php
+++ b/src/Form/EasyBreadcrumbGeneralSettingsForm.php
@@ -265,7 +265,7 @@ class EasyBreadcrumbGeneralSettingsForm extends ConfigFormBase {
     $details_advanced[EasyBreadcrumbConstants::CUSTOM_PATHS] = [
       '#type' => 'textarea',
       '#title' => $this->t('Paths to replace with custom breadcrumbs'),
-      '#description' => $this->t('Enter a line separated list of internal paths followed by breadcrumb pattern. Separate crumbs from their path with a vertical bar ("|"). Separate crumbs with double-colon ("::"). Omit the URL to display an unlinked crumb. Fields will be trimmed to remove extra start/end spaces, so you can use them to help format your input, if desired. Replaced Titles will not be processed on custom paths. Excluded paths listed here will have breadcrumbs added. Examples (with and without extra spacing):<br><code>/news/archive/site_launched  ::  News | /news  ::  Archive | /news/archive  ::  Site Launched<br>/your/path::LinkedCrumb1|url1::LinkedCrumb2|url2::UnlinkedCrumb3</code><br><p>It is also possible to express the path to be matched as a <a href="https://www.php.net/manual/en/book.pcre.php" target="_blank">regex expression</a>. "regex!" must be added to the start of the path to match in order for it to be interpreted as regex:<br><code>regex!/news/archive/\d{4} ::  News | /news  ::  Archive | /news/archive</code><p>Expressions can even include matching groups which can be referenced in the path of a segment path:<br><code>regex!/groups/([^/]*)/info :: Groups | /groups :: Group | /groups/$1</code></p><p>To use the current page title as a title component, use <code>&lt;title&gt;</code></p>'),
+      '#description' => $this->t('Enter a line separated list of internal paths followed by breadcrumb pattern. Separate crumbs from their path with a vertical bar ("|"). Separate crumbs with double-colon ("::"). Omit the URL to display an unlinked crumb. Fields will be trimmed to remove extra start/end spaces, so you can use them to help format your input, if desired. Replaced Titles will not be processed on custom paths. Excluded paths listed here will have breadcrumbs added. Examples (with and without extra spacing):<br><code>/news/archive/site_launched  ::  News | /news  ::  Archive | /news/archive  ::  Site Launched<br>/your/path::LinkedCrumb1|url1::LinkedCrumb2|url2::UnlinkedCrumb3</code><br><p>It is also possible to express the path to be matched as a <a href="https://www.php.net/manual/en/book.pcre.php" target="_blank">regex expression</a>. "regex!" must be added to the start of the path to match in order for it to be interpreted as regex:<br><code>regex!/news/archive/\d{4} ::  News | /news  ::  Archive | /news/archive</code><p>Expressions can even include matching groups which can be referenced in the path of a segment path:<br><code>regex!/groups/([^/]*)/info :: Groups | /groups :: Group | /groups/$1</code></p><p>To use the current page title as a title component, use <code>&lt;title&gt;</code> (Must have <strong>"Use the real page title when available"</strong> enabled)</p>'),
       '#default_value' => $custom_paths,
     ];
 
diff --git a/src/TitleResolver.php b/src/TitleResolver.php
index 6f43966..ed0a171 100644
--- a/src/TitleResolver.php
+++ b/src/TitleResolver.php
@@ -9,12 +9,11 @@ use Drupal\Core\Controller\TitleResolver as ControllerTitleResolver;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Core\TypedData\TranslatableInterface;
-use Drupal\Core\Url;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface;
-use Symfony\Component\Routing\Route;
 
 /**
  * Resolves page titles for controllers based on various criteria.
@@ -66,36 +65,47 @@ class TitleResolver extends ControllerTitleResolver {
   }
 
   /**
-   * {@inheritdoc}
+   * Returns a page title based on the alternative title field if set, otherwise
+   * falling back to core's TitleResolver logic.
+   *
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *   The request object passed to the title callback.
+   * @param Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   The route match to fetch the title from.
+   *
+   * @return array|string|\Stringable|null
+   *   The title for the route.
    */
-  public function getTitle(Request $request, Route $route) {
-    $url = Url::fromUri("internal:" . $request->getRequestUri());
-    $entity = NULL;
-    try {
-      $route_parts = explode(".", $url->getRouteName());
-      $params = $url->getRouteParameters();
-      if (!empty($route_parts[0]) && $route_parts[0] === 'entity' && count($route_parts) >= 3 && $route_parts[2] === 'canonical') {
-        $entity_type = $route_parts[1];
-        if (isset($params[$entity_type])) {
-          $entity = $this->entityTypeManager->getStorage($entity_type)->load($params[$entity_type]);
+  public function getBestTitle(Request $request, RouteMatchInterface $route_match) {
+    $alternative_title_field = $this->config->get(EasyBreadcrumbConstants::ALTERNATIVE_TITLE_FIELD);
+    // If an alternative title field is set, load the entity if present and use that field.
+    if ($alternative_title_field) {
+      $entity = NULL;
+      try {
+        $route_parts = explode(".", $route_match->getRouteName());
+        $params = $route_match->getParameters();
+        if (!empty($route_parts[0]) && $route_parts[0] === 'entity' && count($route_parts) >= 3 && $route_parts[2] === 'canonical') {
+          $entity_type = $route_parts[1];
+          if (isset($params[$entity_type])) {
+            $entity = $this->entityTypeManager->getStorage($entity_type)->load($params[$entity_type]);
+          }
+        }
+      }
+      catch (\UnexpectedValueException $e) {
+        // Do nothing for now.
+      }
+      if ($entity !== NULL) {
+        $current_langcode = $this->languageManager->getCurrentLanguage()->getId();
+        if ($entity instanceof TranslatableInterface && $entity->hasTranslation($current_langcode)) {
+          $entity = $entity->getTranslation($current_langcode);
+        }
+        if ($entity instanceof FieldableEntityInterface && $entity->hasField($alternative_title_field) && !$entity->get($alternative_title_field)
+          ->isEmpty()) {
+          return Xss::filter($entity->get($alternative_title_field)->value);
         }
       }
     }
-    catch (\UnexpectedValueException $e) {
-      // Do nothing for now.
-    }
-    if ($entity !== NULL) {
-      $current_langcode = $this->languageManager->getCurrentLanguage()->getId();
-      if ($entity instanceof TranslatableInterface && $entity->hasTranslation($current_langcode)) {
-        $entity = $entity->getTranslation($current_langcode);
-      }
-      $alternative_title_field = $this->config->get(EasyBreadcrumbConstants::ALTERNATIVE_TITLE_FIELD);
-      if ($entity instanceof FieldableEntityInterface && $entity->hasField($alternative_title_field) && !$entity->get($alternative_title_field)
-        ->isEmpty()) {
-        return Xss::filter($entity->get($alternative_title_field)->value);
-      }
-    }
-    return parent::getTitle($request, $route);
-  }
 
+    return parent::getTitle($request, $route_match->getRouteObject());
+  }
 }
diff --git a/tests/modules/easy_breadcrumb_test/easy_breadcrumb_test.routing.yml b/tests/modules/easy_breadcrumb_test/easy_breadcrumb_test.routing.yml
index 56f5a4d..d857a1f 100644
--- a/tests/modules/easy_breadcrumb_test/easy_breadcrumb_test.routing.yml
+++ b/tests/modules/easy_breadcrumb_test/easy_breadcrumb_test.routing.yml
@@ -23,3 +23,10 @@ easy_breadcrumb_test.title_render_array:
   defaults:
     _controller: '\Drupal\easy_breadcrumb_test\Controller\TestRouteController::page'
     _title_callback: '\Drupal\easy_breadcrumb_test\Controller\TestRouteController::pageTitleRender'
+easy_breadcrumb_test.custom_path:
+  path: '/test/easy-breadcrumb-custom-path'
+  requirements:
+    _access: 'TRUE'
+  defaults:
+    _title: 'Easy Breadcrumb Custom Path Test'
+    _controller: '\Drupal\easy_breadcrumb_test\Controller\TestRouteController::page'
diff --git a/tests/src/Kernel/EasyBreadcrumbBuilderTest.php b/tests/src/Kernel/EasyBreadcrumbBuilderTest.php
index 0ccf6bb..8dc1408 100644
--- a/tests/src/Kernel/EasyBreadcrumbBuilderTest.php
+++ b/tests/src/Kernel/EasyBreadcrumbBuilderTest.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\Tests\easy_breadcrumb\Kernel;
 
+use Drupal\Core\Routing\NullRouteMatch;
 use Drupal\Core\Routing\RequestContext;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\Core\Url;
@@ -113,4 +114,200 @@ class EasyBreadcrumbBuilderTest extends KernelTestBase {
     $this->assertIsString($result);
   }
 
+  /**
+   * Tests a custom path override with an unrouted URL. (Issue #3480899)
+   */
+  public function testCustomPathWithUnroutedUrl() {
+    \Drupal::configFactory()->getEditable(EasyBreadcrumbConstants::MODULE_SETTINGS)
+      ->set(EasyBreadcrumbConstants::CUSTOM_PATHS, '/test/easy-breadcrumb-custom-path :: Part 1 | /part-1')
+      ->save();
+
+    $request = Request::create('/test/easy-breadcrumb-custom-path');
+    $request_context = new RequestContext();
+    $request_context->fromRequest($request);
+
+    $breadcrumb_builder = new EasyBreadcrumbBuilder($request_context,
+      \Drupal::service('access_manager'),
+      \Drupal::service('router'),
+      \Drupal::service('request_stack'),
+      \Drupal::service('path_processor_manager'),
+      \Drupal::service('config.factory'),
+      \Drupal::service('easy_breadcrumb.title_resolver'),
+      \Drupal::service('current_user'),
+      \Drupal::service('path.current'),
+      \Drupal::service('plugin.manager.menu.link'),
+      \Drupal::service('language_manager'),
+      \Drupal::service('entity_type.manager'),
+      \Drupal::service('entity.repository'),
+      \Drupal::service('logger.factory'),
+      \Drupal::service('messenger'),
+      \Drupal::service('module_handler'),
+      \Drupal::service('path.matcher')
+    );
+
+    $result = $breadcrumb_builder->build(new NullRouteMatch());
+    $this->assertCount(1, $result->getLinks());
+    $this->assertEquals('Part 1', $result->getLinks()[0]->getText());
+    $this->assertEquals('base:part-1', $result->getLinks()[0]->getUrl()->toUriString());
+  }
+
+  /**
+   * Tests a custom path override with a route match. (Issue #3480899)
+   */
+  public function testCustomPathWithRoutedUrl() {
+    \Drupal::configFactory()->getEditable(EasyBreadcrumbConstants::MODULE_SETTINGS)
+      ->set(EasyBreadcrumbConstants::CUSTOM_PATHS, '/test/easy-breadcrumb-custom-path :: Part 1 | /part-1')
+      ->save();
+
+    $route_name = 'easy_breadcrumb_test.custom_path';
+
+    $url = Url::fromRoute($route_name);
+    $request_context = new RequestContext();
+
+    $breadcrumb_builder = new EasyBreadcrumbBuilder($request_context,
+      \Drupal::service('access_manager'),
+      \Drupal::service('router'),
+      \Drupal::service('request_stack'),
+      \Drupal::service('path_processor_manager'),
+      \Drupal::service('config.factory'),
+      \Drupal::service('easy_breadcrumb.title_resolver'),
+      \Drupal::service('current_user'),
+      \Drupal::service('path.current'),
+      \Drupal::service('plugin.manager.menu.link'),
+      \Drupal::service('language_manager'),
+      \Drupal::service('entity_type.manager'),
+      \Drupal::service('entity.repository'),
+      \Drupal::service('logger.factory'),
+      \Drupal::service('messenger'),
+      \Drupal::service('module_handler'),
+      \Drupal::service('path.matcher')
+    );
+
+    $router = \Drupal::service('router.no_access_checks');
+    $route_match = new RouteMatch($route_name, $router->match($url->getInternalPath())['_route_object']);
+    $result = $breadcrumb_builder->build($route_match);
+    $this->assertCount(1, $result->getLinks());
+    $this->assertEquals('Part 1', $result->getLinks()[0]->getText());
+    $this->assertEquals('base:part-1', $result->getLinks()[0]->getUrl()->toUriString());
+  }
+
+  /**
+   * Tests a custom path override with regex.
+   */
+  public function testCustomPathWithRegex() {
+    \Drupal::configFactory()->getEditable(EasyBreadcrumbConstants::MODULE_SETTINGS)
+      ->set(EasyBreadcrumbConstants::CUSTOM_PATHS, 'regex!/test/.+ :: Part 1 | /part-1')
+      ->save();
+
+    $request = Request::create('/test/easy-breadcrumb-custom-path');
+    $request_context = new RequestContext();
+    $request_context->fromRequest($request);
+
+    $breadcrumb_builder = new EasyBreadcrumbBuilder($request_context,
+      \Drupal::service('access_manager'),
+      \Drupal::service('router'),
+      \Drupal::service('request_stack'),
+      \Drupal::service('path_processor_manager'),
+      \Drupal::service('config.factory'),
+      \Drupal::service('easy_breadcrumb.title_resolver'),
+      \Drupal::service('current_user'),
+      \Drupal::service('path.current'),
+      \Drupal::service('plugin.manager.menu.link'),
+      \Drupal::service('language_manager'),
+      \Drupal::service('entity_type.manager'),
+      \Drupal::service('entity.repository'),
+      \Drupal::service('logger.factory'),
+      \Drupal::service('messenger'),
+      \Drupal::service('module_handler'),
+      \Drupal::service('path.matcher')
+    );
+
+    $result = $breadcrumb_builder->build(new NullRouteMatch());
+    $this->assertCount(1, $result->getLinks());
+    $this->assertEquals('Part 1', $result->getLinks()[0]->getText());
+    $this->assertEquals('base:part-1', $result->getLinks()[0]->getUrl()->toUriString());
+  }
+
+    /**
+   * Tests a custom path override with title replacement and an unrouted url. (Issue #3271576)
+   */
+  public function testCustomPathWithTitleAndUnroutedUrl() {
+    \Drupal::configFactory()->getEditable(EasyBreadcrumbConstants::MODULE_SETTINGS)
+      ->set(EasyBreadcrumbConstants::CUSTOM_PATHS, 'regex!/test/.+ :: Part 1 | /part-1 :: <title>')
+      ->set(EasyBreadcrumbConstants::TITLE_FROM_PAGE_WHEN_AVAILABLE, true)
+      ->save();
+
+    $request = Request::create('/test/easy-breadcrumb-custom-path');
+    $request_context = new RequestContext();
+    $request_context->fromRequest($request);
+
+    $breadcrumb_builder = new EasyBreadcrumbBuilder($request_context,
+      \Drupal::service('access_manager'),
+      \Drupal::service('router'),
+      \Drupal::service('request_stack'),
+      \Drupal::service('path_processor_manager'),
+      \Drupal::service('config.factory'),
+      \Drupal::service('easy_breadcrumb.title_resolver'),
+      \Drupal::service('current_user'),
+      \Drupal::service('path.current'),
+      \Drupal::service('plugin.manager.menu.link'),
+      \Drupal::service('language_manager'),
+      \Drupal::service('entity_type.manager'),
+      \Drupal::service('entity.repository'),
+      \Drupal::service('logger.factory'),
+      \Drupal::service('messenger'),
+      \Drupal::service('module_handler'),
+      \Drupal::service('path.matcher')
+    );
+
+    $result = $breadcrumb_builder->build(new NullRouteMatch());
+    $this->assertCount(2, $result->getLinks());
+    $this->assertEquals('Part 1', $result->getLinks()[0]->getText());
+    $this->assertEquals('base:part-1', $result->getLinks()[0]->getUrl()->toUriString());
+    $this->assertEquals('Easy Breadcrumb Custom Path Test', $result->getLinks()[1]->getText());
+    $this->assertEquals('route:<none>', $result->getLinks()[1]->getUrl()->toUriString());
+  }
+
+  /**
+   * Tests a custom path override with title replacement and a route match. (Issue #3271576)
+   */
+  public function testCustomPathWithTitleAndRoutedUrl() {
+    \Drupal::configFactory()->getEditable(EasyBreadcrumbConstants::MODULE_SETTINGS)
+      ->set(EasyBreadcrumbConstants::CUSTOM_PATHS, 'regex!/test/.+ :: Part 1 | /part-1 :: <title>')
+      ->set(EasyBreadcrumbConstants::TITLE_FROM_PAGE_WHEN_AVAILABLE, true)
+      ->save();
+
+    $route_name = 'easy_breadcrumb_test.custom_path';
+
+    $url = Url::fromRoute($route_name);
+    $request_context = new RequestContext();
+
+    $breadcrumb_builder = new EasyBreadcrumbBuilder($request_context,
+      \Drupal::service('access_manager'),
+      \Drupal::service('router'),
+      \Drupal::service('request_stack'),
+      \Drupal::service('path_processor_manager'),
+      \Drupal::service('config.factory'),
+      \Drupal::service('easy_breadcrumb.title_resolver'),
+      \Drupal::service('current_user'),
+      \Drupal::service('path.current'),
+      \Drupal::service('plugin.manager.menu.link'),
+      \Drupal::service('language_manager'),
+      \Drupal::service('entity_type.manager'),
+      \Drupal::service('entity.repository'),
+      \Drupal::service('logger.factory'),
+      \Drupal::service('messenger'),
+      \Drupal::service('module_handler'),
+      \Drupal::service('path.matcher')
+    );
+
+    $router = \Drupal::service('router.no_access_checks');
+    $route_match = new RouteMatch($route_name, $router->match($url->getInternalPath())['_route_object']);
+    $result = $breadcrumb_builder->build($route_match);
+    $this->assertCount(2, $result->getLinks());
+    $this->assertEquals('Part 1', $result->getLinks()[0]->getText());
+    $this->assertEquals('base:part-1', $result->getLinks()[0]->getUrl()->toUriString());
+    $this->assertEquals('Easy Breadcrumb Custom Path Test', $result->getLinks()[1]->getText());
+    $this->assertEquals('route:<none>', $result->getLinks()[1]->getUrl()->toUriString());
+  }
 }
-- 
2.34.1

